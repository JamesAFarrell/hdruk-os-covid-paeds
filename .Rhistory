arrange(patient_id, admission_date) %>%
mutate(index = row_number()) %>%
ungroup()
# Check and log if admission periods overlap ----
data_admissions = data_admissions %>%
group_by(patient_id) %>%
mutate(overlap_with_prior =
case_when(admission_date < lag(discharge_date)~ 1,
TRUE ~ 0))
View(data_admissions)
log_admissions_filter = log_admissions_filter %>%
mutate(overlapping_episodes = sum(data_admissions %>%
pull(data_admissions)))
log_admissions_filter = log_admissions_filter %>%
mutate(overlapping_episodes = sum(data_admissions %>%
pull(overlap_with_prior)))
View(log_admissions_filter)
# Read processed data  ----
data_patient = read_rds(here::here("output", "data", "data_patient.rds"))
explanatory = c("age", "age.factor", "sex", "ethnicity", "ethnicity_6_sus",
"region", "imd", "rural_urban",
"asthma", "diabetes",
"death.factor",
"admission_count.factor", "gp_contact_count.factor")
library("finalfit")
# Read processed data  ----
data_patient = read_rds(here::here("output", "data", "data_patient.rds"))
# Export summary table ---
dependent = "covid_status"
explanatory = c("age", "age.factor", "sex", "ethnicity", "ethnicity_6_sus",
"region", "imd", "rural_urban",
"asthma", "diabetes",
"death.factor",
"admission_count.factor", "gp_contact_count.factor")
tbl_summary = data_patient %>%
summary_factorlist(dependent, explanatory)
tbl_summary
data_patient %>%
ggplot(aes(covid_positive_test_date_1)) +
geom_histogram()
# Set defaults
my_theme = theme_bw()
data_patient %>%
ggplot(aes(covid_positive_test_date_1)) +
geom_histogram() +
my_theme()
# Set defaults
my_theme = theme_bw()
# GP-patient interaction
plot_hist_gp_contact_count = data_extract %>%
ggplot(aes(gp_contact_count)) +
geom_histogram()
# Hospital admissions
plot_hist_admission_count = data_extract %>%
ggplot(aes(admission_count)) +
geom_histogram() +
my_theme()
data_patient %>%
ggplot(aes(covid_positive_test_date_1)) +
geom_histogram() +
my_theme()
# Set defaults
my_theme = theme_bw()
data_patient %>%
ggplot(aes(covid_positive_test_date_1)) +
geom_histogram() +
my_theme()
data_patient %>%
ggplot(aes(covid_positive_test_date_1)) +
geom_histogram() +
my_theme
?ggsave()
plot_hist = function(data, x){
ggplot(data = data, aes_string(x = x)) +
geom_hist() +
mytheme
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
}
plot_hist(data_patient, "covid_positive_test_date_1")
plot_hist = function(data, x){
ggplot(data = data, aes_string(x = x)) +
geom_histogram() +
mytheme
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
}
plot_hist(data_patient, "covid_positive_test_date_1")
plot_hist = function(data, x){
ggplot(data = data, aes_string(x = x)) +
geom_histogram() +
my_theme
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
}
plot_hist(data_patient, "covid_positive_test_date_1")
if(is.null(colour)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram() +
my_theme
} else {
ggplot(data = data, aes_string(x = x, colour = colour)) +
geom_histogram() +
my_theme
}
plot_hist(data_patient, "covid_positive_test_date_1", "covid_status")
plot_hist(data_patient, "covid_positive_test_date_1", colour = "covid_status")
plot_hist = function(data, x, colour = NULL){
if(is.null(colour)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram() +
my_theme
} else {
ggplot(data = data, aes_string(x = x, colour = colour)) +
geom_histogram() +
my_theme
}
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
}
plot_hist(data_patient, "covid_positive_test_date_1", colour = "covid_status")
if(is.null(fill)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram() +
my_theme
} else {
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram() +
my_theme
}
plot_hist(data_patient, "covid_positive_test_date_1", colour = "covid_status")
plot_hist(data_patient, "covid_positive_test_date_1", "covid_status")
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram() +
my_theme
plot_hist = function(data, x, fill = NULL){
if(is.null(fill)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram() +
my_theme
} else {
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram() +
my_theme
}
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
}
plot_hist(data_patient, "covid_positive_test_date_1", "covid_status")
names(data_patient)
list_plot_hist = list("age",
"death_date",
"covid_positive_test_date_1",
"covid_negative_test_date_1",
"admission_count",
"gp_contact_count",
"covid_positive_test_count",
"covid_negative_test_count")
list("age",
"death_date",
"covid_positive_test_date_1",
"covid_negative_test_date_1",
"admission_count",
"gp_contact_count",
"covid_positive_test_count",
"covid_negative_test_count") %>%
lapply(function(x){
plot_hist(data_patient, x)
})
plot_hist(data_patient, "age")
plot_hist(data_patient, "admission_count")
plot_hist(data_patient, "death_date")
View(data_format)
##### Description ----
# This script:
# - imports data extracted by the cohort extractor
# - tidies missing values
# - removes bad dummy admission dates and reorders dates so no negative time
#   differences (only alters data for dummy data)
# - fills in unknown ethnicity from GP records with ethnicity from SUS (secondary care)
# standardises some variables (eg convert to factor) and derives some new ones
# - saves: - processed one-row-per-patient dataset
#          - processed one-row-per-hospital admission dataset
#          - processed one-row-per-GP contact dataset
# Import libraries
library("tidyverse")
library("lubridate")
library("finalfit")
# Import globally defined variables
gbl_vars = jsonlite::fromJSON(
txt="./analysis/global_variables.json"
)
# Create directory for processed data ----
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
# Set column type based on column name ----
data_format = tibble(
column_names = c(read_csv(
here::here("output", "input.csv.gz"),
n_max = 1,
col_names = FALSE
))) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
))
# Read data from csv ----
data_patient = read_csv(
here::here("output", "input.csv.gz"),
col_types = data_format %>% pull(column_type) %>% paste(collapse = "")
)
# Parse character NAs ----
data_patient = data_patient %>%
mutate(across(
.cols = where(is.character),
.fns = ~na_if(.x, "")
)) %>%
arrange(patient_id) %>%
select(patient_id, everything())
# Hospital admissions dataset ----
data_admissions = data_patient %>%
select(patient_id,
starts_with(c("admission_date", "discharge_date", "admission_method"))) %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date"))), as.character) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = FALSE
) %>%
pivot_wider(
names_from = variable,
values_from = data
) %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d")
# Log number of bad admission rows ----
# Expect to be 0 for real data
log_admissions_filter = data_admissions %>%
summarise(n_discharge_before_admission =
sum(admission_date <= discharge_date, na.rm=TRUE),
n_missing_admission_date = sum(is.na(admission_date)),
n_missing_discharge_date = sum(is.na(discharge_date)))
# Filter out rows with bad admission dates ----
data_admissions = data_admissions %>%
filter(admission_date <= discharge_date,
!is.na(admission_date),
!is.na(discharge_date)) %>%
group_by(patient_id) %>%
arrange(patient_id, admission_date) %>%
mutate(index = row_number()) %>%
ungroup()
# Check and log if admission periods overlap ----
data_admissions = data_admissions %>%
group_by(patient_id) %>%
mutate(overlap_with_prior =
case_when(admission_date < lag(discharge_date)~ 1,
TRUE ~ 0))
log_admissions_filter = log_admissions_filter %>%
mutate(overlapping_episodes = sum(data_admissions %>%
pull(overlap_with_prior)))
# Fix overlapping admission episodes ----
data_admissions = data_admissions %>%
mutate(index = row_number() - cumsum(overlap_with_prior)) %>%
select(-overlap_with_prior) %>%
group_by(patient_id, index) %>%
mutate(admission_date = min(admission_date),
discharge_date = max(discharge_date)) %>%
slice(1) %>%
ungroup()
# GP contact dataset ----
data_gp = data_patient %>%
select(patient_id, starts_with("gp_contact_date_")) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = TRUE
) %>%
pivot_wider(
names_from = variable,
values_from = data
) %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d") %>%
group_by(patient_id) %>%
arrange(patient_id, gp_contact_date) %>%
mutate(index = row_number()) %>%
ungroup()
# Remove admission and gp columns from data_patient
data_patient = data_patient %>%
select(-starts_with(c("admission_date", "discharge_date", "admission_method"))) %>%
select(-starts_with("gp_contact_date_"))
# Create factors and label variables -----
data_patient = data_patient %>%
mutate(
age = age %>%
ff_label("Age (years)"),
age.factor = cut(age,
breaks = c(4,10,15,18))%>%
ff_label("Age group (years)"),
sex = sex %>%
factor() %>%
ff_label("Sex"),
ethnicity = ethnicity %>%
factor() %>%
ff_label("Ethnicity"),
ethnicity_6_sus = ethnicity_6_sus %>%
factor() %>%
ff_label("Ethnicity (SUS)"),
region = region %>%
factor() %>%
ff_label("Region"),
admission_count.factor = case_when(
admission_count == 0 ~ "0",
admission_count == 1 ~ "1",
admission_count > 1 ~ "2+",
TRUE ~ "(Missing)") %>%
factor() %>%
ff_label("Hospital admissions"),
gp_contact_count.factor = case_when(
gp_contact_count == 0 ~ "0",
gp_contact_count == 1 ~ "1",
gp_contact_count > 1 ~ "2+",
TRUE ~ "(Missing)") %>%
factor() %>%
ff_label("GP interactions"),
covid_status = case_when(
!is.na(covid_positive_test_date_1) ~ "Tested positive",
!is.na(covid_negative_test_date_1) ~ "Tested negative",
TRUE ~ "Never tested") %>%
factor() %>%
ff_label("COVID status"),
death.factor = case_when(
!is.na(death_date) ~ "Dead",
TRUE ~ "Alive") %>%
factor() %>%
ff_label("Death"),
diabetes = diabetes %>%
factor() %>%
ff_label("Diabetes"),
asthma = asthma %>%
factor() %>%
ff_label("Asthma")
)
# Save rds ----
write_rds(data_patient,
here::here("output", "data", "data_patient.rds"),
compress="gz")
write_rds(data_admissions,
here::here("output", "data", "data_admissions.rds"),
compress="gz")
write_rds(data_gp,
here::here("output", "data", "data_gp.rds"),
compress="gz")
## Import libraries ----
library("tidyverse")
library("lubridate")
library("finalfit")
# Set defaults ----
my_theme = theme_bw()
# Functions ----
plot_hist = function(data, x, fill = NULL){
if(is.null(fill)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram() +
my_theme
} else {
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram() +
my_theme
}
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
}
# Create output directories ----
dir.create(here::here("output", "descriptive", "plots"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "descriptive", "tables"), showWarnings = FALSE, recursive=TRUE)
# Read processed data  ----
data_patient = read_rds(here::here("output", "data", "data_patient.rds"))
# Export summary table ---
dependent = "covid_status"
explanatory = c("age", "age.factor", "sex", "ethnicity", "ethnicity_6_sus",
"region", "imd", "rural_urban",
"asthma", "diabetes",
"death.factor",
"admission_count.factor", "gp_contact_count.factor")
tbl_summary = data_patient %>%
summary_factorlist(dependent, explanatory)
write_csv(tbl_summary, here::here("output", "descriptive", "tables", "tbl_summary.csv"))
# Export maximum admissions and GP counts ----
max_counts = data_patient %>%
summarise(n = n(),
max_admissions_count = max(admission_count),
max_gp_contact_count = max(gp_contact_count),
max_covid_negative_test_count = max(covid_negative_test_count),
max_covid_positive_test_count = max(covid_positive_test_count))
write_csv(max_counts, here::here("output", "descriptive", "tables", "max_counts.csv"))
## Plot histograms  -----
list("age",
"death_date",
"covid_positive_test_date_1",
"covid_negative_test_date_1",
"admission_count",
"gp_contact_count",
"covid_positive_test_count",
"covid_negative_test_count") %>%
lapply(function(x){
plot_hist(data_patient, x)
})
plot_hist(data_patient, "death_date")
# Functions ----
plot_hist = function(data, x, fill = NULL, bins = 50){
if(is.null(fill)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram(bins = bins) +
my_theme
} else {
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram(bins = bins) +
my_theme
}
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
}
list("age",
"death_date",
"covid_positive_test_date_1",
"covid_negative_test_date_1",
"admission_count",
"gp_contact_count",
"covid_positive_test_count",
"covid_negative_test_count") %>%
lapply(function(x){
plot_hist(data_patient, x)
})
## Import libraries ----
library("tidyverse")
library("lubridate")
library("finalfit")
# Set defaults ----
my_theme = theme_bw()
# Functions ----
plot_hist = function(data, x, fill = NULL, bins = 50){
if(is.null(fill)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram(bins = bins) +
my_theme
} else {
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram(bins = bins) +
my_theme
}
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
}
# Create output directories ----
dir.create(here::here("output", "descriptive", "plots"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "descriptive", "tables"), showWarnings = FALSE, recursive=TRUE)
# Read processed data  ----
data_patient = read_rds(here::here("output", "data", "data_patient.rds"))
# Export summary table ---
dependent = "covid_status"
explanatory = c("age", "age.factor", "sex", "ethnicity", "ethnicity_6_sus",
"region", "imd", "rural_urban",
"asthma", "diabetes",
"death.factor",
"admission_count.factor", "gp_contact_count.factor")
tbl_summary = data_patient %>%
summary_factorlist(dependent, explanatory, p = TRUE,
add_col_totals = TRUE,
add_row_total = TRUE)
write_csv(tbl_summary, here::here("output", "descriptive", "tables", "tbl_summary.csv"))
# Export maximum admissions and GP counts ----
max_counts = data_patient %>%
summarise(n = n(),
max_admissions_count = max(admission_count),
max_gp_contact_count = max(gp_contact_count),
max_covid_negative_test_count = max(covid_negative_test_count),
max_covid_positive_test_count = max(covid_positive_test_count))
write_csv(max_counts, here::here("output", "descriptive", "tables", "max_counts.csv"))
## Plot histograms  -----
list("age",
"death_date",
"covid_positive_test_date_1",
"covid_negative_test_date_1",
"admission_count",
"gp_contact_count",
"covid_positive_test_count",
"covid_negative_test_count") %>%
lapply(function(x){
plot_hist(data_patient, x)
})
plot_hist(data_patient, "death_date")
