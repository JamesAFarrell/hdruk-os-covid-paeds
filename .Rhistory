group_by(cohort) %>%
summarise(
across(.fns=sum)
) %>%
pivot_longer(
cols=-cohort,
names_to="criteria",
values_to="n"
) %>%
group_by(cohort) %>%
mutate(
n = n %>% plyr::round_any(10)
) %>%
mutate(
n_exclude = lag(n) - n,
pct_all = (n/first(n)) %>% percent(0.1),
pct_exclude_step = (n_exclude/lag(n)) %>% percent(0.1),
crit = str_extract(criteria, "^c\\d+"),
criteria = fct_case_when(
crit == "c0" ~ "OpenSAFELY extract: Registered with GP, alive, with age >1 and <18 years on 01 January 2019",
crit == "c1" ~ "-  with no probable nosocomial infection",
crit == "c2" ~ "-  with no same-day discrepent RT-PCR test result",
crit == "c3" ~ "-  is alive on 1st January",
crit == "c4" ~ "-  with age between 4 and 17 years inclusive",
TRUE ~ NA_character_
)
) %>%
mutate(n_exclude = n_exclude %>% as.character()) %>%
replace_na(
list(n_exclude = "-", pct_exclude_step = "-")
)
}
) %>%
bind_rows()
flowchart %>%
select(cohort, criteria, n, n_exclude, pct_all, pct_exclude_step) %>%
group_by(cohort) %>%
mutate(cohort = if_else(row_number() == 1, cohort %>% as.character(), "")) %>%
kable(
col.names = c("Cohort", "Criteria", "Count (n)",
"Excluded (n)", "% of extract", "% excluded (step)"),
align = c("l", "l", "r", "r", "r","r")
)
explanatory_var = c(
"age_indexed",
"age_group_indexed",
"sex",
"ethnicity",
"imd_Q5_2019",
"region_2019",
"rural_urban_2019",
"covid_status_tp",
"covid_status_fup",
"covid_test_neg_tp_count",
"covid_test_pos_tp_count",
"covid_test_neg_fup_count",
"covid_test_pos_fup_count",
"asthma",
"cancer",
"diabetes",
"epilepsy",
"severe_mental_illness",
"cerebral_palsy",
"chronic_infections",
"devices_and_stomas",
"endocrine_disorders",
"gastrointestinal_disorders",
"haematological_disorders",
"immunological_disorders",
"learning_and_behaviour_difficulties",
"mental_illness",
"musculoskeletal_and_rheum",
"transplant"
)
data_cohort %>%
map(
.explanatory_var = explanatory_var,
.f = function(.data_cohort, .explanatory_var){
.data_cohort %>%
mutate(cohort = cohort %>% factor()) %>%
summary_factorlist(
dependent = "cohort",
explanatory = .explanatory_var,
total_col = FALSE,
add_col_totals = TRUE,
na_include = TRUE
) %>%
mutate(row_num = row_number())
}) %>%
reduce(left_join, by = c("row_num", "label", "levels")) %>%
select(-row_num) %>%
ff_round_counts() %>%
kable(align = c("l", "r", "r", "r", "r", "r"))
admission_counts = data_admissions %>%
rowwise() %>%
mutate(dates = list(seq(admission_date, discharge_date, by = "day"))) %>%
unnest(dates) %>%
mutate(date_period = floor_date(dates, unit = "month")) %>%
count(patient_id, date_period)
outpatient_counts = data_outpatient %>%
mutate(date_period = floor_date(outpatient_date, unit = "month")) %>%
count(patient_id, date_period)
gp_counts = data_gp %>%
mutate(date_period = floor_date(gp_date, unit = "month")) %>%
count(patient_id, date_period)
View(gp_counts)
knitr::opts_chunk$set(echo = FALSE, message=FALSE,
warning=FALSE)
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
library(scales)
library(zoo)
library(knitr)
# Load custom functions and lookup tables ----
source(here::here("analysis", "00_utility_functions.R"))
source(here::here("analysis", "00_lookup_tables.R"))
# Plot theme
theme_set(theme_bw())
# Load global variables ----
global_var = jsonlite::read_json(path = here::here("analysis", "global_variables.json"))
## Study dates ----
study_start_date = ymd(global_var$start_date)
study_end_date   = ymd(global_var$end_date)
tp_start_date    = ymd(global_var$tp_start_date)
tp_end_date      = ymd(global_var$tp_end_date)
fup_start_date   = ymd(global_var$fup_start_date)
# Load datasets
data_patient = read_rds(here::here("output", "data", "data_patient.rds"))
data_testing = read_rds(here::here("output", "data", "data_testing.rds"))
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp = read_rds(here::here("output", "data", "data_gp.rds"))
index_date = c("2019-01-01",
"2020-01-01",
"2021-01-01",
"2022-01-01") %>%
ymd() %>%
as.list()
data_criteria = map(.x = index_date,
.data_patient = data_patient,
.f = function(.index_date, .data_patient){
data_criteria = .data_patient %>%
transmute(
patient_id,
index_date = .index_date,
cohort = year(index_date),
age_indexed = time_length(
interval(date_of_birth, .index_date),
unit = "years"
) %>%
ff_label("Age on 1st January (years)"),
age_group_indexed = age_indexed %>%
cut(
breaks = c(-Inf, 4, 7, 11, 15, 18, Inf),
labels = c("Under 4", "4-6", "7-10", "11-14", "15-17", "18+")
)%>%
ff_label("Age group on 1st January (years)"),
is_alive = is.na(death_date) | death_date > index_date,
isnot_nosocomial = covid_nosocomial == "No",
isnot_descrepant_result = covid_discrepant_test == "No",
is_age_4_or_more = age_indexed >= 4,
is_age_under_18 = age_indexed < 18,
include = is_alive &
isnot_nosocomial &
isnot_descrepant_result &
is_age_4_or_more & is_age_under_18
)
}
)
data_cohort = data_criteria %>%
map(
function(.data_criteria){
data_cohort = .data_criteria %>%
filter(include) %>%
select(patient_id, cohort, index_date, age_indexed, age_group_indexed) %>%
left_join(
data_patient, by = "patient_id"
)
}
)
flowchart = data_criteria %>%
map(
function(.data_criteria){
## Create inclusion flowchart ----
flowchart = .data_criteria %>%
transmute(
patient_id,
cohort,
c0 = TRUE,
c1 = c0 & isnot_nosocomial,
c2 = c1 & isnot_descrepant_result,
c3 = c2 & is_alive,
c4 = c3 & (is_age_4_or_more & is_age_under_18),
) %>%
select(-patient_id) %>%
group_by(cohort) %>%
summarise(
across(.fns=sum)
) %>%
pivot_longer(
cols=-cohort,
names_to="criteria",
values_to="n"
) %>%
group_by(cohort) %>%
mutate(
n = n %>% plyr::round_any(10)
) %>%
mutate(
n_exclude = lag(n) - n,
pct_all = (n/first(n)) %>% percent(0.1),
pct_exclude_step = (n_exclude/lag(n)) %>% percent(0.1),
crit = str_extract(criteria, "^c\\d+"),
criteria = fct_case_when(
crit == "c0" ~ "OpenSAFELY extract: Registered with GP, alive, with age >1 and <18 years on 01 January 2019",
crit == "c1" ~ "-  with no probable nosocomial infection",
crit == "c2" ~ "-  with no same-day discrepent RT-PCR test result",
crit == "c3" ~ "-  is alive on 1st January",
crit == "c4" ~ "-  with age between 4 and 17 years inclusive",
TRUE ~ NA_character_
)
) %>%
mutate(n_exclude = n_exclude %>% as.character()) %>%
replace_na(
list(n_exclude = "-", pct_exclude_step = "-")
)
}
) %>%
bind_rows()
flowchart %>%
select(cohort, criteria, n, n_exclude, pct_all, pct_exclude_step) %>%
group_by(cohort) %>%
mutate(cohort = if_else(row_number() == 1, cohort %>% as.character(), "")) %>%
kable(
col.names = c("Cohort", "Criteria", "Count (n)",
"Excluded (n)", "% of extract", "% excluded (step)"),
align = c("l", "l", "r", "r", "r","r")
)
explanatory_var = c(
"age_indexed",
"age_group_indexed",
"sex",
"ethnicity",
"imd_Q5_2019",
"region_2019",
"rural_urban_2019",
"covid_status_tp",
"covid_status_fup",
"covid_test_neg_tp_count",
"covid_test_pos_tp_count",
"covid_test_neg_fup_count",
"covid_test_pos_fup_count",
"asthma",
"cancer",
"diabetes",
"epilepsy",
"severe_mental_illness",
"cerebral_palsy",
"chronic_infections",
"devices_and_stomas",
"endocrine_disorders",
"gastrointestinal_disorders",
"haematological_disorders",
"immunological_disorders",
"learning_and_behaviour_difficulties",
"mental_illness",
"musculoskeletal_and_rheum",
"transplant"
)
data_cohort %>%
map(
.explanatory_var = explanatory_var,
.f = function(.data_cohort, .explanatory_var){
.data_cohort %>%
mutate(cohort = cohort %>% factor()) %>%
summary_factorlist(
dependent = "cohort",
explanatory = .explanatory_var,
total_col = FALSE,
add_col_totals = TRUE,
na_include = TRUE
) %>%
mutate(row_num = row_number())
}) %>%
reduce(left_join, by = c("row_num", "label", "levels")) %>%
select(-row_num) %>%
ff_round_counts() %>%
kable(align = c("l", "r", "r", "r", "r", "r"))
admission_counts = data_admissions %>%
rowwise() %>%
mutate(dates = list(seq(admission_date, discharge_date, by = "day"))) %>%
unnest(dates) %>%
mutate(date_period = floor_date(dates, unit = "month")) %>%
count(patient_id, date_period)
outpatient_counts = data_outpatient %>%
mutate(date_period = floor_date(outpatient_date, unit = "month")) %>%
count(patient_id, date_period)
gp_counts = data_gp %>%
mutate(date_period = floor_date(gp_date, unit = "month")) %>%
count(patient_id, date_period)
boot_admissions = function(.data_patient, .admission_counts,
start_date, end_date, unit = "month",
.group = NULL, B = 10){
periods = seq(start_date, end_date, by = unit)
map_df(
.x = periods,
.data_patient = .data_patient,
.admission_counts = .admission_counts,
B = B, .group = .group,
.f = function(.x, .data_patient, .admission_counts, B, .group){
.data_patient %>%
select(patient_id, all_of(.group)) %>%
mutate(
date_period = .x,
) %>%
left_join(
.admission_counts,
by = c("patient_id", "date_period")
) %>%
replace_na(list(n = 0)) %>%
group_by(across(all_of(.group))) %>%
summarise(
date = .x,
n_count = n(),
x_boot = list(Hmisc::smean.cl.boot(n, B = B))
) %>%
unnest_wider(x_boot)
}
)
}
boot_outpatient = function(.data_patient, .outpatient_counts,
start_date, end_date, unit = "month",
.group = NULL, B = 10){
periods = seq(start_date, end_date, by = unit)
map_df(
.x = periods,
.data_patient = .data_patient,
.outpatient_counts = .outpatient_counts,
B = B, .group = .group,
.f = function(.x, .data_patient, .outpatient_counts, B, .group){
.data_patient %>%
select(patient_id, all_of(.group)) %>%
mutate(
date_period = .x,
) %>%
left_join(
.outpatient_counts,
by = c("patient_id", "date_period")
) %>%
replace_na(list(n = 0)) %>%
group_by(across(all_of(.group))) %>%
summarise(
date = .x,
n_count = n(),
x_boot = list(Hmisc::smean.cl.boot(n, B = B))
) %>%
unnest_wider(x_boot)
}
)
}
boot_gp = function(.data_patient, .gp_counts,
start_date, end_date, unit = "month",
.group = NULL, B = 10){
periods = seq(start_date, end_date, by = unit)
map_df(
.x = periods,
.data_patient = .data_patient,
.gp_counts = .gp_counts,
B = B, .group = .group,
.f = function(.x, .data_patient, .gp_counts, B, .group){
.data_patient %>%
select(patient_id, all_of(.group)) %>%
mutate(
date_period = .x,
) %>%
left_join(
.gp_counts,
by = c("patient_id", "date_period")
) %>%
replace_na(list(n = 0)) %>%
group_by(across(all_of(.group))) %>%
summarise(
date = .x,
n_count = n(),
x_boot = list(Hmisc::smean.cl.boot(n, B = B))
) %>%
unnest_wider(x_boot)
}
)
}
plot_admissions = function(.index_date, .data_cohort,
.admission_counts, .group = NULL,
group_lab = NULL){
if(is.null(.group)){
group_lab = NULL
} else if (is.null(group_lab)) {
group_lab = extract_variable_label(
.data_cohort[[1]])[.group]
}
plot_data = map2(
.x = .index_date,
.y = .data_cohort,
.admission_counts = .admission_counts,
.group = .group,
.f = function(.x, .y, .admission_counts, .group = .group){
boot_admissions(
start_date = .x,
end_date = min(ceiling_date(.x, "year") - days(1),
study_end_date - days(1)),
unit = "month",
.group = .group,
.data_patient = .y,
.admission_counts = .admission_counts
)
}
) %>%
bind_rows()
plot_data %>%
mutate(date = date + days(14)) %>%
ggplot(aes_string("date", "Mean", colour = .group, fill = .group)) +
geom_line() + geom_point(size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.1, linetype = "dashed", size = 0.2) +
labs(
y = "Mean bed-days per month per patient",
x = NULL, colour = group_lab, fill = group_lab
) +
theme(
legend.position = "bottom"
)
}
plot_outpatient = function(.index_date, .data_cohort,
.outpatient_counts, .group = NULL,
group_lab = NULL){
if(is.null(.group)){
group_lab = NULL
} else if (is.null(group_lab)) {
group_lab = extract_variable_label(
.data_cohort[[1]])[.group]
}
plot_data = map2(
.x = .index_date,
.y = .data_cohort,
.outpatient_counts = .outpatient_counts,
.group = .group,
.f = function(.x, .y, .outpatient_counts, .group = .group){
boot_outpatient(
start_date = .x,
end_date = min(ceiling_date(.x, "year") - days(1),
study_end_date - days(1)),
unit = "month",
.group = .group,
.data_patient = .y,
.outpatient_counts = .outpatient_counts
)
}
) %>%
bind_rows()
plot_data %>%
mutate(date = date + days(14)) %>%
ggplot(aes_string("date", "Mean", colour = .group, fill = .group)) +
geom_line() + geom_point(size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.1, linetype = "dashed", size = 0.2) +
labs(
y = "Mean outpatient contact (days per month per patient)",
x = NULL, colour = group_lab, fill = group_lab
) +
theme(
legend.position = "bottom"
)
}
plot_gp = function(.index_date, .data_cohort,
.gp_counts, .group = NULL,
group_lab = NULL){
if(is.null(.group)){
group_lab = NULL
} else if (is.null(group_lab)) {
group_lab = extract_variable_label(
.data_cohort[[1]])[.group]
}
plot_data = map2(
.x = .index_date,
.y = .data_cohort,
.gp_counts = .gp_counts,
.group = .group,
.f = function(.x, .y, .gp_count, .group = .group){
boot_gp(
start_date = .x,
end_date = min(ceiling_date(.x, "year") - days(1),
study_end_date - days(1)),
unit = "month",
.group = .group,
.data_patient = .y,
.gp_counts = .gp_counts
)
}
) %>%
bind_rows()
plot_data %>%
mutate(date = date + days(14)) %>%
ggplot(aes_string("date", "Mean", colour = .group, fill = .group)) +
geom_line() + geom_point(size = 1) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.1, linetype = "dashed", size = 0.2) +
labs(
y = "Mean healthcare contact (days per month per patient)",
x = NULL, colour = group_lab, fill = group_lab
) +
theme(
legend.position = "bottom"
)
}
