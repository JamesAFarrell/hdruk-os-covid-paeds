files_testing    = list.files(path = "output", pattern = "input_covid_tests_")
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Functions ----
# read_column_type: read column name to determine column data type
read_column_type = function(file){
first_row = read_csv(
file,
n_max = 1,
col_names = FALSE,
col_types = cols(.default = "c")
)
type_string = tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
return(type_string)
}
# Create directory for processed data and diagnostics ----
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "diagnostics"), showWarnings = FALSE, recursive=TRUE)
# Data Files ----
files_testing    = list.files(path = "output", pattern = "input_covid_tests_")
files_outpatient = list.files(path = "output", pattern = "input_outpatient_")
files_gp         = list.files(path = "output", pattern = "input_gp_")
files_admissions = list.files(path = "output", pattern = "input_admissions_")
# Patient data ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Testing data ----
data_testing = here::here("output", files_testing) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
x = data_testing[[1]]
View(x)
x %>% pivot_longer(
cols = -patient_id,
names_to = c("result", "variable", "index"),
names_pattern = "covid_^(.*)_^(.*)_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
)
x %>% pivot_longer(
cols = -patient_id,
names_to = c("result", "variable", "index"),
names_pattern = "covid_(.*)_(.*)_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
)
x %>% pivot_longer(
cols = -patient_id,
names_to = c("result", "variable", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
)
x %>% pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
)
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date) %>%
distinct(patient_id, test_date)
View(y)
x %>% %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
x %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
})
y[[1]]
y[[2]]
y[[3]]
y[[4]]
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows()
View(y)
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date)
View(y)
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date, result)
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date, result) %>%
distinct(patient_id, test_date, result)
View(y)
# Testing data ----
data_testing = here::here("output", files_testing) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
data_testing = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date, result) %>%
distinct(patient_id, test_date, result)
View(data_testing)
data_testing$patient_id %>% unique()
data_testing$patient_id %>% unique() %>% length()
intersect(data_testing %>% filter(result == "negative") %>% pull(patient_id),
data_testing %>% filter(result == "postivie") %>% pull(patient_id))
data_testing %>% ggplot(aes(test_date)) + geom_histogram()
data_testing %>% ggplot(aes(test_date, group = result)) + geom_histogram()
data_testing %>% ggplot(aes(test_date, colour = result)) + geom_histogram()
intersect(data_testing %>% filter(result == "negative") %>% pull(patient_id),
data_testing %>% filter(result == "positive") %>% pull(patient_id))
data_testing %>% filter(result == "positive") %>% pull(patient_id) %>% unique()
# Load packages ----
library(tidyverse)
sample(1:9, 7, TRUE)
sample(1:10, 7, TRUE)
sample(1:9, 7, TRUE)
sample(1:10, 7, TRUE)
# List contact count files
list_contact = list.files(path = "output")
list_contact
# List contact count files
list_contact = list.files(path = "output",
pattern = "input_contact_counts_2018-11-01.csv.gz")
# List contact count files
list_contact = list.files(path = "output",
pattern = "input_contact_counts_20\\d{2}-\\d{2}-01.csv.gz")
# List contact count files
list_contact = list.files(path = "output",
pattern = "input_contact_counts_20\\d{2}-\\d{2}-01.csv.gz")
list_contact
## Import libraries ----
library("tidyverse")
library("lubridate")
library("finalfit")
# Set defaults ----
my_theme = theme_bw()
# Functions ----
plot_hist = function(data, x, fill = NULL, bins = 50){
if(is.null(fill)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram(bins = bins) +
my_theme
} else {
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram(bins = bins) +
my_theme
}
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "counts"))
}
# Set column type based on column name ----
col_type_data_contact_counts = tibble(
column_names = c(read_csv(
here::here("output", "input_contact_counts.csv.gz"),
n_max = 1,
col_names = FALSE
))) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
))
# Read high count admissions from csv ----
data_contact_counts = read_csv(
here::here("output", "input_contact_counts_2018-12-01.csv.gz"),
col_types = col_type_data_contact_counts %>%
pull(column_type) %>%
paste(collapse = "")
)
# Create output directories ----
dir.create(here::here("output", "descriptive", "counts"),
showWarnings = FALSE, recursive=TRUE)
# Export maximum admissions, outpatient and GP counts ----
max_counts = data_contact_counts %>%
summarise(across(matches(c("admission_count_\\d{4}_Q\\d",
"outpatient_count_\\d{4}_Q\\d",
"gp_contact_count_\\d{4}_Q\\d",
"covid_negative_test_count",
"covid_positive_test_count")),
list(max = max))) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
select(-rowname)
# Save max counts ----
write_csv(max_counts, here::here("output", "descriptive", "counts", "max_counts.csv"))
# Cut counts and create factors
data_contact_counts = data_contact_counts %>%
mutate(across(contains(c("admission_", "outpatient_", "gp_", "covid_")),
.fns = list(
factor = ~cut(., c(-Inf,0,5,10,25,50,100,250,Inf)) %>%
fct_recode("0"       = "(-Inf,0]",
"1-5"     = "(0,5]",
"6-10"    = "(5,10]",
"11-25"   = "(10,25]",
"26-50"   = "(25,50]",
"51-100"  = "(50,100]",
"101-250" = "(100,250]",
"250+"    = "(250, Inf]")
)))
# Create summary table ----
dependent = NULL
explanatory = max_counts$name %>%
str_replace("_max", "_factor")
count_summary_tbl = data_contact_counts %>%
summary_factorlist(dependent, explanatory,
add_col_totals = TRUE,
add_row_total = TRUE)
# Save summary table ----
write_csv(count_summary_tbl,
here::here("output", "descriptive", "counts", "count_summary_tbl.csv"))
# Crete histogram plots ----
max_counts$name %>%
str_replace("_max", "") %>%
as.list() %>%
lapply(function(x){
plot_hist(data_contact_counts, x)
})
## Import libraries ----
library("tidyverse")
library("lubridate")
library("finalfit")
# Set defaults ----
my_theme = theme_bw()
# Functions ----
plot_hist = function(data, x, fill = NULL, bins = 50){
if(is.null(fill)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram(bins = bins) +
my_theme
} else {
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram(bins = bins) +
my_theme
}
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "counts"))
}
# Set column type based on column name ----
col_type_data_contact_counts = tibble(
column_names = c(read_csv(
here::here("output", "input_contact_counts.csv.gz"),
n_max = 1,
col_names = FALSE
))) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
))
# Read high count admissions from csv ----
data_contact_counts = read_csv(
here::here("output", "input_contact_counts.csv.gz"),
col_types = col_type_data_contact_counts %>%
pull(column_type) %>%
paste(collapse = "")
)
# Create output directories ----
dir.create(here::here("output", "descriptive", "counts"),
showWarnings = FALSE, recursive=TRUE)
# Export maximum admissions, outpatient and GP counts ----
max_counts = data_contact_counts %>%
summarise(across(matches(c("admission_count_\\d{4}_Q\\d",
"outpatient_count_\\d{4}_Q\\d",
"gp_contact_count_\\d{4}_Q\\d",
"covid_negative_test_count",
"covid_positive_test_count")),
list(max = max))) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
select(-rowname)
# Save max counts ----
write_csv(max_counts, here::here("output", "descriptive", "counts", "max_counts.csv"))
# Cut counts and create factors
data_contact_counts = data_contact_counts %>%
mutate(across(contains(c("admission_", "outpatient_", "gp_", "covid_")),
.fns = list(
factor = ~cut(., c(-Inf,0,5,10,25,50,100,250,Inf)) %>%
fct_recode("0"       = "(-Inf,0]",
"1-5"     = "(0,5]",
"6-10"    = "(5,10]",
"11-25"   = "(10,25]",
"26-50"   = "(25,50]",
"51-100"  = "(50,100]",
"101-250" = "(100,250]",
"250+"    = "(250, Inf]")
)))
# Create summary table ----
dependent = NULL
explanatory = max_counts$name %>%
str_replace("_max", "_factor")
count_summary_tbl = data_contact_counts %>%
summary_factorlist(dependent, explanatory,
add_col_totals = TRUE,
add_row_total = TRUE)
# Save summary table ----
write_csv(count_summary_tbl,
here::here("output", "descriptive", "counts", "count_summary_tbl.csv"))
# Crete histogram plots ----
max_counts$name %>%
str_replace("_max", "") %>%
as.list() %>%
lapply(function(x){
plot_hist(data_contact_counts, x)
})
## Import libraries ----
library("tidyverse")
library("lubridate")
library("finalfit")
# Set defaults ----
my_theme = theme_bw()
# Functions ----
plot_hist = function(data, x, fill = NULL, bins = 50){
if(is.null(fill)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram(bins = bins) +
my_theme
} else {
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram(bins = bins) +
my_theme
}
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "counts"))
}
# Set column type based on column name ----
col_type_data_contact_counts = tibble(
column_names = c(read_csv(
here::here("output", "input_contact_counts.csv.gz"),
n_max = 1,
col_names = FALSE
))) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
))
# Read high count admissions from csv ----
data_contact_counts = read_csv(
here::here("output", "input_contact_counts.csv.gz"),
col_types = col_type_data_contact_counts %>%
pull(column_type) %>%
paste(collapse = "")
)
# Create output directories ----
dir.create(here::here("output", "descriptive", "counts"),
showWarnings = FALSE, recursive=TRUE)
# Export maximum admissions, outpatient and GP counts ----
max_counts = data_contact_counts %>%
summarise(across(matches(c("admission_count_\\d{4}_Q\\d",
"outpatient_count_\\d{4}_Q\\d",
"gp_contact_count_\\d{4}_Q\\d",
"covid_negative_test_count",
"covid_positive_test_count")),
list(max = max))) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
select(-rowname)
# Save max counts ----
write_csv(max_counts, here::here("output", "descriptive", "counts", "max_counts.csv"))
# Cut counts and create factors
data_contact_counts = data_contact_counts %>%
mutate(across(contains(c("admission_", "outpatient_", "gp_", "covid_")),
.fns = list(
factor = ~cut(., c(-Inf,0,5,10,25,50,100,Inf)) %>%
fct_recode("0"       = "(-Inf,0]",
"1-5"     = "(0,5]",
"6-10"    = "(5,10]",
"11-25"   = "(10,25]",
"26-50"   = "(25,50]",
"51-100"  = "(50,100]",
"101+"    = "(100, Inf]")
)))
# Create summary table ----
dependent = NULL
explanatory = max_counts$name %>%
str_replace("_max", "_factor")
count_summary_tbl = data_contact_counts %>%
summary_factorlist(dependent, explanatory,
add_col_totals = TRUE,
add_row_total = TRUE)
# Save summary table ----
write_csv(count_summary_tbl,
here::here("output", "descriptive", "counts", "count_summary_tbl.csv"))
# Crete histogram plots ----
max_counts$name %>%
str_replace("_max", "") %>%
as.list() %>%
lapply(function(x){
plot_hist(data_contact_counts, x)
})
