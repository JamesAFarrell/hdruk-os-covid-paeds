n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
n_max_count = max(data %>% pull(outpatient_count))
tibble(n_row, n_row_bad_id, n_col, n_col_empty, n_max_count)
}) %>%
bind_rows() %>%
mutate(file = files_outpatient) %>%
relocate(file)
## Filter out patients not in cohort, pivot longer to one row per outpatient appointment ----
data_outpatient = data_outpatient %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-outpatient_count) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
) %>%
select(-variable, -index)
}) %>%
bind_rows() %>%
arrange(patient_id, outpatient_date) %>%
distinct(patient_id, outpatient_date)
# GP contact data ----
data_gp = here::here("output", files_gp) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
## Record extract characteristics ----
extract_summary_gp = data_gp %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
tibble(n_row, n_row_bad_id, n_col, n_col_empty)
}) %>%
bind_rows() %>%
mutate(file = files_gp) %>%
relocate(file)
## Filter out patients not in cohort, pivot longer to one row per GP contact ----
data_gp = data_gp %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-gp_contact_count) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "gp_date",
values_drop_na = TRUE
) %>%
select(-variable, -index)
}) %>%
bind_rows() %>%
arrange(patient_id, gp_date) %>%
distinct(patient_id, gp_date)
# Testing data ----
data_testing = here::here("output", files_testing) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
extract_summary_testing = data_testing %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
tibble(n_row, n_row_bad_id, n_col, n_col_empty)
}) %>%
bind_rows() %>%
mutate(file = files_testing) %>%
relocate(file)
data_testing = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-ends_with("_count")) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date, result) %>%
distinct(patient_id, test_date, result)
# Plot histograms ----
plot_hist(data_admissions, "admission_date",  here::here("output", "extract_descriptives", "figures"))
plot_hist(data_admissions, "discharge_date",  here::here("output", "extract_descriptives", "figures"))
plot_hist(data_outpatient, "outpatient_date", here::here("output", "extract_descriptives", "figures"))
plot_hist(data_gp,         "gp_date",         here::here("output", "extract_descriptives", "figures"))
plot_hist(data_testing,    "test_date",       here::here("output", "extract_descriptives", "figures"), fill = "result")
# Save extract summary files ----
write_csv(extract_summary_admissions,
here::here("output", "extract_descriptives", "tables", "extract_summary_admissions.csv"))
write_csv(extract_summary_outpatient,
here::here("output", "extract_descriptives", "tables", "extract_summary_outpatient.csv"))
write_csv(extract_summary_gp,
here::here("output", "extract_descriptives", "tables", "extract_summary_gp.csv"))
write_csv(extract_summary_testing,
here::here("output", "extract_descriptives", "tables", "extract_summary_testing.csv"))
# Save processed data as rds files ----
write_rds(data_patient,
here::here("output", "datasets", "data_patient.rds"),
compress="gz")
write_rds(data_admissions,
here::here("output", "datasets", "data_admissions.rds"),
compress="gz")
write_rds(data_outpatient,
here::here("output", "datasets", "data_outpatient.rds"),
compress="gz")
write_rds(data_gp,
here::here("output", "datasets", "data_gp.rds"),
compress="gz")
write_rds(data_testing,
here::here("output", "datasets", "data_testing.rds"),
compress="gz")
View(data_admissions)
View(data_gp)
View(data_outpatient)
View(data_outpatient)
View(data_testing)
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Load custom functions ----
source(here::here("analysis", "00_functions.R"))
# Create directory for processed data, descriptive tables and plots ----
dir.create(here::here("output", "datasets"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "extract_descriptives", "tables"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "extract_descriptives", "figures"), showWarnings = FALSE, recursive=TRUE)
# Monthly data files ----
files_admissions = list.files("output", "input_admissions_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_outpatient = list.files("output", "input_outpatient_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_gp         = list.files("output", "input_gp_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_testing    = list.files("output", "input_covid_tests_[[:lower:]]+_\\d{4}-\\d{2}-\\d{2}.csv.gz")
# Patient data ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Admission data ----
data_admissions = here::here("output", files_admissions) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
## Record extract characteristics ----
extract_summary_admissions = data_admissions %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
n_max_count = max(data %>% pull(admission_count))
tibble(n_row, n_row_bad_id, n_col, n_col_empty, n_max_count)
}) %>%
bind_rows() %>%
mutate(file = files_admissions) %>%
relocate(file)
## Filter out patients not in cohort, pivot longer to one row per admission spell ----
data_admissions = data_admissions %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-admission_count) %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date"))),
as.character) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = TRUE
) %>%
pivot_wider(
names_from = variable,
values_from = data
)
}) %>%
bind_rows() %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d")
## Record filtering out bad admission spells ----
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_missing_admission_date = sum(is.na(data_admissions$admission_date)),
spells_missing_discharge_date = sum(is.na(data_admissions$discharge_date)),
spells_discharge_before_admission =
sum(data_admissions$discharge_date < data_admissions$admission_date, na.rm = TRUE))
## Filter out admission spells with missing or bad dates ----
data_admissions = data_admissions %>%
filter(admission_date <= discharge_date,
!is.na(admission_date),
!is.na(discharge_date)) %>%
arrange(patient_id, admission_date)
## Record rows to calculate number of overlapping spells ----
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_overlap = nrow(data_admissions))
## Fix overlapping admission spells ----
data_admissions = data_admissions %>%
group_by(patient_id) %>%
mutate(index = row_number(),
overlap_with_prior =
case_when(admission_date < lag(discharge_date)~ 1,
TRUE ~ 0)) %>%
mutate(index = row_number() - cumsum(overlap_with_prior))%>%
select(-overlap_with_prior) %>%
group_by(patient_id, index) %>%
mutate(admission_date = min(admission_date),
discharge_date = max(discharge_date)) %>%
distinct(patient_id, admission_date, discharge_date,
.keep_all = TRUE) %>%
ungroup()
## Calculate number of overlapping spells ----
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_overlap = spells_overlap - nrow(data_admissions))
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
## Record extract characteristics ----
extract_summary_outpatient = data_outpatient %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
n_max_count = max(data %>% pull(outpatient_count))
tibble(n_row, n_row_bad_id, n_col, n_col_empty, n_max_count)
}) %>%
bind_rows() %>%
mutate(file = files_outpatient) %>%
relocate(file)
## Filter out patients not in cohort, pivot longer to one row per outpatient appointment ----
data_outpatient = data_outpatient %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-outpatient_count) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
) %>%
select(-variable, -index)
}) %>%
bind_rows() %>%
arrange(patient_id, outpatient_date) %>%
distinct(patient_id, outpatient_date) %>%
group_by(patient_id) %>%
mutate(index = row_number()) %>%
ungroup() %>%
relocate(index, .after = patient_id)
# GP contact data ----
data_gp = here::here("output", files_gp) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
## Record extract characteristics ----
extract_summary_gp = data_gp %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
tibble(n_row, n_row_bad_id, n_col, n_col_empty)
}) %>%
bind_rows() %>%
mutate(file = files_gp) %>%
relocate(file)
## Filter out patients not in cohort, pivot longer to one row per GP contact ----
data_gp = data_gp %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-gp_contact_count) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "gp_date",
values_drop_na = TRUE
) %>%
select(-variable, -index)
}) %>%
bind_rows() %>%
arrange(patient_id, gp_date) %>%
distinct(patient_id, gp_date) %>%
group_by(patient_id) %>%
mutate(index = row_number()) %>%
ungroup() %>%
relocate(index, .after = patient_id)
# Testing data ----
data_testing = here::here("output", files_testing) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
extract_summary_testing = data_testing %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
tibble(n_row, n_row_bad_id, n_col, n_col_empty)
}) %>%
bind_rows() %>%
mutate(file = files_testing) %>%
relocate(file)
data_testing = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-ends_with("_count")) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date, result) %>%
distinct(patient_id, test_date, result) %>%
group_by(patient_id) %>%
mutate(index = row_number()) %>%
ungroup() %>%
relocate(index, .after = patient_id)
# Plot histograms ----
plot_hist(data_admissions, "admission_date",  here::here("output", "extract_descriptives", "figures"))
plot_hist(data_admissions, "discharge_date",  here::here("output", "extract_descriptives", "figures"))
plot_hist(data_outpatient, "outpatient_date", here::here("output", "extract_descriptives", "figures"))
plot_hist(data_gp,         "gp_date",         here::here("output", "extract_descriptives", "figures"))
plot_hist(data_testing,    "test_date",       here::here("output", "extract_descriptives", "figures"), fill = "result")
# Save extract summary files ----
write_csv(extract_summary_admissions,
here::here("output", "extract_descriptives", "tables", "extract_summary_admissions.csv"))
write_csv(extract_summary_outpatient,
here::here("output", "extract_descriptives", "tables", "extract_summary_outpatient.csv"))
write_csv(extract_summary_gp,
here::here("output", "extract_descriptives", "tables", "extract_summary_gp.csv"))
write_csv(extract_summary_testing,
here::here("output", "extract_descriptives", "tables", "extract_summary_testing.csv"))
# Save processed data as rds files ----
write_rds(data_patient,
here::here("output", "datasets", "data_patient.rds"),
compress="gz")
write_rds(data_admissions,
here::here("output", "datasets", "data_admissions.rds"),
compress="gz")
write_rds(data_outpatient,
here::here("output", "datasets", "data_outpatient.rds"),
compress="gz")
write_rds(data_gp,
here::here("output", "datasets", "data_gp.rds"),
compress="gz")
write_rds(data_testing,
here::here("output", "datasets", "data_testing.rds"),
compress="gz")
View(data_gp)
install.packages("ipw")
library(ipw)
set.seed(16)
n <- 1000
simdat <- data.frame(l = rnorm(n, 10, 5))
a.lin <- simdat$l - 10
pa <- exp(a.lin)/(1 + exp(a.lin))
simdat$a <- rbinom(n, 1, prob = pa)
simdat$y <- 10*simdat$a + 0.5*simdat$l + rnorm(n, -10, 5)
simdat[1:5,]
View(simdat)
library("ipw")
temp <- ipwpoint(exposure = a, family = "binomial", link = "logit",
numerator = ~ 1, denominator = ~ l, data = simdat)
summary(temp$ipw.weights)
ipwplot(weights = temp$ipw.weights, logscale = FALSE,
main = "Stabilized weights", xlim = c(0, 8))
glm(formula = y ~ a, family = "logit", data = simdat)
?glm
glm(formula = y ~ a, family = binomial(link = "logit"), data = simdat)
glm(formula = y ~ a,  data = simdat)
glm(formula = y ~ a,  data = simdat, weights = temp$ipw.weights)
data("haartdat")
haartdat[1:10,]
View(haartdat)
glm(formula = a ~ l, family = binomial(link = "logit"), data = simdat)
numerator = glm(formula = a ~ 1, family = binomial(link = "logit"), data = simdat)
denominator = glm(formula = a ~ l, family = binomial(link = "logit"), data = simdat)
fit_num = glm(formula = a ~ 1, family = binomial(link = "logit"), data = simdat)
fit_den = glm(formula = a ~ l, family = binomial(link = "logit"), data = simdat)
p = predict(fit_num, type = "response")
pi = predict(fit_dem, type = "response")
fit_num = glm(formula = a ~ 1, family = binomial(link = "logit"), data = simdat)
fit_den = glm(formula = a ~ l, family = binomial(link = "logit"), data = simdat)
p = predict(fit_num, type = "response")
pi = predict(fit_den, type = "response")
ifelse(simdat$a == 1, p/pi, (1-p) / (1-pi) )
weights = ifelse(simdat$a == 1, p/pi, (1-p) / (1-pi) )
temp$ipw.weights %>% head()
weights = ifelse(simdat$a == 1, p/pi, (1-p) / (1-pi) )
head(weights)
View(temp)
summary(temp$ipw.weights)
?ipwpoint
library("MatchIt")
data("lalonde")
head(lalonde)
library("MatchIt")
data("lalonde")
head(lalonde)
View(lalonde)
# No matching; constructing a pre-match matchit object
m.out0 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = NULL, distance = "glm")
# Checking balance prior to matching
summary(m.out0)
# Checking balance prior to matching
summary(m.out0)
# 1:1 NN PS matching w/o replacement
m.out1 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = "nearest", distance = "glm")
m.out1
# Checking balance after NN matching
summary(m.out1, un = FALSE)
plot(m.out1, type = "jitter", interactive = FALSE)
plot(m.out1, type = "qq", interactive = FALSE,
which.xs = c("age", "married", "re75"))
# Full matching on a probit PS
m.out2 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = "full", distance = "glm", link = "probit")
m.out2
# Checking balance after full matching
summary(m.out2, un = FALSE)
m.out2$weights
plot(summary(m.out2))
m.data1 <- match.data(m.out1)
head(m.data1)
library("lmtest") #coeftest
library("sandwich") #vcovCL
install.packages("sandwich")
fit1 <- lm(re78 ~ treat + age + educ + race + married + nodegree +
re74 + re75, data = m.data1, weights = weights)
coeftest(fit1, vcov. = vcovCL, cluster = ~subclass)
library("sandwich") #vcovCL
coeftest(fit1, vcov. = vcovCL, cluster = ~subclass)
fit2 <- lm(re78 ~ treat + age + educ + race + married + nodegree +
re74 + re75, data = m.data2, weights = weights)
coeftest(fit2, vcov. = vcovCL, cluster = ~subclass)
fit2 <- lm(re78 ~ treat + age + educ + race + married + nodegree +
re74 + re75, data = m.data2, weights = weights)
m.out2 <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
method = "full", distance = "glm", link = "probit")
m.out2
m.data2 <- match.data(m.out2)
fit2 <- lm(re78 ~ treat + age + educ + race + married + nodegree +
re74 + re75, data = m.data2, weights = weights)
coeftest(fit2, vcov. = vcovCL, cluster = ~subclass)
?matchit
