file,
n_max = 1,
col_names = FALSE,
col_types = cols(.default = "c")
)
type_string = tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
return(type_string)
}
# Create directory for processed data and diagnostics ----
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "diagnostics"), showWarnings = FALSE, recursive=TRUE)
# Data Files ----
files_outpatient = list.files(path = "output", pattern = "input_outpatient_")
files_gp         = list.files(path = "output", pattern = "input_gp_")
files_admissions = list.files(path = "output", pattern = "input_admissions_")
# Read patient data from csv ----
data_patient = read_csv(here::here("output", "input.csv.gz"),
col_types = read_column_type(here::here("output", "input.csv.gz")))
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient[1]) %>%
read_csv()
# data_outpatient = here::here("output", files_outpatient) %>%
#   map(function(file){
#     read_csv(file, col_types = cols(.default = "c")) %>%
#       as_tibble()
#   })
extract_summary_outpatient = data_outpatient %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(function(x) (all(is.na(x)) | all(x==""))) %>%
ncol()
tibble(n_row, n_row_bad_id, n_col, n_col_empty)
}) %>%
bind_rows() %>%
mutate(file = files_outpatient) %>%
relocate(file)
# Read patient data from csv ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
extract_summary_outpatient = data_outpatient %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(function(x) (all(is.na(x)) | all(x==""))) %>%
ncol()
#tibble(n_row, n_row_bad_id, n_col, n_col_empty)
tibble(5)
}) %>%
bind_rows() %>%
mutate(file = files_outpatient) %>%
relocate(file)
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Functions ----
# read_column_type: read column name to determine data type
read_column_type = function(file){
first_row = read_csv(
file,
n_max = 1,
col_names = FALSE,
col_types = cols(.default = "c")
)
type_string = tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
return(type_string)
}
# Create directory for processed data and diagnostics ----
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "diagnostics"), showWarnings = FALSE, recursive=TRUE)
# Data Files ----
files_outpatient = list.files(path = "output", pattern = "input_outpatient_")
files_gp         = list.files(path = "output", pattern = "input_gp_")
files_admissions = list.files(path = "output", pattern = "input_admissions_")
# Read patient data from csv ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
extract_summary_outpatient = data_outpatient %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(function(x) (all(is.na(x)) | all(x==""))) %>%
ncol()
#tibble(n_row, n_row_bad_id, n_col, n_col_empty)
tibble(5)
}) %>%
bind_rows() %>%
mutate(file = files_outpatient) %>%
relocate(file)
View(extract_summary_outpatient)
?all
sample(1:9)
sample(1:9, replace = TRUE)
sample(1:9, replace = TRUE)
sample(1:9, replace = TRUE)
sample(1:9, replace = TRUE)
sample(1:9, 8, replace = TRUE)
sample(1:10, 8, replace = TRUE)
# Read patient data from csv ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Read patient data from csv ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Functions ----
# read_column_type: read column name to determine column data type
read_column_type = function(file){
first_row = read_csv(
file,
n_max = 1,
col_names = FALSE,
col_types = cols(.default = "c")
)
type_string = tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
return(type_string)
}
# Read patient data from csv ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
data_patient$covid_positive_test_date_1
data_patient$covid_positive_test_date_1 %>% min()
data_patient$covid_positive_test_date_1 %>% min(rm.na = TRUE)
data_patient$covid_positive_test_date_1 %>% min(na.rm = TRUE)
data_patient$covid_positive_test_date_1 %>% summary()
data_patient$covid_negative_test_date_1 %>% summary()
data_patient$covid_negative_test_date_2 %>% summary()
sampe(1:9, 10, replace = TRUE)
sampel(1:9, 10, replace = TRUE)
sample(1:9, 10, replace = TRUE)
sample(1:10, 10, replace = TRUE)
library(MatchIt)
library(tidyverse)
library(finalfit)
colon
data_colon = colon_s
View(data_colon)
matchit(status.factor ~ age, data = data_colon)
m0 = matchit(status.factor ~ age, data = data_colon)
m0$match.matrix
?matchit
m0 = matchit(status.factor ~ age + hospital,
data = data_colon,
)
m0$match.matrix
summary(m0)
m0 = matchit(status.factor ~ age + sex + hospital,
data = data_colon,
)
summary(m0)
m0 = matchit(status.factor ~ age + sex + hospital,
data = data_colon,
method = NULL,
distance = "glm"
)
summary(m0)
m1.nearest = matchit(status.factor ~ age + sex + hospital,
data = data_colon,
method = "nearest",
distance = "glm"
)
summary(m1.nearest)
m1.full = matchit(status.factor ~ age + sex + hospital,
data = data_colon,
method = "full",
distance = "glm"
)
install.packages("optmatch")
m1.full = matchit(status.factor ~ age + sex + hospital,
data = data_colon,
method = "full",
distance = "glm"
)
summary(m1.full)
m1.full$X
m1.full$weights
m1.full = matchit(status.factor ~ age + sex,
data = data_colon,
method = "full",
distance = "glm"
)
summary(m1.full)
m1.full = matchit(status.factor ~ age + sex,
data = data_colon,
method = "glm",
distance = "glm"
)
m1.full = matchit(status.factor ~ age + sex,
data = data_colon,
method = "nearest",
distance = "glm"
)
summary(m1.nearest)
summary(m1.nearest) %>% plot()
summary(m1.nearest) %>% plot()
m1.nearest = matchit(status.factor ~ age + sex,
data = data_colon,
method = "nearest",
distance = "glm"
)
summary(m1.nearest) %>% plot()
m1.nearest = matchit(status.factor ~ age + sex + extent.factor,
data = data_colon,
method = "nearest",
distance = "glm"
)
summary(m1.nearest) %>% plot()
m1.exact = matchit(status.factor ~ age + sex + extent.factor,
data = data_colon,
method = "exact",
distance = "glm"
)
summary(m1.exact)
summary(m1.exact) %>% plot()
m1.nearest = matchit(status.factor ~ age + sex + extent.factor,
data = data_colon,
method = "nearest",
distance = "glm"
)
summary(m1.nearest) %>% plot()
sample(1:9, 10, TRUE)
sample(1:10, 10, TRUE)
# Data Files ----
files_testing    = list.files(path = "output", pattern = "input_covid_tests_")
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Functions ----
# read_column_type: read column name to determine column data type
read_column_type = function(file){
first_row = read_csv(
file,
n_max = 1,
col_names = FALSE,
col_types = cols(.default = "c")
)
type_string = tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
return(type_string)
}
# Create directory for processed data and diagnostics ----
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "diagnostics"), showWarnings = FALSE, recursive=TRUE)
# Data Files ----
files_testing    = list.files(path = "output", pattern = "input_covid_tests_")
files_outpatient = list.files(path = "output", pattern = "input_outpatient_")
files_gp         = list.files(path = "output", pattern = "input_gp_")
files_admissions = list.files(path = "output", pattern = "input_admissions_")
# Patient data ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Testing data ----
data_testing = here::here("output", files_testing) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
x = data_testing[[1]]
View(x)
x %>% pivot_longer(
cols = -patient_id,
names_to = c("result", "variable", "index"),
names_pattern = "covid_^(.*)_^(.*)_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
)
x %>% pivot_longer(
cols = -patient_id,
names_to = c("result", "variable", "index"),
names_pattern = "covid_(.*)_(.*)_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
)
x %>% pivot_longer(
cols = -patient_id,
names_to = c("result", "variable", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
)
x %>% pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
)
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date) %>%
distinct(patient_id, test_date)
View(y)
x %>% %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
x %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
})
y[[1]]
y[[2]]
y[[3]]
y[[4]]
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows()
View(y)
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date)
View(y)
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date, result)
y = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date, result) %>%
distinct(patient_id, test_date, result)
View(y)
# Testing data ----
data_testing = here::here("output", files_testing) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
data_testing = data_testing %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("result", "index"),
names_pattern = "covid_(.*)_test_date_(\\d+)",
values_to = "test_date",
values_drop_na = TRUE
) %>%
select(-index)
}) %>%
bind_rows() %>%
arrange(patient_id, test_date, result) %>%
distinct(patient_id, test_date, result)
View(data_testing)
data_testing$patient_id %>% unique()
data_testing$patient_id %>% unique() %>% length()
intersect(data_testing %>% filter(result == "negative") %>% pull(patient_id),
data_testing %>% filter(result == "postivie") %>% pull(patient_id))
data_testing %>% ggplot(aes(test_date)) + geom_histogram()
data_testing %>% ggplot(aes(test_date, group = result)) + geom_histogram()
data_testing %>% ggplot(aes(test_date, colour = result)) + geom_histogram()
intersect(data_testing %>% filter(result == "negative") %>% pull(patient_id),
data_testing %>% filter(result == "positive") %>% pull(patient_id))
data_testing %>% filter(result == "positive") %>% pull(patient_id) %>% unique()
# Load packages ----
library(tidyverse)
sample(1:9, 7, TRUE)
sample(1:10, 7, TRUE)
sample(1:9, 7, TRUE)
sample(1:10, 7, TRUE)
