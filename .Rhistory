breaks = c(-Inf, 4, 7, 11, 15, 18, Inf),
labels = c("Under 4", "4-6", "7-10", "11-14", "15-17", "18+"))%>%
ff_label("Age group on 1st Jan 2021 (years)"),
sex = case_when(
sex == "F" ~ "Female",
sex == "M" ~ "Male",
TRUE ~ NA_character_
) %>%
factor() %>%
ff_label("Sex"),
ethnicity_gp = case_when(
ethnicity_gp == "1" ~ "White",
ethnicity_gp == "4" ~ "Black",
ethnicity_gp == "3" ~ "South Asian",
ethnicity_gp == "2" ~ "Mixed",
ethnicity_gp == "5" ~ "Other",
TRUE ~ NA_character_
) %>%
factor() %>%
ff_label("Ethnicity (primary care)"),
ethnicity_6_sus = case_when(
ethnicity_6_sus == "1" ~ "White",
ethnicity_6_sus == "4" ~ "Black",
ethnicity_6_sus == "3" ~ "South Asian",
ethnicity_6_sus == "2" ~ "Mixed",
ethnicity_6_sus == "5" ~ "Other",
TRUE ~ NA_character_
) %>%
factor() %>%
ff_label("Ethnicity (SUS)"),
ethnicity = coalesce(ethnicity_gp, ethnicity_6_sus) %>%
ff_label("Ethnicity"),
region_2019 = region_2019 %>%
factor() %>%
ff_label("Region"),
region_2020 = region_2020 %>%
factor() %>%
ff_label("Region"),
region_2021 = region_2021 %>%
factor() %>%
ff_label("Region"),
imd_Q5_2019 = case_when(
(imd_2019 >=1)          & (imd_2019 < 32844*1/5) ~ "(most deprived) 1",
(imd_2019 >= 32844*1/5) & (imd_2019 < 32844*2/5) ~ "2",
(imd_2019 >= 32844*2/5) & (imd_2019 < 32844*3/5) ~ "3",
(imd_2019 >= 32844*3/5) & (imd_2019 < 32844*4/5) ~ "4",
(imd_2019 >= 32844*4/5)                          ~ "(least deprived) 5",
TRUE ~ NA_character_
) %>%
factor(levels = c("(most deprived) 1", "2", "3", "4", "(least deprived) 5")) %>%
ff_label("Multiple deprivation quintile"),
imd_Q5_2020 = case_when(
(imd_2020 >=1)          & (imd_2020 < 32844*1/5) ~ "(most deprived) 1",
(imd_2020 >= 32844*1/5) & (imd_2020 < 32844*2/5) ~ "2",
(imd_2020 >= 32844*2/5) & (imd_2020 < 32844*3/5) ~ "3",
(imd_2020 >= 32844*3/5) & (imd_2020 < 32844*4/5) ~ "4",
(imd_2020 >= 32844*4/5)                          ~ "(least deprived) 5",
TRUE ~ NA_character_
) %>%
factor(levels = c("(most deprived) 1", "2", "3", "4", "(least deprived) 5")) %>%
ff_label("Multiple deprivation quintile"),
imd_Q5_2021 = case_when(
(imd_2021 >=1)          & (imd_2021 < 32844*1/5) ~ "(most deprived) 1",
(imd_2021 >= 32844*1/5) & (imd_2021 < 32844*2/5) ~ "2",
(imd_2021 >= 32844*2/5) & (imd_2021 < 32844*3/5) ~ "3",
(imd_2021 >= 32844*3/5) & (imd_2021 < 32844*4/5) ~ "4",
(imd_2021 >= 32844*4/5)                          ~ "(least deprived) 5",
TRUE ~ NA_character_
) %>%
factor(levels = c("(most deprived) 1", "2", "3", "4", "(least deprived) 5")) %>%
ff_label("Multiple deprivation quintile"),
rural_urban_2019 = case_when(
rural_urban_2019 %in% c(1,2)     ~ "Urban conurbation",
rural_urban_2019 %in% c(3,4)     ~ "Urban city or town",
rural_urban_2019 %in% c(5,6,7,8) ~ "Rural town or village",
TRUE                             ~ NA_character_
) %>%
factor() %>%
ff_label("Rural-urban classification"),
rural_urban_2020 = case_when(
rural_urban_2020 %in% c(1,2)     ~ "Urban conurbation",
rural_urban_2020 %in% c(3,4)     ~ "Urban city or town",
rural_urban_2020 %in% c(5,6,7,8) ~ "Rural town or village",
TRUE                             ~ NA_character_
) %>%
factor() %>%
ff_label("Rural-urban classification"),
rural_urban_2021 = case_when(
rural_urban_2021 %in% c(1,2)     ~ "Urban conurbation",
rural_urban_2021 %in% c(3,4)     ~ "Urban city or town",
rural_urban_2021 %in% c(5,6,7,8) ~ "Rural town or village",
TRUE                             ~ NA_character_
) %>%
factor() %>%
ff_label("Rural-urban classification"),
asthma_diagnosis = case_when(
!is.na(asthma_diagnosis_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Asthma diagnosis"),
current_asthma = case_when(
!is.na(current_asthma_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Current asthma"),
cancer_excl_lung_and_haem = case_when(
!is.na(cancer_excl_lung_and_haem_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Cancer (excluding lung or haematological)"),
cancer_haem = case_when(
!is.na(cancer_haem_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Cancer (haematological)"),
cancer_lung = case_when(
!is.na(cancer_lung_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Cancer (lung)"),
chronic_cardiac_disease = case_when(
!is.na(chronic_cardiac_disease_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Chronic cardiac disease"),
heart_disease_other = case_when(
!is.na(heart_disease_other_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Other heart disease"),
chronic_kidney_disease = case_when(
!is.na(chronic_kidney_disease_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Chronic kidney disease"),
chronic_liver_disease = case_when(
!is.na(chronic_liver_disease_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Chronic liver disease"),
chronic_respiratory_disease = case_when(
!is.na(chronic_respiratory_disease_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Chronic respiratory disease"),
diabetes = case_when(
!is.na(diabetes_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Diabetes"),
hiv = case_when(
!is.na(hiv_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("HIV"),
intellectual_disability = case_when(
!is.na(intellectual_disability_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Intellectual disability"),
learning_disabilities = case_when(
!is.na(learning_disabilities_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Learning disability"),
severe_mental_illness = case_when(
!is.na(severe_mental_illness_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Severe mental illness"),
neurological_diseases = case_when(
!is.na(neurological_diseases_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Neurological disease"),
other_neurological_conditions = case_when(
!is.na(other_neurological_conditions_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Other neurological conditions"),
cerebral_palsy = case_when(
!is.na(cerebral_palsy_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Cerebral palsy"),
permanent_immunosuppression = case_when(
!is.na(permanent_immunosuppression_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Permanent immunosuppression"),
pregnency_delivery = case_when(
!is.na(pregnency_delivery_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Pregnency and delivery"),
severe_obesity = case_when(
!is.na(severe_obesity_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Severe obesity"),
sickle_cell_disease = case_when(
!is.na(sickle_cell_disease_date) ~ "Yes",
TRUE ~ "No"
) %>%
factor() %>%
ff_label("Sickle cell disease"),
)
# Covid status, counts and test dates ----
## First positive test date ----
data_patient = data_patient %>%
left_join(
data_testing %>%
filter(result == "Positive") %>%
group_by(patient_id) %>%
filter(row_number() == 1) %>%
select(patient_id, covid_pos_test_date_1 = test_date),
by = "patient_id"
)
## Count tests by result by period ----
data_patient = data_patient %>%
left_join(
data_testing %>%
mutate(
result_abr = if_else(result == "Positive", "pos", "neg"),
test_period = case_when(
test_date < tp_start_date ~ NA_character_,
test_date <= tp_end_date  ~ "tp", # Testing period
test_date <= study_end_date ~ "fup", # Follow-up period
TRUE ~ NA_character_
),
result_period = paste0(result_abr, "_", test_period)
) %>%
group_by(patient_id) %>%
count(result_period) %>%
pivot_wider(
names_from = result_period,
names_glue = "covid_test_{result_period}_count",
values_from = n,
),
by = "patient_id"
) %>%
replace_na(
list(covid_test_neg_tp_count = 0,
covid_test_pos_tp_count = 0,
covid_test_neg_fup_count = 0,
covid_test_pos_fup_count = 0)
) %>%
mutate(
covid_test_neg_tp_count = covid_test_neg_tp_count %>%
ff_label("Negative covid test count (testing period)"),
covid_test_pos_tp_count = covid_test_pos_tp_count %>%
ff_label("Positive covid test count (testing period)"),
covid_test_neg_fup_count = covid_test_neg_fup_count %>%
ff_label("Negative covid test count (follow-up period)"),
covid_test_pos_fup_count = covid_test_pos_fup_count %>%
ff_label("Positive covid test count (follow-up period)")
)
## Assign covid status ----
data_patient = data_patient %>%
mutate(covid_status = case_when(
covid_test_pos_tp_count > 0 ~ "Positive",
covid_test_neg_tp_count > 0 ~ "Negative",
TRUE ~ "Untested") %>%
factor() %>%
ff_label("SARS-CoV-2 status (testing period)"),
)
# Exclusion criteria variables ----
## Potential nosocomial infection ----
## Defined as a positive covid test after day 7 in hospital and on or before 7th
##  day following discharge
data_patient = data_patient %>%
left_join(
data_admissions %>%
left_join(
data_patient %>%
select(patient_id, covid_pos_test_date_1),
by = "patient_id") %>%
mutate(
covid_nosocomial = case_when(
# Length of stay less than 7 days: Not nosocomial
(discharge_date - admission_date) < 7 ~ NA_character_,
# Length of stay 7+ days: Nosocomial if positive after day 7 in hospital
# and on or before day 7 following discharge, otherwise not nosocomial
(admission_date + days(7) < covid_pos_test_date_1) &
(discharge_date + days(7) >= covid_pos_test_date_1) ~ "Yes",
TRUE ~ NA_character_
) %>%
ff_label("Nosocomial infection")) %>%
filter(covid_nosocomial == "Yes") %>%
select(patient_id, covid_nosocomial) %>%
group_by(patient_id) %>%
slice(1) %>%
ungroup(),
by = "patient_id"
) %>%
replace_na(list(covid_nosocomial = "No"))
## Discrepant test result ----
data_patient = data_patient %>%
left_join(
data_testing %>%
group_by(patient_id) %>%
mutate(
covid_test_pos_1 = first(test_date[result == "Positive"])
) %>%
ungroup() %>%
filter(test_date == covid_test_pos_1 & result == "Negative") %>%
mutate(covid_discrepant_test = "Yes") %>%
select(patient_id, covid_discrepant_test),
by = "patient_id"
) %>%
replace_na(list(covid_discrepant_test = "No"))
# Save data as rds ----
write_rds(data_patient,
here::here("output", "data", "data_patient.rds"),
compress="gz")
knitr::opts_chunk$set(echo = FALSE, message=FALSE,
warning=FALSE)
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
library(scales)
library(zoo)
library(knitr)
# Load custom functions and lookup tables ----
source(here::here("analysis", "00_utility_functions.R"))
source(here::here("analysis", "00_lookup_tables.R"))
# Plot theme
theme_set(theme_bw())
# Load datasets
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp = read_rds(here::here("output", "data", "data_gp.rds"))
dependent = "covid_status"
explanatory = c(
"age_2019",
"age_2019_factor",
"sex",
"ethnicity",
"imd_Q5_2019",
"region_2019",
"rural_urban_2019",
"asthma_diagnosis",
"current_asthma",
"cancer_excl_lung_and_haem",
"cancer_haem",
"cancer_lung",
"chronic_cardiac_disease",
"heart_disease_other",
"chronic_kidney_disease",
"chronic_liver_disease",
"chronic_respiratory_disease",
"diabetes",
"hiv",
"intellectual_disability",
"learning_disabilities",
"severe_mental_illness",
"neurological_diseases",
"other_neurological_conditions",
"cerebral_palsy",
"permanent_immunosuppression",
"pregnency_delivery",
"severe_obesity",
"sickle_cell_disease"
)
data_patient %>%
summary_factorlist(
dependent = dependent,
explanatory = explanatory,
total_col = TRUE,
add_col_totals = TRUE,
na_include = TRUE
) %>%
kable(align = c("l", "r", "r", "r", "r", "r"))
library(finalfit)
ff_round_counts = function (.data, accuracy = 10, ignore = c("label", "levels", "p")){
if (!any(names(.data) == "label"))
stop("summary_factorlist() must include: add_dependent_label = FALSE")
df.out = .data %>%
dplyr::mutate(label = dplyr::if_else(label == "", NA_character_, label)) %>%
tidyr::fill(label) %>%
dplyr::group_by(label) %>%
dplyr::mutate(across(-dplyr::any_of(ignore),
function(.){
value_count = as.numeric(stringr::str_extract(., "[:digit:]+")) %>%
plyr::round_any(accuracy)
value_perc = value_count/sum(value_count)*100
dplyr::case_when(!levels %in% c("Mean (SD)", "Median (IQR)") ~
format_n_percent(value_count, value_perc, 1),
TRUE ~ .)
})) %>%
dplyr::mutate(label = dplyr::if_else(dplyr::row_number()==1, label, "")) %>%
dplyr::ungroup()
class(df.out) = c("data.frame.ff", class(df.out))
return(df.out)
}
explanatory = c("age", "age.factor", "sex.factor", "obstruct.factor")
dependent = "perfor.factor"
colon_s %>%
summary_factorlist(dependent, explanatory, p = TRUE) %>%
ff_round_counts()
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Load custom functions ----
source(here::here("analysis", "00_utility_functions.R"))
# Create directory for processed data and diagnostics ----
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "diagnostics"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "descriptives", "data_gp"), showWarnings = FALSE, recursive=TRUE)
# Load patient IDs, admissions and outpatient data
data_id = read_rds(here::here("output", "data", "data_id.rds"))
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient = read_rds(here::here("output", "data", "data_outpatient.rds"))
# Data Files ----
files_gp = list.files(path = here::here("output", "data_weekly"),
pattern = "input_gp_20\\d{2}-\\d{2}-\\d{2}.csv.gz")
# Read GP data from csv ----
data_gp = here::here("output", "data_weekly", files_gp) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
# Extract diagnostics data  ----
diagnostics_gp = data_gp %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_id$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
n_empty_gp_1 = data %>%
select(gp_contact_date_1) %>%
pull() %>% is.na() %>% sum()
max_count = data %>%
select(ends_with("_count")) %>%
pull() %>% max()
tibble(n_row, n_row_bad_id, n_col, n_col_empty, n_empty_gp_1, max_count)
}) %>%
bind_rows() %>%
mutate(file = files_gp) %>%
relocate(file)
# Filter out bad patient IDs, pivot longer ----
data_gp = data_gp %>%
map(function(data){
data %>%
filter(patient_id %in% data_id$patient_id) %>%
select(-ends_with("_count")) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "gp_date",
values_drop_na = TRUE
) %>%
select(-variable, -index)
}) %>%
bind_rows() %>%
arrange(patient_id, gp_date) %>%
distinct(patient_id, gp_date)
# Flag dates coinciding with secondary care ----
data_gp = data_gp %>%
left_join(
data_outpatient %>%
mutate(outpatient_flag = 1) %>%
select(patient_id, gp_date = outpatient_date, outpatient_flag),
by = c("patient_id", "gp_date")
) %>%
left_join(
data_admissions %>%
select(patient_id, admission_date, discharge_date) %>%
rowwise() %>%
mutate(gp_date = list(seq(admission_date, discharge_date, by = "day"))) %>%
unnest(gp_date) %>%
mutate(admission_flag = 1) %>%
select(patient_id, gp_date, admission_flag),
by = c("patient_id", "gp_date")
) %>%
replace_na(list(outpatient_flag = 0, admission_flag = 0))
# Save data as rds ----
write_rds(data_gp,
here::here("output", "data", "data_gp.rds"),
compress="gz")
# Save diagnostics as csv ----
write_csv(diagnostics_gp,
here::here("output", "diagnostics", "diagnostics_gp.csv"))
