status == "Unt" ~ sample(c("M", "F"), 1, replace = TRUE, prob = c(0.7, 0.3))
),
asthma = case_when(
status == "Pos" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.7, 0.3)),
status == "Neg" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.5, 0.5)),
status == "Unt" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.3, 0.7))
)
)
#Using WeightIt to generate weights with multinomial
#logistic regression
W.out.mn <- WeightIt::weightit(status ~ sex + asthma, data = df,
method = "ps", use.mlogit = FALSE)
#Balance summary across treatment pairs
bal.tab(W.out.mn, un = TRUE)
#Assessing balance for each pair of treatments
bal.tab(W.out.mn, un = TRUE, disp.means = TRUE, which.treat = .all)
#Assessing balance graphically
bal.plot(W.out.mn, "sex", which = "both")
bal.plot(W.out.mn, "asthma", which = "both")
#Summarizing balance in a Love plot
love.plot(W.out.mn, thresholds = c(m = .1), binary = "std",
which.treat = .all, abs = FALSE)
m1 = glm.nb(health_contact ~ status + sex + asthma + offset(person_time),
data = df)
## Model healthcare contacts using negative binomial regression
library(MASS)
m1 = glm.nb(health_contact ~ status + sex + asthma + offset(person_time),
data = df)
View(df)
m1 = glm.nb(health_contact ~ status + sex + asthma,
data = df)
m1 = glm(health_contact ~ status + sex + asthma,
data = df, family = poisson)
summary(m1)
m1 = glm(health_contact ~ status + sex + asthma + offset(person_time),
data = df, family = poisson)
summary(m1)
W.out.mn$weights
W.out.mn$weights[1:5]
W.out.mn$s.weights[1:5]
m1 = glm(health_contact ~ status + sex + asthma + offset(person_time),
weights = W.out.mn$weights
data = df,
family = poisson)
m1 = glm(health_contact ~ status + sex + asthma + offset(person_time),
weights = W.out.mn$weights,
data = df,
family = poisson)
summary(m1)
coef(fit_pois)
fit_pois = glm(health_contact ~ status + sex + asthma + offset(person_time),
weights = W.out.mn$weights,
data = df,
family = poisson)
exp(coef(fit_pois))
tidy(fit_pois)
broom::tidy(fit_pois)
library(broom)
library(broom)
tidy(fit_pois, conf.int = TRUE)
tidy(fit_pois, conf.int = TRUE, exponentiate = TRUE)
fit_pois %>%
tidy(conf.int = TRUE, exponentiate = TRUE)
fit_pois = glm.nb(health_contact ~ status + sex + asthma + offset(person_time),
weights = W.out.mn$weights,
data = df)
glm.nb
?glm.nb
?glm.control
fit_pois = glm.nb(health_contact ~ status + sex + asthma + offset(person_time),
weights = W.out.mn$weights,
data = df,
maxit = 100)
fit_nb %>%
tidy(conf.int = TRUE, exponentiate = TRUE)
fit_nb = glm.nb(health_contact ~ status + sex + asthma + offset(person_time),
weights = W.out.mn$weights,
data = df,
maxit = 100)
fit_nb %>%
tidy(conf.int = TRUE, exponentiate = TRUE)
fit_pois %>%
tidy(conf.int = TRUE, exponentiate = TRUE)
fit_pois %>%
tidy(conf.int = TRUE, exponentiate = TRUE)
fit_nb %>%
tidy(conf.int = TRUE, exponentiate = TRUE)
fit_pois %>%
tidy(conf.int = TRUE, exponentiate = TRUE)
fit_nb %>%
tidy(conf.int = TRUE, exponentiate = TRUE)
?weightit
summary(W.out.mn)
#Balance summary across treatment pairs
bal.tab(W.out.mn, un = TRUE)
#Assessing balance for each pair of treatments
bal.tab(W.out.mn, un = TRUE, disp.means = TRUE, which.treat = .all)
library(finalfit)
?summary_factorlist()
#Balance summary across treatment pairs
bal.tab(W.out.mn, un = TRUE)
#Assessing balance for each pair of treatments
bal.tab(W.out.mn, un = TRUE, disp.means = TRUE, which.treat = .all)
?bal.tab
W.out.mn$covs
W.out.mn$treat
W.out.mn$estimand
df = df %>%
mutate(weights = W.out.mn$weights)
W.out.mn$weights
W.out.mn$weights %>% class()
mutate(weights = W.out.mn$weights)
df = df %>%
ungroup() %>%
mutate(weights = W.out.mn$weights)
View(df)
#Balance summary across treatment pairs
bal.tab(W.out.mn, un = TRUE)
#Assessing balance for each pair of treatments
bal.tab(W.out.mn, un = TRUE, disp.means = TRUE, which.treat = .all)
m?love.plot
?love.plot
W.out.mn$method
W.out.mn$estimand
df$weights %>% sum()
(1/df$weights) %>% sum()
932.22 + 70.64
cobalt::col_w_mean(df$sex, df$weights)
cobalt::col_w_mean(as.matrix(df$sex), df$weights)
View(col_w_mean)
?col.w.m
View(col.w.m)
cobalt::cobalt.col.w.m
?col_w_mean
View(summary_factorlist())
View(summary_factorlist
)
df$weights/sum(df$weights)
sum(df$weights/sum(df$weights))
1/df$weights
sum(1/df$weights)
#Balance summary across treatment pairs
bal.tab(W.out.mn, un = TRUE)
summary(df$weights)
sum(df$weights)^2/sum(df$weights^2)
df %>%
group_by(status) %>%
summarise(ess = sum(weights)^2/sum(weights^2))
#Assessing balance for each pair of treatments
bal.tab(W.out.mn, un = TRUE, disp.means = TRUE, which.treat = .all)
x = bal.tab(W.out.mn, un = TRUE, disp.means = TRUE, which.treat = .all)
x
x[[1]]
x[[2]]
x[[1]]$`Neg vs. Unt`
x[[1]]$`Neg vs. Unt` %>% class()
x[[1]]$`Neg vs. Unt` %>% as_tibble()
x[[1]]$`Neg vs. Unt`$Balance
x[[1]]$`Neg vs. Unt`$Observations
df = tibble(
person_time = rnorm(n_total, 12, 2),
health_contact = rpois(n_total, 10),
status = c(
rep("Pos", n_pos_sample),
rep("Neg", n_pos_sample*match_ratio),
rep("Unt", n_pos_sample*match_ratio)) %>%
factor() %>%
fct_relevel("Unt")
) %>%
rowwise() %>%
mutate(
sex = case_when(
status == "Pos" ~ sample(c("M", "F"), 1, replace = TRUE, prob = c(0.5, 0.5)),
status == "Neg" ~ sample(c("M", "F"), 1, replace = TRUE, prob = c(0.5, 0.5)),
status == "Unt" ~ sample(c("M", "F"), 1, replace = TRUE, prob = c(0.7, 0.3))
),
asthma = case_when(
status == "Pos" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.7, 0.3)),
status == "Neg" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.5, 0.5)),
status == "Unt" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.3, 0.7))
),
age_group = case_when(
status == "Pos" ~ sample(c("4-6", "7-10", "11-14", "15-18"), 1, prob = c(0.1, 0.15, 0.25, 0.5)),
status == "Neg" ~ sample(c("4-6", "7-10", "11-14", "15-18"), 1, prob = c(0.1, 0.25, 0.25, 0.4)),
status == "Unt" ~ sample(c("4-6", "7-10", "11-14", "15-18"), 1, prob = c(0.5, 0.15, 0.15, 0.1))
) %>%
factor() %>%
fct_relevel(c("4-6", "7-10", "11-14", "15-18")),
)
df = tibble(
person_time = rnorm(n_total, 12, 2),
health_contact = rpois(n_total, 10),
status = c(
rep("Pos", n_pos_sample),
rep("Neg", n_pos_sample*match_ratio),
rep("Unt", n_pos_sample*match_ratio)) %>%
factor() %>%
fct_relevel("Unt")
) %>%
rowwise() %>%
mutate(
sex = case_when(
status == "Pos" ~ sample(c("M", "F"), 1, replace = TRUE, prob = c(0.5, 0.5)),
status == "Neg" ~ sample(c("M", "F"), 1, replace = TRUE, prob = c(0.5, 0.5)),
status == "Unt" ~ sample(c("M", "F"), 1, replace = TRUE, prob = c(0.7, 0.3))
),
asthma = case_when(
status == "Pos" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.7, 0.3)),
status == "Neg" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.5, 0.5)),
status == "Unt" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.3, 0.7))
),
age_group = case_when(
status == "Pos" ~ sample(c("4-6", "7-10", "11-14", "15-18"), 1, prob = c(0.1, 0.15, 0.25, 0.5)),
status == "Neg" ~ sample(c("4-6", "7-10", "11-14", "15-18"), 1, prob = c(0.1, 0.25, 0.25, 0.4)),
status == "Unt" ~ sample(c("4-6", "7-10", "11-14", "15-18"), 1, prob = c(0.5, 0.15, 0.15, 0.1))
)
) %>%
ungroup() %>%
mutate(
age_group = age_group %>%
factor() %>%
fct_relevel(c("4-6", "7-10", "11-14", "15-18")),
)
library(tidyverse)
library(cobalt)
set.seed(42)
n_pos_sample = 100
match_ratio = 10
n_total = n_pos_sample*(1 + 2*match_ratio)
df = tibble(
person_time = rnorm(n_total, 12, 2),
health_contact = rpois(n_total, 10),
status = c(
rep("Pos", n_pos_sample),
rep("Neg", n_pos_sample*match_ratio),
rep("Unt", n_pos_sample*match_ratio)) %>%
factor() %>%
fct_relevel("Unt")
) %>%
rowwise() %>%
mutate(
sex = case_when(
status == "Pos" ~ sample(c("M", "F"), 1, replace = TRUE, prob = c(0.5, 0.5)),
status == "Neg" ~ sample(c("M", "F"), 1, replace = TRUE, prob = c(0.5, 0.5)),
status == "Unt" ~ sample(c("M", "F"), 1, replace = TRUE, prob = c(0.7, 0.3))
),
asthma = case_when(
status == "Pos" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.7, 0.3)),
status == "Neg" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.5, 0.5)),
status == "Unt" ~ sample(c("Yes", "No"), 1, replace = TRUE, prob = c(0.3, 0.7))
),
age_group = case_when(
status == "Pos" ~ sample(c("4-6", "7-10", "11-14", "15-18"), 1, prob = c(0.1, 0.15, 0.25, 0.5)),
status == "Neg" ~ sample(c("4-6", "7-10", "11-14", "15-18"), 1, prob = c(0.1, 0.25, 0.25, 0.4)),
status == "Unt" ~ sample(c("4-6", "7-10", "11-14", "15-18"), 1, prob = c(0.5, 0.15, 0.15, 0.1))
)
) %>%
ungroup() %>%
mutate(
age_group = age_group %>%
factor() %>%
fct_relevel(c("4-6", "7-10", "11-14", "15-18")),
)
View(df)
#Using WeightIt to generate weights with multinomial
#logistic regression
W.out.mn <- WeightIt::weightit(status ~ sex + asthma + age_group, data = df,
method = "ps", use.mlogit = FALSE)
#Balance summary across treatment pairs
bal.tab(W.out.mn, un = TRUE)
#Assessing balance for each pair of treatments
bal.tab(W.out.mn, un = TRUE, disp.means = TRUE, which.treat = .all)
#Assessing balance graphically
bal.plot(W.out.mn, "sex", which = "both")
bal.plot(W.out.mn, "asthma", which = "both")
bal.plot(W.out.mn, "age_group", which = "both")
#Summarizing balance in a Love plot
love.plot(W.out.mn, thresholds = c(m = .1), binary = "std",
which.treat = .all, abs = FALSE)
#Summarizing balance in a Love plot
love.plot(W.out.mn, thresholds = c(m = .1), binary = "std",
which.treat = .all, abs = TRUE)
?love.plot
#Summarizing balance in a Love plot
love.plot(W.out.mn, thresholds = c(m = .1), binary = "std",
which.treat = .all, abs = TRUE, position = "bottm")
#Summarizing balance in a Love plot
love.plot(W.out.mn, thresholds = c(m = .1), binary = "std",
which.treat = .all, abs = TRUE, position = "right")
#Summarizing balance in a Love plot
love.plot(W.out.mn, thresholds = c(m = .1), binary = "std",
which.treat = .all, abs = TRUE, position = "bottom")
var.names(W.out.mn)
var.names(bal.tab(W.out.mn))
return(out)}
return(out)}
finalpsm <- function(matchit_out, dependent, explanatory = NULL, subclass = T, balance = T, metrics = T, fit = T){
require(dplyr);require(stringr);require(finalfit);require(tibble)
require(tidyr);require(lme4);require(purrr); require(survival); require(coxme)
# Extract from  matchit_out---------------------------
data <- matchit_out$data %>% # Get matched dataset
dplyr::mutate_at(vars(matches("subclass")), factor) %>%
dplyr::filter(match == "Matched")
object <- matchit_out$object # Get matchit object
formula_text <- summary(object)[[1]]$formula %>% deparse() %>%
paste0(collapse = "") %>% stringr::str_squish()
strata_binary <- stringr::str_split_fixed(formula_text, " ~ ", 2)[,1]
strata <- stringr::str_remove(strata_binary, "_01")
if(is.null(explanatory)==F){
# ensure stratifying variable always included (and first)
explanatory <- explanatory[! explanatory %in% c(strata_binary, strata)]
explanatory <- c(strata, explanatory)}
if(is.null(explanatory)==T){
explanatory <- formula_text %>%
stringr::str_replace_all("~", "\\+") %>%
stringr::str_replace_all(strata_binary, strata) %>%
stringr::str_split(" \\+ ") %>%
unlist()}
# Check type of model
if(stringr::str_detect(dependent, "Surv\\(")==T){type = "coxph"}
if(stringr::str_detect(dependent, "Surv\\(")==F){
if(dplyr::pull(data, dependent) %>% class()=="factor"){type = "logistic"}
if(dplyr::pull(data, dependent) %>% class()=="numeric"){type = "linear"}}
if("subclass" %in% names(data)){subclass}else{subclass=F}
# Check if coxph model
out <- NULL
if(type == "coxph"){
formula = as.formula(finalfit::ff_formula(dependent= dependent,
explanatory =  explanatory,
random_effect = if("subclass" %in% names(data)&subclass==T){"subclass"}else{NULL}))
model_metric = NULL
if(subclass==F){
model_fit <- suppressWarnings(eval(bquote(survival::coxph(formula = .(formula),
data = data,
weights = data$weights))))
if(metrics == TRUE){model_metric <- finalfit::ff_metrics(model_fit)}}
if(subclass==T){
model_fit <- suppressWarnings(eval(bquote(coxme::coxme(formula = .(formula),
data = data,
weights = data$weights))))
if(metrics == TRUE){model_metric <- NULL}}
psm <-  suppressWarnings(finalfit::fit2df(model_fit)) %>%
tibble::as_tibble() %>%
dplyr::rename("fit_id" = explanatory, "hr_psm" = HR) %>%
dplyr::mutate_all(as.character)
var_status <- stringr::str_split_fixed(dependent, ", ", 2)[,2] %>% stringr::str_remove(pattern = "\\)")
summary <- data %>%
dplyr::mutate(var_status = pull(., var_status) %>% factor()) %>%
finalfit::summary_factorlist(dependent = "var_status",  explanatory =  explanatory, fit_id = T) %>%
dplyr::select(fit_id, any_of(c("FALSE", "TRUE", "0", "1")))
model_table <- data %>%
finalfit::finalfit.coxph(dependent= dependent,
explanatory =  explanatory, keep_fit_id = T) %>%
tibble::as_tibble() %>%
dplyr::rename_at(vars(contains("Dependent:")), function(x){x="label"}) %>%
dplyr::rename(level = ` `, "hr_uni" = `HR (univariable)`, "hr_multi" = `HR (multivariable)`) %>%
dplyr::left_join(psm, by = "fit_id") %>%
dplyr::left_join(summary, by = "fit_id") %>%
dplyr::select(-fit_id, -index) %>%
dplyr::mutate_at(vars(starts_with("hr_")), function(x){ifelse(x=="-", NA, x)}) %>%
dplyr::mutate(label = ifelse(label=="", NA, label)) %>%
tidyr::fill(label, .direction = "down") %>%
tidyr::pivot_longer(cols = starts_with("hr_")) %>%
dplyr::mutate(value = stringr::str_remove_all(value, "\\)|p=")) %>%
dplyr::mutate(value = stringr::str_remove_all(value, "p")) %>%
dplyr::mutate(hr = paste0(stringr::str_split_fixed(value, ", ", 2)[,1], ")"),
p = stringr::str_split_fixed(value, ", ", 2)[,2]) %>%
dplyr::mutate(hr = ifelse(hr==")", "-", hr),
name = stringr::str_remove(name, "or_")) %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(names_from = "name", values_from = c("hr","p")) %>%
dplyr::rename_at(vars(contains("_uni"), contains("_multi"), contains("_psm")),
function(x){paste0(stringr::str_split_fixed(x, "_", 2)[,2],
"_",
stringr::str_split_fixed(x, "_", 2)[,1])}) %>%
dplyr::select(label, level, any_of(c("FALSE", "TRUE", "0", "1")),
contains("uni_"),contains("multi_"),contains("psm_")) %>%
dplyr::rename_at(vars(starts_with("hr_")), function(x){stringr::str_remove(x, pattern = "hr_")}) %>%
dplyr::group_by(label) %>%
dplyr::mutate(n = 1:n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(label = ifelse(n>1, "", label)) %>%
dplyr::select(-n)
out <- list("balance" = if(balance==T){finalpsm::balance_table(matchit_out)}else{NULL},
"fit" = if(fit==T){model_fit}else{NULL},
"table" = model_table,
"metric" = model_metric)}
if(type == "logistic"){
formula = as.formula(finalfit::ff_formula(dependent= dependent,
explanatory =  explanatory,
random_effect = if("subclass" %in% names(data)&subclass==T){"subclass"}else{NULL}))
if(subclass==F){
model_fit <- suppressWarnings(eval(bquote(glm(formula = formula,
data = data,
weights = data$weights,
family  = "binomial"))))}
if(subclass==T){
model_fit <- suppressWarnings(eval(bquote(lme4::glmer(formula = formula,
data = data,
weights = data$weights,
family  = "binomial"))))}
model_metric = NULL; if(metrics == TRUE){model_metric <- finalfit::ff_metrics(model_fit)}
psm <-  suppressWarnings(finalfit::fit2df(model_fit)) %>%
tibble::as_tibble() %>%
dplyr::rename("fit_id" = explanatory, "or_psm" = OR) %>%
dplyr::mutate_all(as.character)
model_table <- data %>%
finalfit::finalfit(dependent= dependent,
explanatory =  explanatory,
random_effect = if("subclass" %in% names(data)&subclass==T){"subclass"}else{NULL},
keep_fit_id = T) %>%
tibble::as_tibble() %>%
dplyr::rename_at(vars(contains("Dependent:")), function(x){x="label"}) %>%
dplyr::rename_at(vars(contains("OR (multi")), function(x){x="or_multi"}) %>%
dplyr::rename(level = ` `, "or_uni" = `OR (univariable)`) %>%
dplyr::left_join(psm, by = "fit_id") %>%
dplyr::select(-fit_id, -index) %>%
dplyr::mutate_at(vars(starts_with("or_")), function(x){ifelse(x=="-", NA, x)}) %>%
dplyr::mutate(label = ifelse(label=="", NA, label)) %>%
tidyr::fill(label, .direction = "down") %>%
tidyr::pivot_longer(cols = starts_with("or_")) %>%
dplyr::mutate(value = stringr::str_remove_all(value, "\\)|p=")) %>%
dplyr::mutate(value = stringr::str_remove_all(value, "p")) %>%
dplyr::mutate(or = paste0(stringr::str_split_fixed(value, ", ", 2)[,1], ")"),
p = stringr::str_split_fixed(value, ", ", 2)[,2]) %>%
dplyr::mutate(or = ifelse(or==")", "-", or),
name = stringr::str_remove(name, "or_")) %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(names_from = "name", values_from = c("or","p")) %>%
dplyr::rename_at(vars(contains("_uni"), contains("_multi"), contains("_psm")),
function(x){paste0(stringr::str_split_fixed(x, "_", 2)[,2],
"_",
stringr::str_split_fixed(x, "_", 2)[,1])}) %>%
dplyr::select(label, level, levels(pull(data, dependent)),
starts_with("uni_"),starts_with("multi_"),starts_with("psm_")) %>%
dplyr::group_by(label) %>%
dplyr::mutate(n = 1:n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(label = ifelse(n>1, "", label)) %>%
dplyr::select(-n)
out <- list("balance" = if(balance==T){finalpsm::balance_table(matchit_out)}else{NULL},
"fit" = if(fit==T){model_fit}else{NULL},
"table" = model_table,
"metric" = model_metric) %>%
purrr::discard(is.null)}
# linear models (including ATC / ATT)
if(type == "linear"){
formula = as.formula(finalfit::ff_formula(dependent= dependent,
explanatory =  explanatory,
random_effect = if("subclass" %in% names(data)&subclass==T){"subclass"}else{NULL}))
if(subclass==F){
model_fit <- suppressWarnings(eval(bquote(lm(formula = .(formula),
data = data,
weights = data$weights))))}
if(subclass==T){
model_fit <- suppressWarnings(eval(bquote(lme4::lmer(formula = .(formula),
data = data,
weights = data$weights))))}
model_metric = NULL; if(metrics == TRUE){model_metric <- finalfit::ff_metrics(model_fit)}
psm <-  suppressWarnings(finalfit::fit2df(model_fit)) %>%
tibble::as_tibble() %>%
dplyr::rename("fit_id" = explanatory, "beta_psm" = Coefficient) %>%
dplyr::mutate_all(as.character)
model_table <- data %>%
finalfit::finalfit(dependent= dependent,
explanatory =  explanatory,
random_effect = if("subclass" %in% names(data)&subclass==T){"subclass"}else{NULL},
keep_fit_id = T) %>%
tibble::as_tibble() %>%
dplyr::rename_at(vars(contains("Dependent:")), function(x){x="label"}) %>%
dplyr::rename_at(vars(contains("Coefficient (multi")), function(x){x="beta_multi"}) %>%
dplyr::rename(level = ` `, "beta_uni" = `Coefficient (univariable)`) %>%
dplyr::left_join(psm, by = "fit_id") %>%
dplyr::select(-fit_id, -index) %>%
dplyr::mutate_at(vars(starts_with("beta_")), function(x){ifelse(x=="-", NA, x)}) %>%
dplyr::mutate(label = ifelse(label=="", NA, label)) %>%
tidyr::fill(label, .direction = "down") %>%
tidyr::pivot_longer(cols = starts_with("beta_")) %>%
dplyr::mutate(value = stringr::str_remove_all(value, "\\)|p=")) %>%
dplyr::mutate(value = stringr::str_remove_all(value, "p")) %>%
dplyr::mutate(beta = paste0(stringr::str_split_fixed(value, ", ", 2)[,1], ")"),
p = stringr::str_split_fixed(value, ", ", 2)[,2]) %>%
dplyr::mutate(beta = ifelse(beta==")", "-", beta),
name = stringr::str_remove(name, "beta_")) %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(names_from = "name", values_from = c("beta","p")) %>%
dplyr::rename_at(vars(contains("_uni"), contains("_multi"), contains("_psm")),
function(x){paste0(stringr::str_split_fixed(x, "_", 2)[,2],
"_",
stringr::str_split_fixed(x, "_", 2)[,1])}) %>%
dplyr::select(label, level, levels(pull(data, dependent)),
starts_with("uni_"),starts_with("multi_"),starts_with("psm_")) %>%
dplyr::group_by(label) %>%
dplyr::mutate(n = 1:n()) %>%
dplyr::ungroup() %>%
dplyr::mutate(label = ifelse(n>1, "", label)) %>%
dplyr::select(-n)
out <- list("balance" = if(balance==T){finalpsm::balance_table(matchit_out)}else{NULL},
"fit" = if(fit==T){model_fit}else{NULL},
"table" = model_table,
"metric" = model_metric) %>%
purrr::discard(is.null)}
return(out)}
library(finalfit)
colon_s
colon_s = colon_s
View(colon_s)
finalpsm(colon_s, "status.factor")
finalpsm(colon_s, "status.factor", "sex.factor")
library(MatchIt)
matchit_out = matchit(status.factor ~ sex.factor, data = colon_s)
finalpsm(matchit_out, "status.factor", "sex.factor")
