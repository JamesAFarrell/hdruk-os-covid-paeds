covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
age_2019_factor == "Under 4" ~ "Age 4 years or below on 1st Jan 2019",
age_2019_factor == "18+" ~ "Age 18 years or above on 1st Jan 2019",
TRUE ~ NA_character_
),
excl_cohort_2020 = case_when(
covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
age_2020_factor == "Under 4" ~ "Age 4 years or below on 1st Jan 2020",
age_2020_factor == "18+" ~ "Age 18 years or above on 1st Jan 2020",
TRUE ~ NA_character_
),
excl_cohort_2021 = case_when(
covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
age_2021_factor == "Under 4" ~ "Age 4 years or below on 1st Jan 2021",
age_2021_factor == "18+" ~ "Age 18 years or above on 1st Jan 2021",
TRUE ~ NA_character_
),
)
# Save data as rds ----
write_rds(data_patient,
here::here("output", "data", "data_patient.rds"),
compress="gz")
write_rds(data_admissions,
here::here("output", "data", "data_admissions.rds"),
compress="gz")
write_rds(data_outpatient,
here::here("output", "data", "data_outpatient.rds"),
compress="gz")
write_rds(data_gp,
here::here("output", "data", "data_gp.rds"),
compress="gz")
# Save diagnostic log files as csv ----
write_csv(extract_summary_admissions,
here::here("output", "diagnostics", "extract_summary_admissions.csv"))
write_csv(extract_summary_gp,
here::here("output", "diagnostics", "extract_summary_gp.csv"))
write_csv(extract_summary_outpatient,
here::here("output", "diagnostics", "extract_summary_outpatient.csv"))
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Functions ----
# read_column_type: read column name to determine data type
read_column_type = function(file){
tibble(
column_names = c(read_csv(
here::here(file),
n_max = 1,
col_names = FALSE
))) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
}
# Create directory for processed data and diagnostics ----
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "diagnostics"), showWarnings = FALSE, recursive=TRUE)
# Data Files ----
files_outpatient = list.files(path = "output", pattern = "input_outpatient_")
files_gp         = list.files(path = "output", pattern = "input_gp_")
files_admissions = list.files(path = "output", pattern = "input_admissions_")
# Read patient data from csv ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
extract_summary_outpatient = data_outpatient %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(function(x) (all(is.na(x)) | all(x==""))) %>%
ncol()
tibble(n_row, n_row_bad_id, n_col, n_col_empty)
}) %>%
bind_rows() %>%
mutate(file = files_outpatient) %>%
relocate(file)
data_outpatient = data_outpatient %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "outpatient_date",
values_drop_na = TRUE
) %>%
select(-variable, -index)
}) %>%
bind_rows() %>%
arrange(patient_id, outpatient_date) %>%
distinct(patient_id, outpatient_date)
# GP data ----
data_gp = here::here("output", files_gp) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
extract_summary_gp = data_gp %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(function(x) (all(is.na(x)) | all(x==""))) %>%
ncol()
tibble(n_row, n_row_bad_id, n_col, n_col_empty)
}) %>%
bind_rows() %>%
mutate(file = files_gp) %>%
relocate(file)
data_gp = data_gp %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "gp_date",
values_drop_na = TRUE
) %>%
select(-variable, -index)
}) %>%
bind_rows() %>%
arrange(patient_id, gp_date) %>%
distinct(patient_id, gp_date)
# Admission data ----
data_admissions = here::here("output", files_admissions) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
extract_summary_admissions = data_admissions %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(function(x) (all(is.na(x)) | all(x==""))) %>%
ncol()
tibble(n_row, n_row_bad_id, n_col, n_col_empty)
}) %>%
bind_rows() %>%
mutate(file = files_admissions) %>%
relocate(file)
data_admissions = data_admissions %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date"))),
as.character) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = TRUE
) %>%
pivot_wider(
names_from = variable,
values_from = data
)
})
## Filter out rows with missing or bad dates ----
data_admissions = data_admissions %>%
bind_rows() %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d") %>%
filter(admission_date <= discharge_date,
!is.na(admission_date),
!is.na(discharge_date)) %>%
arrange(patient_id, admission_date)
## Fix overlapping admission spells ----
data_admissions = data_admissions %>%
group_by(patient_id) %>%
mutate(index = row_number(),
overlap_with_prior =
case_when(admission_date < lag(discharge_date)~ 1,
TRUE ~ 0)) %>%
mutate(index = row_number() - cumsum(overlap_with_prior))%>%
select(-overlap_with_prior) %>%
group_by(patient_id, index) %>%
mutate(admission_date = min(admission_date),
discharge_date = max(discharge_date)) %>%
distinct(patient_id, admission_date, discharge_date,
.keep_all = TRUE) %>%
ungroup()
# Create factors and label variables -----
data_patient = data_patient %>%
mutate(
date_of_birth = if_else(is.na(date_of_birth),
NA_character_,
paste0(date_of_birth, "-15")) %>%
as.Date(),
age_2019 = as.numeric((ymd("2019-01-01") - date_of_birth)/365.25) %>%
ff_label("Age on 1st Jan 2019 (years)"),
age_2020 = as.numeric((ymd("2020-01-01") - date_of_birth)/365.25) %>%
ff_label("Age on 1st Jan 2020 (years)"),
age_2021 = as.numeric((ymd("2021-01-01") - date_of_birth)/365.25) %>%
ff_label("Age on 1st Jan 2021 (years)"),
age_positive_test = as.numeric((covid_positive_test_date_1 - date_of_birth)/365.25) %>%
ff_label("Age on index RT-PCR test date (years)"),
age_2019_factor = cut(age_2019,
breaks = c(-Inf, 4, 7, 11, 15, 18, Inf),
labels = c("Under 4", "4-6", "7-10", "11-14", "15-17", "18+"))%>%
ff_label("Age group on 1st Jan 2019 (years)"),
age_2020_factor = cut(age_2020,
breaks = c(-Inf, 4, 7, 11, 15, 18, Inf),
labels = c("Under 4", "4-6", "7-10", "11-14", "15-17", "18+"))%>%
ff_label("Age group on 1st Jan 2020 (years)"),
age_2021_factor = cut(age_2021,
breaks = c(-Inf, 4, 7, 11, 15, 18, Inf),
labels = c("Under 4", "4-6", "7-10", "11-14", "15-17", "18+"))%>%
ff_label("Age group on 1st Jan 2021 (years)"),
age_positive_test_factor = cut(age_positive_test,
breaks = c(-Inf, 4, 7, 11, 15, 18, Inf),
labels = c("Under 4", "4-6", "7-10", "11-14", "15-17", "18+"))%>%
ff_label("Age group on index RT-PCR test date (years)"),
sex = case_when(
sex == "F" ~ "Female",
sex == "M" ~ "Male",
TRUE ~ NA_character_
) %>%
factor() %>%
ff_label("Sex"),
ethnicity = case_when(
ethnicity == "1" ~ "White",
ethnicity == "4" ~ "Black",
ethnicity == "3" ~ "South Asian",
ethnicity == "2" ~ "Mixed",
ethnicity == "5" ~ "Other",
TRUE ~ NA_character_
) %>%
factor() %>%
ff_label("Ethnicity (primary care)"),
ethnicity_6_sus = case_when(
ethnicity_6_sus == "1" ~ "White",
ethnicity_6_sus == "4" ~ "Black",
ethnicity_6_sus == "3" ~ "South Asian",
ethnicity_6_sus == "2" ~ "Mixed",
ethnicity_6_sus == "5" ~ "Other",
TRUE ~ NA_character_
) %>%
factor() %>%
ff_label("Ethnicity (SUS)"),
ethnicity_comb = coalesce(ethnicity, ethnicity_6_sus) %>%
ff_label("Ethnicity"),
region_2019 = region_2019 %>%
factor() %>%
ff_label("Region"),
region_2020 = region_2020 %>%
factor() %>%
ff_label("Region"),
region_2021 = region_2021 %>%
factor() %>%
ff_label("Region"),
imd_Q5_2019 = case_when(
(imd_2019 >=1)          & (imd_2019 < 32844*1/5) ~ "(most deprived) 1",
(imd_2019 >= 32844*1/5) & (imd_2019 < 32844*2/5) ~ "2",
(imd_2019 >= 32844*2/5) & (imd_2019 < 32844*3/5) ~ "3",
(imd_2019 >= 32844*3/5) & (imd_2019 < 32844*4/5) ~ "4",
(imd_2019 >= 32844*4/5)                          ~ "(least deprived) 5",
TRUE ~ NA_character_
) %>%
factor(levels = c("(most deprived) 1", "2", "3", "4", "(least deprived) 5")) %>%
ff_label("Multiple deprivation quintile"),
imd_Q5_2020 = case_when(
(imd_2020 >=1)          & (imd_2020 < 32844*1/5) ~ "(most deprived) 1",
(imd_2020 >= 32844*1/5) & (imd_2020 < 32844*2/5) ~ "2",
(imd_2020 >= 32844*2/5) & (imd_2020 < 32844*3/5) ~ "3",
(imd_2020 >= 32844*3/5) & (imd_2020 < 32844*4/5) ~ "4",
(imd_2020 >= 32844*4/5)                          ~ "(least deprived) 5",
TRUE ~ NA_character_
) %>%
factor(levels = c("(most deprived) 1", "2", "3", "4", "(least deprived) 5")) %>%
ff_label("Multiple deprivation quintile"),
imd_Q5_2021 = case_when(
(imd_2021 >=1)          & (imd_2021 < 32844*1/5) ~ "(most deprived) 1",
(imd_2021 >= 32844*1/5) & (imd_2021 < 32844*2/5) ~ "2",
(imd_2021 >= 32844*2/5) & (imd_2021 < 32844*3/5) ~ "3",
(imd_2021 >= 32844*3/5) & (imd_2021 < 32844*4/5) ~ "4",
(imd_2021 >= 32844*4/5)                          ~ "(least deprived) 5",
TRUE ~ NA_character_
) %>%
factor(levels = c("(most deprived) 1", "2", "3", "4", "(least deprived) 5")) %>%
ff_label("Multiple deprivation quintile"),
rural_urban_2019 = case_when(
rural_urban_2019 %in% c(1,2)     ~ "Urban conurbation",
rural_urban_2019 %in% c(3,4)     ~ "Urban city or town",
rural_urban_2019 %in% c(5,6,7,8) ~ "Rural town or village",
TRUE                             ~ NA_character_
) %>%
factor() %>%
ff_label("Rural-urban classification"),
rural_urban_2020 = case_when(
rural_urban_2020 %in% c(1,2)     ~ "Urban conurbation",
rural_urban_2020 %in% c(3,4)     ~ "Urban city or town",
rural_urban_2020 %in% c(5,6,7,8) ~ "Rural town or village",
TRUE                             ~ NA_character_
) %>%
factor() %>%
ff_label("Rural-urban classification"),
rural_urban_2021 = case_when(
rural_urban_2021 %in% c(1,2)     ~ "Urban conurbation",
rural_urban_2021 %in% c(3,4)     ~ "Urban city or town",
rural_urban_2021 %in% c(5,6,7,8) ~ "Rural town or village",
TRUE                             ~ NA_character_
) %>%
factor() %>%
ff_label("Rural-urban classification"),
covid_status = case_when(
!is.na(covid_positive_test_date_1) ~ "SARS-CoV-2 positive",
!is.na(covid_negative_test_date_1) ~ "SARS-CoV-2 negative",
TRUE ~ "Untested"
) %>%
factor() %>%
ff_label("COVID status"),
covid_status_tp = case_when(
covid_positive_test_date_1 >= ymd("2020-01-01") &
covid_positive_test_date_1 < ymd("2021-05-01") ~ "SARS-CoV-2 positive",
covid_negative_test_date_1 >= ymd("2020-01-01") &
covid_negative_test_date_1 < ymd("2021-05-01") ~ "SARS-CoV-2 negative",
TRUE ~ "Untested"
) %>%
factor() %>%
ff_label("COVID status during test period"),
death_factor = case_when(
!is.na(death_date) ~ "Dead",
TRUE               ~ "Alive"
) %>%
factor() %>%
ff_label("Death"),
)
# Define potential nosocomial infection ----
# Defined as a positive covid test after day 7 in hospital and on or before 7th
# day following discharge
data_patient = data_patient %>%
left_join(
data_admissions %>%
left_join(data_patient %>% select(patient_id,
covid_positive_test_date_1),
by = "patient_id") %>%
mutate(covid_nosocomial = if_else(
(admission_date + days(7) < covid_positive_test_date_1) &
(discharge_date + days(7)>= covid_positive_test_date_1),
"Yes", NA_character_) %>%
ff_label("Nosocomial infection")) %>%
filter(covid_nosocomial == "Yes") %>%
select(patient_id, covid_nosocomial) %>%
group_by(patient_id) %>%
slice(1) %>%
ungroup(),
by = "patient_id"
)
# Discrepant test result ----
data_patient = data_patient %>%
mutate(covid_discrepant_test = if_else(
covid_positive_test_date_1 == covid_negative_test_date_before_positive,
"Yes",
NA_character_
))
# Construct cohorts ----
data_patient = data_patient %>%
mutate(
excl_cohort_2019 = case_when(
covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
age_2019_factor == "Under 4" ~ "Age 4 years or below on 1st Jan 2019",
age_2019_factor == "18+" ~ "Age 18 years or above on 1st Jan 2019",
TRUE ~ NA_character_
),
excl_cohort_2020 = case_when(
covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
age_2020_factor == "Under 4" ~ "Age 4 years or below on 1st Jan 2020",
age_2020_factor == "18+" ~ "Age 18 years or above on 1st Jan 2020",
TRUE ~ NA_character_
),
excl_cohort_2021 = case_when(
covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
age_2021_factor == "Under 4" ~ "Age 4 years or below on 1st Jan 2021",
age_2021_factor == "18+" ~ "Age 18 years or above on 1st Jan 2021",
TRUE ~ NA_character_
),
)
# Save data as rds ----
write_rds(data_patient,
here::here("output", "data", "data_patient.rds"),
compress="gz")
write_rds(data_admissions,
here::here("output", "data", "data_admissions.rds"),
compress="gz")
write_rds(data_outpatient,
here::here("output", "data", "data_outpatient.rds"),
compress="gz")
write_rds(data_gp,
here::here("output", "data", "data_gp.rds"),
compress="gz")
# Save diagnostic log files as csv ----
write_csv(extract_summary_admissions,
here::here("output", "diagnostics", "extract_summary_admissions.csv"))
write_csv(extract_summary_gp,
here::here("output", "diagnostics", "extract_summary_gp.csv"))
write_csv(extract_summary_outpatient,
here::here("output", "diagnostics", "extract_summary_outpatient.csv"))
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Create directory for summary descriptives ----
dir.create(here::here("output", "descriptive", "summary"), showWarnings = FALSE, recursive=TRUE)
# Read processed data  ----
data_patient    = read_rds(here::here("output", "data", "data_patient.rds"))
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp         = read_rds(here::here("output", "data", "data_gp.rds"))
# Plot weekly admissions ----
plot_admissions = data_admissions %>%
mutate(week = floor_date(admission_date, "week")) %>%
group_by(week) %>%
count(week) %>%
ggplot(aes(week,n)) +
geom_line()
# Plot weekly outpatient ----
plot_outpatient = data_outpatient %>%
mutate(week = floor_date(outpatient_date, "week")) %>%
group_by(week) %>%
count(week) %>%
ggplot(aes(week,n)) +
geom_line()
# Plot weekly GP contacts ----
plot_gp = data_gp %>%
mutate(week = floor_date(gp_date, "week")) %>%
group_by(week) %>%
count(week) %>%
ggplot(aes(week,n)) +
geom_line()
plot_admissions
plot_outpatient
plot_gp
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Create directory for summary descriptives ----
dir.create(here::here("output", "descriptive", "summary"), showWarnings = FALSE, recursive=TRUE)
# Read processed data  ----
data_patient    = read_rds(here::here("output", "data", "data_patient.rds"))
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp         = read_rds(here::here("output", "data", "data_gp.rds"))
# Plot weekly admissions ----
plot_admissions = data_admissions %>%
mutate(week = floor_date(admission_date, "week")) %>%
group_by(week) %>%
count(week) %>%
ggplot(aes(week,n)) +
geom_line()
ggsave("plot_weekly_admissions.jpeg",
plot = plot_admissions,
device = "jpeg",
path = here::here("output", "descriptive", "summary"))
# Plot weekly outpatient ----
plot_outpatient = data_outpatient %>%
mutate(week = floor_date(outpatient_date, "week")) %>%
group_by(week) %>%
count(week) %>%
ggplot(aes(week,n)) +
geom_line()
ggsave("plot_weekly_outpatient.jpeg",
plot = plot_outpatient,
device = "jpeg",
path = here::here("output", "descriptive", "summary"))
# Plot weekly GP contacts ----
plot_gp = data_gp %>%
mutate(week = floor_date(gp_date, "week")) %>%
group_by(week) %>%
count(week) %>%
ggplot(aes(week,n)) +
geom_line()
ggsave("plot_weekly_gp.jpeg",
plot = plot_gp,
device = "jpeg",
path = here::here("output", "descriptive", "summary"))
