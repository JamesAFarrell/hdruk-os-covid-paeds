## Study dates ----
start_date     = ymd(global_var$start_date)
end_date       = ymd(global_var$end_date)
tp_start_date  = ymd(global_var$tp_start_date)
tp_end_date    = ymd(global_var$tp_end_date)
fup_start_date = ymd(global_var$fup_start_date)
## Max counts ----
n_admission = global_var$n_admission
n_outpatient = global_var$n_outpatient
n_gp = global_var$n_gp
n_positive_test = global_var$n_positive_test
n_negative_test = global_var$n_negative_test
# Load patient data and sample ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Create directory for dummy data ----
dir.create(here::here("output", "dummy_data"), showWarnings = FALSE, recursive=TRUE)
# Dummy data variables ----
n_max = 10000
incidence = 0.4
date_range = seq(start_date, end_date, by="day")
date_range_testing = seq(tp_start_date, end_date, by="day")
admission_method = c("11", "12", "13", "21", "22", "23", "24", "25", "2A",
"2B", "2C", "2D", "28", "31", "32", "82", "83", "81")
primary_diagnosis = c(
paste0(
sample(LETTERS, 1000, replace = TRUE),
sample(0:9, 1000, replace = TRUE),
sample(0:9, 1000, replace = TRUE),
sample(c(0:9, "", "", "", "", "", "", "", "", "", "", "", "", ""), 1000, replace = TRUE)
))
treatment_function = c("100", "101", "102", "110", "242", "260", "280", "321",
"180", "190", "192", "300", "301", "302", "361", "711")
# Small sample from patient_data ----
data_patient = data_patient %>%
filter(patient_id %in% sample(data_patient$patient_id,
min(n_max, nrow(.))))
n_patient = nrow(data_patient)
# Admission data ----
dummy_data_admissions = data_patient %>%
transmute(
admission_date_1 = sample(date_range, n_patient, replace = TRUE),
discharge_date_1 = sample(date_range, n_patient, replace = TRUE),
admission_method_1 = sample(admission_method, n_patient, replace = TRUE),
primary_diagnosis_1 = sample(primary_diagnosis, n_patient, replace = TRUE),
treatment_function_1 = sample(treatment_function, n_patient, replace = TRUE),
critical_care_days_1 = rpois(n_patient, 0.1),
admission_date_2 = sample(date_range, n_patient, replace = TRUE),
discharge_date_2 = sample(date_range, n_patient, replace = TRUE),
admission_method_2 = sample(admission_method, n_patient, replace = TRUE),
primary_diagnosis_2 = sample(primary_diagnosis, n_patient, replace = TRUE),
treatment_function_2 = sample(treatment_function, n_patient, replace = TRUE),
critical_care_days_2 = rpois(n_patient, 0.1),
admission_date_3 = sample(date_range, n_patient, replace = TRUE),
discharge_date_3 = sample(date_range, n_patient, replace = TRUE),
admission_method_3 = sample(admission_method, n_patient, replace = TRUE),
primary_diagnosis_3 = sample(primary_diagnosis, n_patient, replace = TRUE),
treatment_function_3 = sample(treatment_function, n_patient, replace = TRUE),
critical_care_days_3 = rpois(n_patient, 0.1),
admission_date_4 = sample(date_range, n_patient, replace = TRUE),
discharge_date_4 = sample(date_range, n_patient, replace = TRUE),
admission_method_4 = sample(admission_method, n_patient, replace = TRUE),
primary_diagnosis_4 = sample(primary_diagnosis, n_patient, replace = TRUE),
treatment_function_4 = sample(treatment_function, n_patient, replace = TRUE),
critical_care_days_4 = rpois(n_patient, 0.1),
admission_date_5 = sample(date_range, n_patient, replace = TRUE),
discharge_date_5 = sample(date_range, n_patient, replace = TRUE),
admission_method_5 = sample(admission_method, n_patient, replace = TRUE),
primary_diagnosis_5 = sample(primary_diagnosis, n_patient, replace = TRUE),
treatment_function_5 = sample(treatment_function, n_patient, replace = TRUE),
critical_care_days_5 = rpois(n_patient, 0.1),
admission_date_6 = sample(date_range, n_patient, replace = TRUE),
discharge_date_6 = sample(date_range, n_patient, replace = TRUE),
admission_method_6 = sample(admission_method, n_patient, replace = TRUE),
primary_diagnosis_6 = sample(primary_diagnosis, n_patient, replace = TRUE),
treatment_function_6 = sample(treatment_function, n_patient, replace = TRUE),
critical_care_days_6 = rpois(n_patient, 0.1),
admission_date_7 = sample(date_range, n_patient, replace = TRUE),
discharge_date_7 = sample(date_range, n_patient, replace = TRUE),
admission_method_7 = sample(admission_method, n_patient, replace = TRUE),
primary_diagnosis_7 = sample(primary_diagnosis, n_patient, replace = TRUE),
treatment_function_7 = sample(treatment_function, n_patient, replace = TRUE),
critical_care_days_7 = rpois(n_patient, 0.1),
patient_id = patient_id,
)
## Make dates consecutive, create missing values based on incidence ----
dummy_data_admissions = dummy_data_admissions %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date", "critical_care_days"))),
as.character) %>%
pivot_longer(-patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)") %>%
pivot_wider(names_from = variable) %>%
mutate(admission_date_temp = admission_date %>% ymd(),
discharge_date_temp = discharge_date %>% ymd()) %>%
group_by(patient_id) %>%
mutate(
admission_date = sort(c(admission_date_temp, discharge_date_temp)
)[seq(1,2*n(), by = 2)] %>%
as.character(),
discharge_date = sort(c(admission_date_temp, discharge_date_temp)
)[seq(2,2*n(), by = 2)] %>%
as.character(),
) %>%
ungroup() %>%
mutate(prob = runif(n())) %>%
filter(prob <= incidence) %>%
select(-c(prob, admission_date_temp, discharge_date_temp)) %>%
group_by(patient_id) %>%
mutate(index = 1:n()) %>%
pivot_longer(-c(patient_id, index)) %>%
mutate(var_name = paste0(name, "_", index)) %>%
select(-c(name, index))
## Ensure valid number of rows and columns ----
dummy_data_admissions = tibble(
patient_id = unique(data_patient$patient_id) %>% rep(each = 6*n_admission),
var_name = rep(paste0(rep(c("admission_date_", "discharge_date_", "admission_method_",
"primary_diagnosis_", "treatment_function_", "critical_care_days_"), 7),
rep(c(1:n_admission), each = 6)),
length(unique(data_patient$patient_id)))
) %>%
left_join(dummy_data_admissions) %>%
pivot_wider(names_from = var_name, values_from = value)
## Add admission count, relocate patient_id to last row ----
dummy_data_admissions = dummy_data_admissions %>%
mutate(admission_count = dummy_data_admissions %>%
transmute(across(starts_with("admission_date"), ~ !is.na(.x))) %>%
mutate(admission_count = reduce(select(., starts_with("admission_date")), `+`)) %>%
pull(admission_count)) %>%
relocate(patient_id, .after = last_col())
# Outpatient data ----
lambda_outpatient = 0.15
dummy_data_outpatient = data_patient %>%
transmute(
outpatient_count_1 = rpois(n_patient, lambda = lambda_outpatient),
outpatient_count_2 = rpois(n_patient, lambda = lambda_outpatient),
outpatient_count_3 = rpois(n_patient, lambda = lambda_outpatient),
outpatient_count_4 = rpois(n_patient, lambda = lambda_outpatient),
outpatient_count_5 = rpois(n_patient, lambda = lambda_outpatient),
outpatient_count_6 = rpois(n_patient, lambda = lambda_outpatient),
outpatient_count_7 = rpois(n_patient, lambda = lambda_outpatient),
outpatient_count_week = outpatient_count_1 + outpatient_count_2 +
outpatient_count_3 + outpatient_count_4 + outpatient_count_5 +
outpatient_count_6 + outpatient_count_7,
patient_id = patient_id,
)
# GP data ----
lambda_gp = 0.25
dummy_data_gp = data_patient %>%
transmute(
gp_count_1 = rpois(n_patient, lambda = lambda_gp),
gp_count_2 = rpois(n_patient, lambda = lambda_gp),
gp_count_3 = rpois(n_patient, lambda = lambda_gp),
gp_count_4 = rpois(n_patient, lambda = lambda_gp),
gp_count_5 = rpois(n_patient, lambda = lambda_gp),
gp_count_6 = rpois(n_patient, lambda = lambda_gp),
gp_count_7 = rpois(n_patient, lambda = lambda_gp),
gp_count_week = gp_count_1 + gp_count_2 + gp_count_3 + gp_count_4 +
gp_count_5 + gp_count_6 + gp_count_7,
patient_id = patient_id,
)
# Negative covid testing data ----
lambda_covid_negative = 0.15
dummy_data_testing_negative = data_patient %>%
transmute(
covid_negative_test_count_1 = rpois(n_patient, lambda = lambda_covid_negative),
covid_negative_test_count_2 = rpois(n_patient, lambda = lambda_covid_negative),
covid_negative_test_count_3 = rpois(n_patient, lambda = lambda_covid_negative),
covid_negative_test_count_4 = rpois(n_patient, lambda = lambda_covid_negative),
covid_negative_test_count_5 = rpois(n_patient, lambda = lambda_covid_negative),
covid_negative_test_count_6 = rpois(n_patient, lambda = lambda_covid_negative),
covid_negative_test_count_7 = rpois(n_patient, lambda = lambda_covid_negative),
covid_negative_test_week_count = covid_negative_test_count_1 + covid_negative_test_count_2 +
covid_negative_test_count_3 + covid_negative_test_count_4 + covid_negative_test_count_5 +
covid_negative_test_count_6 + covid_negative_test_count_7,
patient_id = patient_id,
)
# Positive covid testing data ----
lambda_covid_positive = 0.01
dummy_data_testing_positive = data_patient %>%
transmute(
covid_positive_test_count_1 = rpois(n_patient, lambda = lambda_covid_positive),
covid_positive_test_count_2 = rpois(n_patient, lambda = lambda_covid_positive),
covid_positive_test_count_3 = rpois(n_patient, lambda = lambda_covid_positive),
covid_positive_test_count_4 = rpois(n_patient, lambda = lambda_covid_positive),
covid_positive_test_count_5 = rpois(n_patient, lambda = lambda_covid_positive),
covid_positive_test_count_6 = rpois(n_patient, lambda = lambda_covid_positive),
covid_positive_test_count_7 = rpois(n_patient, lambda = lambda_covid_positive),
covid_positive_test_week_count = covid_positive_test_count_1 + covid_positive_test_count_2 +
covid_positive_test_count_3 + covid_positive_test_count_4 + covid_positive_test_count_5 +
covid_positive_test_count_6 + covid_positive_test_count_7,
patient_id = patient_id,
)
# Save dummy data ----
write_csv(dummy_data_admissions,       gzfile(here::here("output", "dummy_data", "dummy_data_admissions.csv.gz")))
write_csv(dummy_data_outpatient,       gzfile(here::here("output", "dummy_data", "dummy_data_outpatient.csv.gz")))
write_csv(dummy_data_gp,               gzfile(here::here("output", "dummy_data", "dummy_data_gp.csv.gz")))
write_csv(dummy_data_testing_negative, gzfile(here::here("output", "dummy_data", "dummy_data_testing_negative.csv.gz")))
write_csv(dummy_data_testing_positive, gzfile(here::here("output", "dummy_data", "dummy_data_testing_positive.csv.gz")))
dummy_data_admissions %>% select(primary_diagnosis_1, primary_diagnosis_2, primary_diagnosis_3, primary_diagnosis_4, primary_diagnosis_5, primary_diagnosis_6, primary_diagnosis_7) %>% unlist() %>% unique() %>% sort()
library(tidyverse)
library(lubridate)
library(finalfit)
# Load custom functions ----
source(here::here("analysis", "00_utility_functions.R"))
# Load global variables ----
global_var = jsonlite::read_json(path = here::here("analysis", "global_variables.json"))
# Disclosure control parameters ----
count_round = global_var$disclosure_count_round
# Study dates ----
study_start_date = ymd(global_var$start_date)
study_end_date   = ymd(global_var$end_date)
tp_start_date    = ymd(global_var$tp_start_date)
tp_end_date      = ymd(global_var$tp_end_date)
fup_start_date   = ymd(global_var$fup_start_date)
# Create output directory folders ----
dir.create(here::here("output", "descriptives", "healthcare_use_2019_2022", "tables"),
showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "descriptives", "healthcare_use_2019_2022", "plots"),
showWarnings = FALSE, recursive=TRUE)
#Plot theme
theme_set(theme_bw())
args = commandArgs(trailingOnly=TRUE)
if(length(args) == 0){
resource_type  = "gp"
condition      = "all"
stratification = "overall"
} else{
resource_type  = args[[1]]
condition      = args[[2]]
stratification = args[[3]]
}
resource_type  = "admissions"
condition      = "05_mental_and_behavioural_disorders"
stratification = "age_group"
data_cohort = read_rds(here::here("output", "data", "data_cohort.rds"))
var_labs = extract_variable_label(data_cohort[[1]])
data_cohort = data_cohort%>%
bind_rows() %>%
ff_relabel(var_labs) %>%
mutate(overall = "Overall" %>% ff_label("")) %>%
select(patient_id, cohort, stratification = all_of(stratification))
patient_id_2019 = data_cohort %>% filter(cohort == 2019) %>% pull(patient_id)
patient_id_2020 = data_cohort %>% filter(cohort == 2020) %>% pull(patient_id)
patient_id_2021 = data_cohort %>% filter(cohort == 2021) %>% pull(patient_id)
patient_id_2022 = data_cohort %>% filter(cohort == 2022) %>% pull(patient_id)
if(resource_type == "gp"){
data_resource = read_rds(here::here("output", "data", "data_gp.rds"))
if(condition == "all"){
data_resource = data_resource %>%
filter(str_starts(code_type, "KM_") |
str_starts(code_type, "mapped_1") |
str_starts(code_type, "mapped_2"))%>%
distinct(patient_id, gp_date) %>%
rename(date = gp_date) %>%
mutate(month_date = floor_date(date, "month")) %>%
count(patient_id, month_date)
} else{
data_resource = data_resource %>%
filter(code_type == paste0("KM_", condition)) %>%
distinct(patient_id, gp_date) %>%
rename(date = gp_date) %>%
mutate(month_date = floor_date(date, "month")) %>%
count(patient_id, month_date)
}
} else if(resource_type == "outpatient"){
data_resource = read_rds(here::here("output", "data", "data_outpatient.rds"))
if(condition == "all"){
data_resource = data_resource %>%
filter(is.na(specialty)) %>%
rename(date = outpatient_date) %>%
mutate(month_date = floor_date(date, "month")) %>%
group_by(patient_id, month_date) %>%
summarise(n = sum(outpatient_count)) %>%
ungroup()
} else{
data_resource = data_resource %>%
filter(specialty == paste0("TF_", condition)) %>%
rename(date = outpatient_date) %>%
mutate(month_date = floor_date(date, "month")) %>%
group_by(patient_id, month_date) %>%
summarise(n = sum(outpatient_count)) %>%
ungroup()
}
} else if(resource_type == "admissions" | resource_type == "beddays"){
data_resource = read_rds(here::here("output", "data", "data_admissions.rds"))
if(condition != "all"){
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter() %>%
str_to_lower() %>%
str_replace_all(":", "") %>%
str_replace_all(",", "") %>%
str_replace_all("(", "") %>%
str_replace_all(")", "") %>%
str_replace_all(" ", "_") %>%
factor()) %>%
filter(primary_diagnosis.chapter == condition)
}
if (resource_type == "admissions"){
data_resource = data_resource %>%
rename(date = admission_date) %>%
mutate(month_date = floor_date(date, "month")) %>%
count(patient_id, month_date)
} else {
data_resource = data_resource %>%
summarise(
month_date = seq(floor_date(min(admission_date), "month"),
floor_date(max(discharge_date), "month"),
by = "month")
) %>%
pull(month_date) %>%
as.list() %>%
map(function(month_date){
data_resource %>%
select(patient_id, admission_date, discharge_date) %>%
mutate(
start_date = month_date,
end_date = (month_date + months(1) - days(1))
) %>%
filter(admission_date <= end_date,
discharge_date >= start_date) %>%
mutate(
admission_half_day = if_else(
admission_date >= start_date &
admission_date <= end_date, 0.5, 0),
discharge_half_day = if_else(
discharge_date >= start_date &
discharge_date <= end_date, 0.5, 0),
inbetween_day = (pmin(discharge_date, end_date) -
pmax(admission_date, start_date)) %>% as.numeric(),
length_of_stay = inbetween_day + 1 - admission_half_day -
discharge_half_day
) %>%
group_by(patient_id) %>%
summarise(
month_date = month_date,
n = sum(length_of_stay)
) %>%
ungroup()
}) %>%
bind_rows()
}
} else {
stop("Unrecognised resource_type")
}
data_resource = data_resource %>%
mutate(cohort = year(month_date))%>%
filter(
((patient_id %in% patient_id_2019) & (cohort == 2019)) |
((patient_id %in% patient_id_2020) & (cohort == 2020)) |
((patient_id %in% patient_id_2021) & (cohort == 2021)) |
((patient_id %in% patient_id_2022) & (cohort == 2022))
)
data_resource = data_resource %>%
left_join(data_cohort, by = c("patient_id", "cohort"))
data_resource = data_resource %>%
group_by(cohort, month_date, stratification) %>%
summarise(n_counts = round(sum(n))) %>%
ungroup()
if(resource_type == "outpatient"){
monthly_count = data_cohort %>%
group_by(stratification) %>%
summarise(
month_date = seq(ymd("2019-04-01"), study_end_date - days(1), by = "month"),
cohort = year(month_date)
)
} else {
monthly_count = data_cohort %>%
group_by(stratification) %>%
summarise(
month_date = seq(study_start_date, study_end_date - days(1), by = "month"),
cohort = year(month_date)
)
}
monthly_count = monthly_count %>%
left_join(
data_cohort %>%
group_by(stratification, cohort) %>%
summarise(
n_patient = n()
),
by = c("stratification", "cohort")
) %>%
left_join(
data_resource,
by = c("stratification", "month_date", "cohort")) %>%
replace_na(list(n_counts = 0)) %>%
mutate(
n_patient = n_patient %>% plyr::round_any(count_round),
n_counts = n_counts %>% plyr::round_any(count_round),
n_patient_000 = n_patient/1000
) %>%
rowwise() %>%
mutate(
estimate = poisson.test(n_counts,n_patient_000)$estimate,
ci_lower = poisson.test(n_counts,n_patient_000)$conf.int[1],
ci_upper = poisson.test(n_counts,n_patient_000)$conf.int[2]
) %>%
ungroup()
if(resource_type == "gp"){
y_lab = "Monthly healthcare episodes per 1,000 CYP"
} else if(resource_type == "outpatient"){
y_lab = "Monthly outpatient appointments per 1,000 CYP"
} else if (resource_type == "admissions"){
y_lab = "Monthly admission per 1,000 CYP"
} else if (resource_type == "beddays"){
y_lab = "Monthly bed-days per 1,000 CYP"
}
plot_monthly = monthly_count %>%
ggplot(aes(month_date, estimate, colour = stratification, fill = stratification)) +
geom_point(size = 0.5) + geom_line() +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.2, size = 0.1, linetype=2) +
labs(
y = y_lab, x = NULL,
colour = extract_variable_label(monthly_count)["stratification"],
fill = extract_variable_label(monthly_count)["stratification"]
) +
scale_y_continuous(limits = c(0, NA)) +
theme(legend.position = "bottom")
# Save monthly count table ----
write_csv(monthly_count,
here::here("output", "descriptives", "healthcare_use_2019_2022", "tables",
paste0("monthly_", resource_type, "_", condition,
"_", stratification, ".csv")))
# Save monthly count plot ----
ggsave(paste0("monthly_", resource_type, "_", condition,
"_", stratification, ".jpeg"),
plot_monthly,
path = here::here("output", "descriptives", "healthcare_use_2019_2022", "plots"),
height = 5, width = 7)
data_resource = read_rds(here::here("output", "data", "data_admissions.rds"))
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter())
View(data_resource)
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter() %>%
str_to_lower() %>%
str_replace_all(":", "") %>%
str_replace_all(",", "") %>%
str_replace_all("(", "")
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter() %>%
str_to_lower() %>%
str_replace_all(":", "") %>%
str_replace_all(",", "") %>%
str_replace_all("(", "") %>%
str_replace_all(")", "")
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter() %>%
str_to_lower() %>%
str_replace_all(":", "") %>%
str_replace_all(",", "") %>%
str_replace_all("(", "") %>%
str_replace_all(")", ""))
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter() %>%
str_to_lower() %>%
str_replace_all(":", "") %>%
str_replace_all(",", "") %>%
str_replace_all("(", ""))
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter() %>%
str_to_lower() %>%
str_replace_all(":", "") %>%
str_replace_all(",", ""))
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter() %>%
str_to_lower() %>%
str_replace_all(":", "") %>%
str_replace_all(",", "") %>%
str_replace_all("\\(", "")
View(data_cohort)
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter() %>%
str_to_lower() %>%
str_replace_all(":", "") %>%
str_replace_all(",", "") %>%
str_replace_all("(", ""))
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter() %>%
str_to_lower() %>%
str_replace_all(":", "") %>%
str_replace_all(",", "") %>%
str_replace_all("\\(", ""))
View(data_resource)
library(tidyverse)
library(lubridate)
library(finalfit)
# Load custom functions ----
source(here::here("analysis", "00_utility_functions.R"))
# Load global variables ----
global_var = jsonlite::read_json(path = here::here("analysis", "global_variables.json"))
# Disclosure control parameters ----
count_round = global_var$disclosure_count_round
# Study dates ----
study_start_date = ymd(global_var$start_date)
study_end_date   = ymd(global_var$end_date)
tp_start_date    = ymd(global_var$tp_start_date)
tp_end_date      = ymd(global_var$tp_end_date)
fup_start_date   = ymd(global_var$fup_start_date)
seq(study_start_date, study_end_date - days(1), by = "month")
seq(study_start_date, study_end_date - days(1), by = "month") %>% as.list()
