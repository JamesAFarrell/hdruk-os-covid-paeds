}
if (is.null(breaks)) {
breaks = scales::pretty_breaks()
}
factorlist$Total = as.numeric(stringr::str_extract(as.character(factorlist$all),
"^[:digit:]*"))
factorlist$Total[factorlist$levels == "Mean (SD)" | factorlist$levels ==
"Median (IQR)"] = dim(.data)[1]
drop = grepl("Mean \\(SD\\)|Median \\(IQR\\)", factorlist$levels)
factorlist$levels[drop] = "-"
factorlist$all = NULL
if (is.null(coxfit)) {
coxfit = coxphmulti(.data, dependent, explanatory)
}
coxfit_df_c = fit2df(coxfit, condense = TRUE, estimate_suffix = " (multivariable)",
estimate_name = "HR", exp = TRUE, ...)
coxfit_df = fit2df(coxfit, condense = FALSE, estimate_name = "HR",
exp = TRUE, ...)
df.out = finalfit_merge(factorlist, coxfit_df_c)
df.out = finalfit_merge(df.out, coxfit_df, ref_symbol = "1.0")
if (any(is.na(df.out$label))) {
remove_rows = which(is.na(df.out$label))
df.out = df.out[-remove_rows, ]
}
else {
df.out
}
df.out$levels = as.character(df.out$levels)
df.out$fit_id = factor(df.out$fit_id, levels = df.out$fit_id[order(-df.out$index)])
df.out = df.out %>%
rowwise() %>%
mutate(dependent_var = str_replace(fit_id, levels, "")) %>%
ungroup() %>%
filter(dependent_var %in% plot_vars | row_number() == 1) %>%
select(-dependent_var)
g1 = ggplot(df.out, aes(x = as.numeric(HR), xmin = as.numeric(L95),
xmax = as.numeric(U95), y = fit_id)) + geom_point(aes(size = Total),
shape = 22, fill = "darkblue") + geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 1, linetype = "longdash", colour = "black") +
scale_x_continuous(trans = "log10", breaks = breaks) +
xlab("Hazard ratio (95% CI, log scale)") + theme_classic(14) +
theme(axis.title.x = element_text(), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.line.y = element_blank(),
axis.ticks.y = element_blank(), legend.position = "none")
t1 = ggplot(df.out, aes(x = as.numeric(HR), y = fit_id)) +
annotate("text", x = column_space[1], y = df.out$fit_id,
label = df.out$label, hjust = 0, size = table_text_size)+
annotate("text", x = column_space[2], y = df.out$fit_id,
label = df.out$levels, hjust = 1, size = table_text_size) +
annotate("text", x = column_space[3], y = df.out$fit_id,
label = df.out[, 6], hjust = 1, size = table_text_size) +
theme_classic(14) + theme(axis.title.x = element_text(colour = "white"),
axis.text.x = element_text(colour = "white"), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
line = element_blank())
g1 = g1 + plot_opts
t1 = t1 + table_opts
title = plot_title(.data = .data, dependent = dependent,
dependent_label = dependent_label, prefix = prefix,
suffix = suffix)
gridExtra::grid.arrange(t1, g1, ncol = 2, widths = c(3,
2), top = grid::textGrob(title, x = 0.02, y = 0.2, gp = grid::gpar(fontsize = title_text_size),
just = "left"))
}
colon_s %>%
hr_plot2(dependent, explanatory, plot_vars = "sex.factor", dependent_label = "Survival")
library(finalfit)
library(tidyverse)
data(colon_s)
explanatory = c("sex.factor", "obstruct.factor", "perfor.factor")
dependent = "Surv(time, status)"
hr_plot2 = function (.data, dependent, explanatory, plot_vars = NULL, factorlist = NULL,
coxfit = NULL, remove_ref = FALSE, breaks = NULL, column_space = c(-0.5,
0, 0.5), dependent_label = "Survival", prefix = "",
suffix = ": HR (95% CI, p-value)", table_text_size = 5,
title_text_size = 18, plot_opts = NULL, table_opts = NULL,
...)
{
requireNamespace("ggplot2")
if (!is.null(factorlist)) {
if (is.null(factorlist$fit_id))
stop("summary_factorlist function must include fit_id=TRUE")
}
if (is.null(factorlist)) {
factorlist = summary_factorlist(.data, dependent, explanatory,
fit_id = TRUE)
}
if (remove_ref) {
factorlist = factorlist %>% dplyr::mutate(label = ifelse(label ==
"", NA, label)) %>% tidyr::fill(label) %>% dplyr::group_by(label) %>%
dplyr::filter(dplyr::row_number() != 1 | dplyr::n() >
2 | levels %in% c("Mean (SD)", "Median (IQR)")) %>%
rm_duplicate_labels()
}
if (is.null(breaks)) {
breaks = scales::pretty_breaks()
}
factorlist$Total = as.numeric(stringr::str_extract(as.character(factorlist$all),
"^[:digit:]*"))
factorlist$Total[factorlist$levels == "Mean (SD)" | factorlist$levels ==
"Median (IQR)"] = dim(.data)[1]
drop = grepl("Mean \\(SD\\)|Median \\(IQR\\)", factorlist$levels)
factorlist$levels[drop] = "-"
factorlist$all = NULL
if (is.null(coxfit)) {
coxfit = coxphmulti(.data, dependent, explanatory)
}
coxfit_df_c = fit2df(coxfit, condense = TRUE, estimate_suffix = " (multivariable)",
estimate_name = "HR", exp = TRUE, ...)
coxfit_df = fit2df(coxfit, condense = FALSE, estimate_name = "HR",
exp = TRUE, ...)
df.out = finalfit_merge(factorlist, coxfit_df_c)
df.out = finalfit_merge(df.out, coxfit_df, ref_symbol = "1.0")
if (any(is.na(df.out$label))) {
remove_rows = which(is.na(df.out$label))
df.out = df.out[-remove_rows, ]
}
else {
df.out
}
df.out$levels = as.character(df.out$levels)
df.out$fit_id = factor(df.out$fit_id, levels = df.out$fit_id[order(-df.out$index)])
df.out = df.out %>%
rowwise() %>%
mutate(dependent_var = str_replace(fit_id, levels, "")) %>%
ungroup() %>%
filter(dependent_var %in% plot_vars | row_number() == 1) %>%
select(-dependent_var)
g1 = ggplot(df.out, aes(x = as.numeric(HR), xmin = as.numeric(L95),
xmax = as.numeric(U95), y = fit_id)) + geom_point(aes(size = Total),
shape = 22, fill = "darkblue") + geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 1, linetype = "longdash", colour = "black") +
scale_x_continuous(trans = "log10", breaks = breaks) +
xlab("Hazard ratio (95% CI, log scale)") + theme_classic(14) +
theme(axis.title.x = element_text(), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.line.y = element_blank(),
axis.ticks.y = element_blank(), legend.position = "none")
t1 = ggplot(df.out, aes(x = as.numeric(HR), y = fit_id)) +
annotate("text", x = column_space[1], y = df.out$fit_id,
label = df.out$label, hjust = 0, size = table_text_size)+
annotate("text", x = column_space[2], y = df.out$fit_id,
label = df.out$levels, hjust = 1, size = table_text_size) +
annotate("text", x = column_space[3], y = df.out$fit_id,
label = df.out$levels, hjust = 1, size = table_text_size) +
theme_classic(14) + theme(axis.title.x = element_text(colour = "white"),
axis.text.x = element_text(colour = "white"), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
line = element_blank())
g1 = g1 + plot_opts
t1 = t1 + table_opts
title = plot_title(.data = .data, dependent = dependent,
dependent_label = dependent_label, prefix = prefix,
suffix = suffix)
gridExtra::grid.arrange(t1, g1, ncol = 2, widths = c(3,
2), top = grid::textGrob(title, x = 0.02, y = 0.2, gp = grid::gpar(fontsize = title_text_size),
just = "left"))
}
colon_s %>%
hr_plot2(dependent, explanatory, plot_vars = "sex.factor", dependent_label = "Survival")
View(x)
library(finalfit)
library(tidyverse)
data(colon_s)
explanatory = c("sex.factor", "obstruct.factor", "perfor.factor")
dependent = "Surv(time, status)"
hr_plot2 = function (.data, dependent, explanatory, plot_vars = NULL, factorlist = NULL,
coxfit = NULL, remove_ref = FALSE, breaks = NULL, column_space = c(-0.5,
0, 0.5), dependent_label = "Survival", prefix = "",
suffix = ": HR (95% CI, p-value)", table_text_size = 5,
title_text_size = 18, plot_opts = NULL, table_opts = NULL,
...)
{
requireNamespace("ggplot2")
if (!is.null(factorlist)) {
if (is.null(factorlist$fit_id))
stop("summary_factorlist function must include fit_id=TRUE")
}
if (is.null(factorlist)) {
factorlist = summary_factorlist(.data, dependent, explanatory,
fit_id = TRUE)
}
if (remove_ref) {
factorlist = factorlist %>% dplyr::mutate(label = ifelse(label ==
"", NA, label)) %>% tidyr::fill(label) %>% dplyr::group_by(label) %>%
dplyr::filter(dplyr::row_number() != 1 | dplyr::n() >
2 | levels %in% c("Mean (SD)", "Median (IQR)")) %>%
rm_duplicate_labels()
}
if (is.null(breaks)) {
breaks = scales::pretty_breaks()
}
factorlist$Total = as.numeric(stringr::str_extract(as.character(factorlist$all),
"^[:digit:]*"))
factorlist$Total[factorlist$levels == "Mean (SD)" | factorlist$levels ==
"Median (IQR)"] = dim(.data)[1]
drop = grepl("Mean \\(SD\\)|Median \\(IQR\\)", factorlist$levels)
factorlist$levels[drop] = "-"
factorlist$all = NULL
if (is.null(coxfit)) {
coxfit = coxphmulti(.data, dependent, explanatory)
}
coxfit_df_c = fit2df(coxfit, condense = TRUE, estimate_suffix = " (multivariable)",
estimate_name = "HR", exp = TRUE, ...)
coxfit_df = fit2df(coxfit, condense = FALSE, estimate_name = "HR",
exp = TRUE, ...)
df.out = finalfit_merge(factorlist, coxfit_df_c)
df.out = finalfit_merge(df.out, coxfit_df, ref_symbol = "1.0")
if (any(is.na(df.out$label))) {
remove_rows = which(is.na(df.out$label))
df.out = df.out[-remove_rows, ]
}
else {
df.out
}
df.out$levels = as.character(df.out$levels)
df.out$fit_id = factor(df.out$fit_id, levels = df.out$fit_id[order(-df.out$index)])
df.out = df.out %>%
rowwise() %>%
mutate(dependent_var = str_replace(fit_id, levels, "")) %>%
ungroup() %>%
filter(dependent_var %in% plot_vars | row_number() == 1) %>%
select(-dependent_var)
g1 = ggplot(df.out, aes(x = as.numeric(HR), xmin = as.numeric(L95),
xmax = as.numeric(U95), y = fit_id)) + geom_point(aes(size = Total),
shape = 22, fill = "darkblue") + geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 1, linetype = "longdash", colour = "black") +
scale_x_continuous(trans = "log10", breaks = breaks) +
xlab("Hazard ratio (95% CI, log scale)") + theme_classic(14) +
theme(axis.title.x = element_text(), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.line.y = element_blank(),
axis.ticks.y = element_blank(), legend.position = "none")
t1 = ggplot(df.out, aes(x = as.numeric(HR), y = fit_id)) +
annotate("text", x = column_space[1], y = df.out$fit_id,
label = df.out$label, hjust = 0, size = table_text_size)+
annotate("text", x = column_space[2], y = df.out$fit_id,
label = df.out$levels, hjust = 1, size = table_text_size) +
annotate("text", x = column_space[3], y = df.out$fit_id,
label = df.out$`HR (multivariable)`, hjust = 1, size = table_text_size) +
theme_classic(14) + theme(axis.title.x = element_text(colour = "white"),
axis.text.x = element_text(colour = "white"), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
line = element_blank())
g1 = g1 + plot_opts
t1 = t1 + table_opts
title = plot_title(.data = .data, dependent = dependent,
dependent_label = dependent_label, prefix = prefix,
suffix = suffix)
gridExtra::grid.arrange(t1, g1, ncol = 2, widths = c(3,
2), top = grid::textGrob(title, x = 0.02, y = 0.2, gp = grid::gpar(fontsize = title_text_size),
just = "left"))
}
colon_s %>%
hr_plot2(dependent, explanatory, plot_vars = "sex.factor", dependent_label = "Survival")
library(finalfit)
library(tidyverse)
data(colon_s)
explanatory = c("sex.factor", "obstruct.factor", "perfor.factor")
dependent = "Surv(time, status)"
hr_plot2 = function (.data, dependent, explanatory, plot_vars = NULL, factorlist = NULL,
coxfit = NULL, remove_ref = FALSE, breaks = NULL, column_space = c(-0.5,
0, 0.5), dependent_label = "Survival", prefix = "",
suffix = ": HR (95% CI, p-value)", table_text_size = 5,
title_text_size = 18, plot_opts = NULL, table_opts = NULL,
...)
{
requireNamespace("ggplot2")
if (!is.null(factorlist)) {
if (is.null(factorlist$fit_id))
stop("summary_factorlist function must include fit_id=TRUE")
}
if (is.null(factorlist)) {
factorlist = summary_factorlist(.data, dependent, explanatory,
fit_id = TRUE)
}
if (remove_ref) {
factorlist = factorlist %>% dplyr::mutate(label = ifelse(label ==
"", NA, label)) %>% tidyr::fill(label) %>% dplyr::group_by(label) %>%
dplyr::filter(dplyr::row_number() != 1 | dplyr::n() >
2 | levels %in% c("Mean (SD)", "Median (IQR)")) %>%
rm_duplicate_labels()
}
if (is.null(breaks)) {
breaks = scales::pretty_breaks()
}
factorlist$Total = as.numeric(stringr::str_extract(as.character(factorlist$all),
"^[:digit:]*"))
factorlist$Total[factorlist$levels == "Mean (SD)" | factorlist$levels ==
"Median (IQR)"] = dim(.data)[1]
drop = grepl("Mean \\(SD\\)|Median \\(IQR\\)", factorlist$levels)
factorlist$levels[drop] = "-"
factorlist$all = NULL
if (is.null(coxfit)) {
coxfit = coxphmulti(.data, dependent, explanatory)
}
coxfit_df_c = fit2df(coxfit, condense = TRUE, estimate_suffix = " (multivariable)",
estimate_name = "HR", exp = TRUE, ...)
coxfit_df = fit2df(coxfit, condense = FALSE, estimate_name = "HR",
exp = TRUE, ...)
df.out = finalfit_merge(factorlist, coxfit_df_c)
df.out = finalfit_merge(df.out, coxfit_df, ref_symbol = "1.0")
if (any(is.na(df.out$label))) {
remove_rows = which(is.na(df.out$label))
df.out = df.out[-remove_rows, ]
}
else {
df.out
}
df.out$levels = as.character(df.out$levels)
df.out$fit_id = factor(df.out$fit_id, levels = df.out$fit_id[order(-df.out$index)])
df.out = df.out %>%
rowwise() %>%
mutate(dependent_var = str_replace(fit_id, levels, "")) %>%
ungroup() %>%
filter(dependent_var %in% plot_vars | row_number() == 1) %>%
select(-dependent_var)
g1 = ggplot(df.out, aes(x = as.numeric(HR), xmin = as.numeric(L95),
xmax = as.numeric(U95), y = fit_id)) + geom_point(aes(size = Total),
shape = 22, fill = "darkblue") + geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 1, linetype = "longdash", colour = "black") +
scale_x_continuous(trans = "log10", breaks = breaks) +
xlab("Hazard ratio (95% CI, log scale)") + theme_classic(14) +
theme(axis.title.x = element_text(), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.line.y = element_blank(),
axis.ticks.y = element_blank(), legend.position = "none")
t1 = ggplot(df.out, aes(x = as.numeric(HR), y = fit_id)) +
annotate("text", x = column_space[1], y = df.out$fit_id,
label = df.out$label, hjust = 0, size = table_text_size)+
annotate("text", x = column_space[2], y = df.out$fit_id,
label = df.out$levels, hjust = 1, size = table_text_size) +
annotate("text", x = column_space[3], y = df.out$fit_id,
label = df.out$`HR (multivariable)`, hjust = 1, size = table_text_size) +
theme_classic(14) + theme(axis.title.x = element_text(colour = "white"),
axis.text.x = element_text(colour = "white"), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
line = element_blank())
g1 = g1 + plot_opts
t1 = t1 + table_opts
title = plot_title(.data = .data, dependent = dependent,
dependent_label = dependent_label, prefix = prefix,
suffix = suffix)
gridExtra::grid.arrange(t1, g1, ncol = 2, widths = c(3,
2), top = grid::textGrob(title, x = 0.02, y = 0.2, gp = grid::gpar(fontsize = title_text_size),
just = "left"))
}
colon_s %>%
hr_plot2(dependent, explanatory,
plot_vars = c("sex.factor", "obstruct.factor"),
dependent_label = "Survival")
"\\+"
library(finalfit)
library(tidyverse)
data(colon_s)
explanatory = c("age.factor", "sex.factor", "obstruct.factor", "perfor.factor")
dependent = "Surv(time, status)"
hr_plot2 = function (.data, dependent, explanatory, plot_vars = NULL, factorlist = NULL,
coxfit = NULL, remove_ref = FALSE, breaks = NULL, column_space = c(-0.5,
0, 0.5), dependent_label = "Survival", prefix = "",
suffix = ": HR (95% CI, p-value)", table_text_size = 5,
title_text_size = 18, plot_opts = NULL, table_opts = NULL,
...)
{
requireNamespace("ggplot2")
if (!is.null(factorlist)) {
if (is.null(factorlist$fit_id))
stop("summary_factorlist function must include fit_id=TRUE")
}
if (is.null(factorlist)) {
factorlist = summary_factorlist(.data, dependent, explanatory,
fit_id = TRUE)
}
if (remove_ref) {
factorlist = factorlist %>% dplyr::mutate(label = ifelse(label ==
"", NA, label)) %>% tidyr::fill(label) %>% dplyr::group_by(label) %>%
dplyr::filter(dplyr::row_number() != 1 | dplyr::n() >
2 | levels %in% c("Mean (SD)", "Median (IQR)")) %>%
rm_duplicate_labels()
}
if (is.null(breaks)) {
breaks = scales::pretty_breaks()
}
factorlist$Total = as.numeric(stringr::str_extract(as.character(factorlist$all),
"^[:digit:]*"))
factorlist$Total[factorlist$levels == "Mean (SD)" | factorlist$levels ==
"Median (IQR)"] = dim(.data)[1]
drop = grepl("Mean \\(SD\\)|Median \\(IQR\\)", factorlist$levels)
factorlist$levels[drop] = "-"
factorlist$all = NULL
if (is.null(coxfit)) {
coxfit = coxphmulti(.data, dependent, explanatory)
}
coxfit_df_c = fit2df(coxfit, condense = TRUE, estimate_suffix = " (multivariable)",
estimate_name = "HR", exp = TRUE, ...)
coxfit_df = fit2df(coxfit, condense = FALSE, estimate_name = "HR",
exp = TRUE, ...)
df.out = finalfit_merge(factorlist, coxfit_df_c)
df.out = finalfit_merge(df.out, coxfit_df, ref_symbol = "1.0")
if (any(is.na(df.out$label))) {
remove_rows = which(is.na(df.out$label))
df.out = df.out[-remove_rows, ]
}
else {
df.out
}
df.out$levels = as.character(df.out$levels)
df.out$fit_id = factor(df.out$fit_id, levels = df.out$fit_id[order(-df.out$index)])
df.out = df.out %>%
rowwise() %>%
mutate(dependent_var = str_replace(fit_id, levels, "")) %>%
ungroup() %>%
filter(dependent_var %in% plot_vars | row_number() == 1) %>%
select(-dependent_var)
g1 = ggplot(df.out, aes(x = as.numeric(HR), xmin = as.numeric(L95),
xmax = as.numeric(U95), y = fit_id)) + geom_point(aes(size = Total),
shape = 22, fill = "darkblue") + geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 1, linetype = "longdash", colour = "black") +
scale_x_continuous(trans = "log10", breaks = breaks) +
xlab("Hazard ratio (95% CI, log scale)") + theme_classic(14) +
theme(axis.title.x = element_text(), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.line.y = element_blank(),
axis.ticks.y = element_blank(), legend.position = "none")
t1 = ggplot(df.out, aes(x = as.numeric(HR), y = fit_id)) +
annotate("text", x = column_space[1], y = df.out$fit_id,
label = df.out$label, hjust = 0, size = table_text_size)+
annotate("text", x = column_space[2], y = df.out$fit_id,
label = df.out$levels, hjust = 1, size = table_text_size) +
annotate("text", x = column_space[3], y = df.out$fit_id,
label = df.out$`HR (multivariable)`, hjust = 1, size = table_text_size) +
theme_classic(14) + theme(axis.title.x = element_text(colour = "white"),
axis.text.x = element_text(colour = "white"), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
line = element_blank())
g1 = g1 + plot_opts
t1 = t1 + table_opts
title = plot_title(.data = .data, dependent = dependent,
dependent_label = dependent_label, prefix = prefix,
suffix = suffix)
gridExtra::grid.arrange(t1, g1, ncol = 2, widths = c(3,
2), top = grid::textGrob(title, x = 0.02, y = 0.2, gp = grid::gpar(fontsize = title_text_size),
just = "left"))
}
colon_s %>%
hr_plot2(dependent, explanatory,
plot_vars = c("sex.factor", "obstruct.factor"),
dependent_label = "Survival")
View(factorlist)
str_replace("age.factor60+ years", "60+ years", "")
gsub("60+ years", "", "age.factor60+ years")
View(df.out)
?starts_with()
colon_s %>%
hr_plot(dependent, explanatory_long)
library(finalfit)
library(tidyverse)
data(colon_s)
explanatory_long = c("age.factor", "sex.factor", "obstruct.factor", "perfor.factor")
explanatory_plot = c("obstruct.factor", "perfor.factor")
dependent = "Surv(time, status)"
factorlist = colon_s %>%
summary_factorlist(.data, dependent, explanatory_plot, fit_id = TRUE)
coxfit = colon_s %>%
coxphmulti(dependent, explanatory_long)
colon_s %>%
hr_plot(dependent, explanatory_long)
library(finalfit)
library(tidyverse)
data(colon_s)
explanatory_long = c("age.factor", "sex.factor", "obstruct.factor", "perfor.factor")
explanatory_plot = c("obstruct.factor", "perfor.factor")
dependent = "Surv(time, status)"
factorlist = colon_s %>%
summary_factorlist(.data, dependent, explanatory_plot, fit_id = TRUE)
coxfit = colon_s %>%
coxphmulti(dependent, explanatory_long)
colon_s %>%
hr_plot(dependent, explanatory_long)
colon_s %>%
hr_plot(dependent, explanatory_plot,
coxfit = coxfit,
factorlist = factorlist)
colon_s %>%
hr_plot(dependent, explanatory_plot,
coxfit = coxfit,
factorlist = factorlist)
factorlist
explanatory_plot
factorlist = colon_s %>%
summary_factorlist(dependent, explanatory_plot, fit_id = TRUE)
factorlist
colon_s %>%
hr_plot(dependent, explanatory_plot,
coxfit = coxfit,
factorlist = factorlist)
colon_s %>%
hr_plot(dependent, explanatory_long)
colon_s %>%
hr_plot(dependent, explanatory_plot,
coxfit = coxfit,
factorlist = factorlist)
colon_s %>%
hr_plot(dependent, explanatory_plot,
factorlist = factorlist)
colon_s %>%
hr_plot(dependent, explanatory_plot,
coxfit = coxfit,
factorlist = factorlist)
colon_s %>%
hr_plot(dependent, explanatory_long)
# Feed to factorlist and coxfit to hr_plot
colon_s %>%
hr_plot(dependent, explanatory_long,
coxfit = coxfit,
factorlist = factorlist)
