data_inclusion = data_inclusion %>%
bind_rows(data_inclusion %>%
filter(covid_status == "Negative (will test Positive)") %>%
mutate(covid_status = "Positive (prior Negative)")
) %>%
mutate(
result = case_when(
covid_status == "Positive" ~ "Positive",
covid_status == "Negative" ~ "Negative",
covid_status == "Negative (will test Positive)" ~ "Negative",
covid_status == "Positive (prior Negative)" ~ "Positive",
covid_status == "Untested" ~ "Untested",
TRUE ~ "Error"
))
# Only consider test data within testing period ----
data_testing_tp = data_testing %>%
filter(test_date >= tp_start_date,
test_date < tp_end_date)
# Filter out nosocomial covid and descrepant covid test results ----
data_patient = data_patient %>%
filter(covid_nosocomial == "No", covid_discrepant_test == "No")
data_testing_tp = data_testing_tp %>%
filter(patient_id %in% data_patient$patient_id)
## Include only 1st positive or negatives before 1st positive ----
data_testing_tp = data_testing_tp %>%
left_join(
data_testing_tp %>%
group_by(patient_id, result) %>%
filter(result == "Positive" & row_number() == 1) %>%
ungroup() %>%
select(patient_id, test_date_1st_pos_tp = test_date) ,
by = "patient_id"
) %>%
filter((result == "Positive" & test_date == test_date_1st_pos_tp) |
(result == "Negative" & is.na(test_date_1st_pos_tp)) |
(result == "Negative" & (test_date < test_date_1st_pos_tp))
)
## Append covid_status to dataset ----
data_testing_tp = data_testing_tp %>%
left_join(
data_inclusion %>%
select(patient_id, covid_status, result),
by = c("patient_id", "result")
)
## Calculate age on test date ----
data_testing_tp = data_testing_tp %>%
left_join(
data_patient %>%
select(patient_id, date_of_birth),
by = "patient_id"
) %>%
mutate(
age_test_date = time_length(difftime(test_date, date_of_birth), "years")
) %>%
filter(age_test_date >= 4, age_test_date < 18)
### Log number of patients satisfying age criteria ----
data_inclusion = data_inclusion %>%
left_join(data_testing_tp %>%
mutate(age_criteria_test_date = TRUE) %>%
select(patient_id, age_criteria_test_date, covid_status),
by = c("patient_id", "covid_status"))
library(tidyverse)
library(lubridate)
library(MatchIt)
library(finalfit)
# Load custom functions and lookup tables ----
source(here::here("analysis", "00_utility_functions.R"))
source(here::here("analysis", "00_lookup_tables.R"))
# Output directories ----
dir.create(here::here("output", "descriptives", "healthcare_use_2019_2022"), showWarnings = FALSE, recursive=TRUE)
# Plot theme ----
theme_set(theme_bw())
# Load global variables ----
global_var = jsonlite::read_json(path = here::here("analysis", "global_variables.json"))
# Disclosure control parameters ----
count_round = global_var$disclosure_count_round
# Study dates ----
study_start_date = ymd(global_var$start_date)
study_end_date   = ymd(global_var$end_date)
tp_start_date    = ymd(global_var$tp_start_date)
tp_end_date      = ymd(global_var$tp_end_date)
fup_start_date   = ymd(global_var$fup_start_date)
# Load datasets ----
data_patient = read_rds(here::here("output", "data", "data_patient.rds"))
data_testing = read_rds(here::here("output", "data", "data_testing.rds"))
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp = read_rds(here::here("output", "data", "data_gp.rds"))
# Define groups ----
data_inclusion = data_patient %>%
transmute(
patient_id,
covid_status = case_when(
is.na(covid_test_date_neg_tp) & !is.na(covid_test_date_pos_tp) ~ "Positive",
is.na(covid_test_date_pos_tp) & !is.na(covid_test_date_neg_tp) ~ "Negative",
covid_test_date_pos_tp < covid_test_date_neg_tp ~ "Positive",
covid_test_date_neg_tp < covid_test_date_pos_tp ~ "Negative (will test Positive)",
is.na(covid_test_date_neg_tp) & is.na(covid_test_date_pos_tp) ~ "Untested",
TRUE ~ "Error"
),
not_nosocomial = covid_nosocomial == "No",
no_discrepant_results = covid_discrepant_test == "No"
)
# Create duplicate rows for patients testing positive after negative ----
data_inclusion = data_inclusion %>%
bind_rows(data_inclusion %>%
filter(covid_status == "Negative (will test Positive)") %>%
mutate(covid_status = "Positive (prior Negative)")
) %>%
mutate(
result = case_when(
covid_status == "Positive" ~ "Positive",
covid_status == "Negative" ~ "Negative",
covid_status == "Negative (will test Positive)" ~ "Negative",
covid_status == "Positive (prior Negative)" ~ "Positive",
covid_status == "Untested" ~ "Untested",
TRUE ~ "Error"
))
# Only consider test data within testing period ----
data_testing_tp = data_testing %>%
filter(test_date >= tp_start_date,
test_date < tp_end_date)
# Filter out nosocomial covid and descrepant covid test results ----
data_patient = data_patient %>%
filter(covid_nosocomial == "No", covid_discrepant_test == "No")
data_testing_tp = data_testing_tp %>%
filter(patient_id %in% data_patient$patient_id)
## Include only 1st positive or negatives before 1st positive ----
data_testing_tp = data_testing_tp %>%
left_join(
data_testing_tp %>%
group_by(patient_id, result) %>%
filter(result == "Positive" & row_number() == 1) %>%
ungroup() %>%
select(patient_id, test_date_1st_pos_tp = test_date) ,
by = "patient_id"
) %>%
filter((result == "Positive" & test_date == test_date_1st_pos_tp) |
(result == "Negative" & is.na(test_date_1st_pos_tp)) |
(result == "Negative" & (test_date < test_date_1st_pos_tp))
)
## Append covid_status to dataset ----
data_testing_tp = data_testing_tp %>%
left_join(
data_inclusion %>%
select(patient_id, covid_status, result),
by = c("patient_id", "result")
)
## Calculate age on test date ----
data_testing_tp = data_testing_tp %>%
left_join(
data_patient %>%
select(patient_id, date_of_birth),
by = "patient_id"
) %>%
mutate(
age_test_date = time_length(difftime(test_date, date_of_birth), "years")
) %>%
filter(age_test_date >= 4, age_test_date < 18)
### Log number of patients satisfying age criteria ----
data_inclusion = data_inclusion %>%
left_join(data_testing_tp %>%
group_by(patient_id) %>%
slice(1) %>%
ungroup() %>%
mutate(age_criteria_test_date = TRUE) %>%
select(patient_id, age_criteria_test_date, covid_status),
by = c("patient_id", "covid_status"))
## Make results factor, remove columns ----
data_testing_tp = data_testing_tp %>%
mutate(result = result %>%
factor() %>%
fct_relevel("Negative", "Positive")) %>%
select(patient_id, result, covid_status, test_date)
# Match positives with negatvies ----
## Matching set up ----
match_ratio = 10
## Perform matching ----
match_pos_neg = matchit(result ~ test_date,
data = data_testing_tp,
exact = ~ test_date,
ratio = match_ratio,
replace = FALSE) %>%
match.data() %>%
rename(match_id = subclass)
## Filter out incomplete sets ----
match_pos_neg = match_pos_neg %>%
arrange(match_id, desc(result)) %>%
group_by(match_id) %>%
mutate(n_match = n()) %>%
ungroup() %>%
filter(n_match == match_ratio + 1)
# Match positive cases with untested ----
## Create dataset of untested ----
data_untested = data_inclusion %>%
filter(result == "Untested") %>%
select(patient_id, result, covid_status) %>%
left_join(
data_patient %>%
select(patient_id, date_of_birth, death_date),
by = "patient_id"
) %>%
mutate(test_date = sample(
match_pos_neg %>%
filter(result == "Positive") %>%
pull(test_date),
size = n(),
replace = TRUE))
## Filter out dead patients on matched test date ----
data_untested = data_untested %>%
filter(test_date < death_date | is.na(death_date))
### Log number of patients alive on matched test date ----
data_inclusion = data_inclusion %>%
left_join(data_untested %>%
mutate(alive_matched_date = TRUE) %>%
select(patient_id, alive_matched_date),
by = "patient_id")
## Filter out patients not aged 4-17 ----
### Calculate age on matched test date ----
data_untested = data_untested %>%
mutate(
age_test_date = time_length(difftime(test_date, date_of_birth), "years")
) %>%
filter(age_test_date >= 4, age_test_date < 18)
### Log number of patients satisfying age criteria ----
data_inclusion = data_inclusion %>%
left_join(data_untested %>%
mutate(age_criteria_matched_date = TRUE) %>%
select(patient_id, age_criteria_matched_date),
by = "patient_id")
## Bind dataset of untested with positive ----
data_untested = data_untested %>%
bind_rows(
match_pos_neg %>%
filter(result == "Positive") %>%
select(patient_id, result, test_date, match_id)
) %>%
mutate(
result = result %>%
factor() %>%
fct_relevel("Untested", "Positive")
)
## Perform matching, fill in match_id ----
match_pos_untested = matchit(result ~ test_date,
data = data_untested,
exact = ~ test_date,
ratio = match_ratio,
replace = FALSE) %>%
match.data() %>%
group_by(subclass) %>%
fill(match_id, .direction = "downup") %>%
ungroup()
# Combine the two matches (pos-neg, pos-untested) ----
matched_cohort = match_pos_neg %>%
bind_rows(match_pos_untested %>%
filter(!result == "Positive")) %>%
select(match_id, patient_id, result, covid_status, test_date) %>%
arrange(match_id, result) %>%
group_by(match_id) %>%
mutate(n_matches = n())
# Filter out incomplete match sets ----
matched_cohort = matched_cohort %>%
filter(n_matches == (match_ratio*2 +1))
## Log sucessful matches ----
data_inclusion = data_inclusion %>%
left_join(
matched_cohort %>%
transmute(
patient_id, covid_status, matched = TRUE
),
by = c("patient_id", "covid_status")
)
library(tidyverse)
library(lubridate)
library(MatchIt)
library(finalfit)
# Load custom functions and lookup tables ----
source(here::here("analysis", "00_utility_functions.R"))
source(here::here("analysis", "00_lookup_tables.R"))
# Output directories ----
dir.create(here::here("output", "descriptives", "healthcare_use_2019_2022"), showWarnings = FALSE, recursive=TRUE)
# Plot theme ----
theme_set(theme_bw())
# Load global variables ----
global_var = jsonlite::read_json(path = here::here("analysis", "global_variables.json"))
# Disclosure control parameters ----
count_round = global_var$disclosure_count_round
# Study dates ----
study_start_date = ymd(global_var$start_date)
study_end_date   = ymd(global_var$end_date)
tp_start_date    = ymd(global_var$tp_start_date)
tp_end_date      = ymd(global_var$tp_end_date)
fup_start_date   = ymd(global_var$fup_start_date)
# Load datasets ----
data_patient = read_rds(here::here("output", "data", "data_patient.rds"))
data_testing = read_rds(here::here("output", "data", "data_testing.rds"))
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp = read_rds(here::here("output", "data", "data_gp.rds"))
# Define groups ----
data_inclusion = data_patient %>%
transmute(
patient_id,
covid_status = case_when(
is.na(covid_test_date_neg_tp) & !is.na(covid_test_date_pos_tp) ~ "Positive",
is.na(covid_test_date_pos_tp) & !is.na(covid_test_date_neg_tp) ~ "Negative",
covid_test_date_pos_tp < covid_test_date_neg_tp ~ "Positive",
covid_test_date_neg_tp < covid_test_date_pos_tp ~ "Negative (will test Positive)",
is.na(covid_test_date_neg_tp) & is.na(covid_test_date_pos_tp) ~ "Untested",
TRUE ~ "Error"
),
not_nosocomial = covid_nosocomial == "No",
no_discrepant_results = covid_discrepant_test == "No"
)
# Create duplicate rows for patients testing positive after negative ----
data_inclusion = data_inclusion %>%
bind_rows(data_inclusion %>%
filter(covid_status == "Negative (will test Positive)") %>%
mutate(covid_status = "Positive (prior Negative)")
) %>%
mutate(
result = case_when(
covid_status == "Positive" ~ "Positive",
covid_status == "Negative" ~ "Negative",
covid_status == "Negative (will test Positive)" ~ "Negative",
covid_status == "Positive (prior Negative)" ~ "Positive",
covid_status == "Untested" ~ "Untested",
TRUE ~ "Error"
))
# Only consider test data within testing period ----
data_testing_tp = data_testing %>%
filter(test_date >= tp_start_date,
test_date < tp_end_date)
# Filter out nosocomial covid and descrepant covid test results ----
data_patient = data_patient %>%
filter(covid_nosocomial == "No", covid_discrepant_test == "No")
data_testing_tp = data_testing_tp %>%
filter(patient_id %in% data_patient$patient_id)
## Include only 1st positive or negatives before 1st positive ----
data_testing_tp = data_testing_tp %>%
left_join(
data_testing_tp %>%
group_by(patient_id, result) %>%
filter(result == "Positive" & row_number() == 1) %>%
ungroup() %>%
select(patient_id, test_date_1st_pos_tp = test_date) ,
by = "patient_id"
) %>%
filter((result == "Positive" & test_date == test_date_1st_pos_tp) |
(result == "Negative" & is.na(test_date_1st_pos_tp)) |
(result == "Negative" & (test_date < test_date_1st_pos_tp))
)
## Append covid_status to dataset ----
data_testing_tp = data_testing_tp %>%
left_join(
data_inclusion %>%
select(patient_id, covid_status, result),
by = c("patient_id", "result")
)
## Calculate age on test date ----
data_testing_tp = data_testing_tp %>%
left_join(
data_patient %>%
select(patient_id, date_of_birth),
by = "patient_id"
) %>%
mutate(
age_test_date = time_length(difftime(test_date, date_of_birth), "years")
) %>%
filter(age_test_date >= 4, age_test_date < 18)
### Log number of patients satisfying age criteria ----
data_inclusion = data_inclusion %>%
left_join(data_testing_tp %>%
group_by(patient_id) %>%
slice(1) %>%
ungroup() %>%
mutate(age_criteria_test_date = TRUE) %>%
select(patient_id, age_criteria_test_date, covid_status),
by = c("patient_id", "covid_status"))
## Make results factor, remove columns ----
data_testing_tp = data_testing_tp %>%
mutate(result = result %>%
factor() %>%
fct_relevel("Negative", "Positive")) %>%
select(patient_id, result, covid_status, test_date)
# Match positives with negatvies ----
## Matching set up ----
match_ratio = 10
## Perform matching ----
match_pos_neg = matchit(result ~ test_date,
data = data_testing_tp,
exact = ~ test_date,
ratio = match_ratio,
replace = FALSE) %>%
match.data() %>%
rename(match_id = subclass)
## Filter out incomplete sets ----
match_pos_neg = match_pos_neg %>%
arrange(match_id, desc(result)) %>%
group_by(match_id) %>%
mutate(n_match = n()) %>%
ungroup() %>%
filter(n_match == match_ratio + 1)
# Match positive cases with untested ----
## Create dataset of untested ----
data_untested = data_inclusion %>%
filter(result == "Untested") %>%
select(patient_id, result, covid_status) %>%
left_join(
data_patient %>%
select(patient_id, date_of_birth, death_date),
by = "patient_id"
) %>%
mutate(test_date = sample(
match_pos_neg %>%
filter(result == "Positive") %>%
pull(test_date),
size = n(),
replace = TRUE))
## Filter out dead patients on matched test date ----
data_untested = data_untested %>%
filter(test_date < death_date | is.na(death_date))
### Log number of patients alive on matched test date ----
data_inclusion = data_inclusion %>%
left_join(data_untested %>%
mutate(alive_matched_date = TRUE) %>%
select(patient_id, alive_matched_date),
by = "patient_id")
## Filter out patients not aged 4-17 ----
### Calculate age on matched test date ----
data_untested = data_untested %>%
mutate(
age_test_date = time_length(difftime(test_date, date_of_birth), "years")
) %>%
filter(age_test_date >= 4, age_test_date < 18)
### Log number of patients satisfying age criteria ----
data_inclusion = data_inclusion %>%
left_join(data_untested %>%
mutate(age_criteria_matched_date = TRUE) %>%
select(patient_id, age_criteria_matched_date),
by = "patient_id")
## Bind dataset of untested with positive ----
data_untested = data_untested %>%
bind_rows(
match_pos_neg %>%
filter(result == "Positive") %>%
select(patient_id, result, test_date, match_id)
) %>%
mutate(
result = result %>%
factor() %>%
fct_relevel("Untested", "Positive")
)
## Perform matching, fill in match_id ----
match_pos_untested = matchit(result ~ test_date,
data = data_untested,
exact = ~ test_date,
ratio = match_ratio,
replace = FALSE) %>%
match.data() %>%
group_by(subclass) %>%
fill(match_id, .direction = "downup") %>%
ungroup()
# Combine the two matches (pos-neg, pos-untested) ----
matched_cohort = match_pos_neg %>%
bind_rows(match_pos_untested %>%
filter(!result == "Positive")) %>%
select(match_id, patient_id, result, covid_status, test_date) %>%
arrange(match_id, result) %>%
group_by(match_id) %>%
mutate(n_matches = n())
# Filter out incomplete match sets ----
matched_cohort = matched_cohort %>%
filter(n_matches == (match_ratio*2 +1))
data_inclusion %>% count(covid_status)
matched_cohort %>% count(covid_status)
# Combine the two matches (pos-neg, pos-untested) ----
matched_cohort = match_pos_neg %>%
bind_rows(match_pos_untested %>%
filter(!result == "Positive")) %>%
select(match_id, patient_id, result, covid_status, test_date) %>%
arrange(match_id, result) %>%
group_by(match_id) %>%
mutate(n_matches = n()) %>%
ungroup()
# Filter out incomplete match sets ----
matched_cohort = matched_cohort %>%
filter(n_matches == (match_ratio*2 +1))
matched_cohort %>% count(covid_status)
data_inclusion %>% count(covid_status)
## Log sucessful matches ----
x = data_inclusion %>%
left_join(
matched_cohort %>%
transmute(
patient_id, covid_status, matched = TRUE
),
by = c("patient_id", "covid_status")
)
View(x)
## Log sucessful matches ----
x = data_inclusion %>%
left_join(
matched_cohort %>%
transmute(
patient_id, covid_status, matched = TRUE
) %>%
group_by(patient_id, covid_status) %>%
slice(1) %>%
ungroup(),
by = c("patient_id", "covid_status")
)
