# This script takes the allocated clusters determined by time series clustering
# and calculates patient summary tables and resource-use summaries stratified by
# cluster.
# Load packages ----
library(tidyverse)
library(finalfit)
# Command arguments to set number of clusters ----
args = commandArgs(trailingOnly=TRUE)
if(length(args) == 0){
n_clusters = 8 # will hard code n_clusters = 3 to 8 in .yaml
} else{
n_clusters = args[[1]]
}
# Load custom functions ----
source(here::here("analysis", "00_utility_functions.R"))
# Load global variables ----
global_var = jsonlite::read_json(path = here::here("analysis", "global_variables.json"))
# Disclosure control parameters ----
count_round  = global_var$disclosure_count_round
count_redact = global_var$disclosure_redact
# Create output directories ----
dir.create(here::here("output", "dtw", "results"), showWarnings = FALSE, recursive=TRUE)
# Bootstrap samples
B = 10
# Load data ----
data_resource_dtw  = read_rds(here::here("output", "data", "data_resource_dtw.rds"))
data_positives_dtw = read_rds(here::here("output", "data", "data_positives_dtw.rds"))
data_cluster   = read_rds(
here::here("output", "dtw", "data_cluster",
paste0("data_cluster_", n_clusters, ".rds")))
# Add clustering assignment to patient and resource data ----
data_resource_dtw = data_resource_dtw %>%
left_join(data_cluster, by = "patient_id") %>%
replace_na(list(cluster = 0)) %>%
mutate(cluster = cluster %>%
factor() %>%
ff_label("Cluster"))
data_positives_dtw = data_positives_dtw %>%
left_join(data_cluster, by = "patient_id")  %>%
replace_na(list(cluster = 0)) %>%
mutate(cluster = cluster %>%
factor() %>%
ff_label("Cluster"))
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
group_by(date_indexed, cluster) %>%
summarise(
n_patient = n(),
critical_care = list(Hmisc::smean.cl.boot(n_critical_care,
conf.int = 0.95,
B = B)),
beddays = list(Hmisc::smean.cl.boot(n_beddays,
conf.int = 0.95,
B = B)),
outpatient = list(Hmisc::smean.cl.boot(n_outpatient,
conf.int = 0.95,
B = B)),
gp = list(Hmisc::smean.cl.boot(n_gp,
conf.int = 0.95,
B = B)),
)
## Tidy up table and resource factor levels ----
tbl_resource_use_cluster = tbl_resource_use_cluster %>%
unnest_wider(c(critical_care, beddays, outpatient, gp),
names_sep = "_") %>%
pivot_longer(-c(date_indexed, n_patient, cluster),
names_to = c("resource_type", "statistic"),
names_pattern = "(.*)_([[:alpha:]]+)$") %>%
pivot_wider(names_from = statistic, values_from = value) %>%
mutate(resource_type = resource_type %>%
fct_relevel("gp", "outpatient", "beddays", "critical_care") %>%
fct_recode("Healthcare episode" = "gp",
"Outpatient appointment" = "outpatient",
"Inpatient admission" = "beddays",
"Critical care" = "critical_care"))
tbl_resource_use_cluster
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
group_by(date_indexed, cluster) %>%
summarise(
n_patient = n(),
critical_care = list(Hmisc::smean.cl.boot(n_critical_care,
conf.int = 0.95,
B = B)),
beddays = list(Hmisc::smean.cl.boot(n_beddays,
conf.int = 0.95,
B = B)),
outpatient = list(Hmisc::smean.cl.boot(n_outpatient,
conf.int = 0.95,
B = B)),
gp = list(Hmisc::smean.cl.boot(n_gp,
conf.int = 0.95,
B = B)),
)
tbl_resource_use_cluster
data_resource_dtw
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = starts_with("n_"))
tbl_resource_use_cluster
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = starts_with("n_"),
names_pattern = "n_(*)", names_to = "resource_type")
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = starts_with("n_"),
names_pattern = "n_([[:alnum:]+])", names_to = "resource_type")
tbl_resource_use_cluster
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = starts_with("n_"),
names_pattern = "n_([[:alnum:]_]+)", names_to = "resource_type")
tbl_resource_use_cluster
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = starts_with("n_"),
names_pattern = "n_([[:alnum:]_]+)", names_to = "resource_type") %>%
group_by(day_followup, cluster, service) %>%
summarise(
n_patient = n(),
bootstats = list(Hmisc::smean.cl.boot(value, conf.int = 0.95, B = B))
)
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = starts_with("n_"),
names_pattern = "n_([[:alnum:]_]+)", names_to = "resource_type") %>%
group_by(day_followup, cluster, service) %>%
summarise(
n_patient = n(),
bootstats = list(Hmisc::smean.cl.boot(value, conf.int = 0.95, B = B))
) %>%
ungroup()
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = starts_with("n_"),
names_pattern = "n_([[:alnum:]_]+)", names_to = "resource_type") %>%
group_by(day_followup, cluster, service) %>%
summarise(
n_patient = n(),
bootstats = list(Hmisc::smean.cl.boot(value, conf.int = 0.95, B = B))
) %>%
ungroup() %>%
unnest_wider(bootstats)
tbl_resource_use_clustertbl_resource_use_cluster
tbl_resource_use_cluster
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = starts_with("n_"),
names_pattern = "n_([[:alnum:]_]+)", names_to = "resource_type")
tbl_resource_use_cluster
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = c(starts_with("n_"), service),
names_pattern = "n_([[:alnum:]_]+)", names_to = "resource_type")
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = c(starts_with("n_")),
names_pattern = "n_([[:alnum:]_]+)", names_to = "resource_type") %>%
group_by(day_followup, cluster, resource_type) %>%
summarise(
n_patient = n(),
bootstats = list(Hmisc::smean.cl.boot(value, conf.int = 0.95, B = B))
) %>%
ungroup() %>%
unnest_wider(bootstats)
tbl_resource_use_cluster
# Resource use by cluster ----
tbl_resource_use_cluster = data_resource_dtw %>%
pivot_longer(cols = c(starts_with("n_")),
names_pattern = "n_([[:alnum:]_]+)", names_to = "resource_type") %>%
group_by(day_followup, cluster, resource_type) %>%
summarise(
n_patient = n(),
bootstats = list(Hmisc::smean.cl.boot(value, conf.int = 0.95, B = B))
) %>%
ungroup() %>%
unnest_wider(bootstats) %>%
mutate(resource_type = resource_type %>%
fct_relevel("gp", "outpatient", "beddays", "critical_care") %>%
fct_recode("Healthcare episode" = "gp",
"Outpatient appointment" = "outpatient",
"Inpatient admission" = "beddays",
"Critical care" = "critical_care"))
tbl_resource_use_cluster
# Plot resource use by type and cluster ----
plot_resource_use_cluster = tbl_resource_use_cluster %>%
ggplot(aes(x = date_indexed, y = Mean, ymin = Lower, ymax = Upper)) +
geom_line() +
geom_ribbon(alpha = 0.2, linetype = 2, size = 0.25) +
facet_grid(resource_type ~ cluster, scales = "free_y") +
scale_y_continuous(limits = c(0, NA)) +
labs(x = "Follow-up period (days)", y = "Counts per person-day")
plot_resource_use_cluster
# Plot resource use by type and cluster ----
plot_resource_use_cluster = tbl_resource_use_cluster %>%
ggplot(aes(x = day_followup, y = Mean, ymin = Lower, ymax = Upper)) +
geom_line() +
geom_ribbon(alpha = 0.2, linetype = 2, size = 0.25) +
facet_grid(resource_type ~ cluster, scales = "free_y") +
scale_y_continuous(limits = c(0, NA)) +
labs(x = "Follow-up period (days)", y = "Counts per person-day")
plot_resource_use_cluster
list(a = 1, b = 2, c = 3) %>% set_names()
list(a = 1, b = 2, c = 3) %>% as_tibble()
list(a = tibble(x = 1), b = tibble(x = 2), c = tibble(x = 3)) %>% as_tibble()
list(a = tibble(x = 1), b = tibble(x = 2), c = tibble(x = 3)) %>% as_tibble_row()
list(a = tibble(x = 1), b = tibble(x = 2), c = tibble(x = 3)) %>% enframe()
list(a = tibble(x = 1), b = tibble(x = 2), c = tibble(x = 3)) %>% enframe() %>% unnest(value)
?bSpline
library(splines2)
?bSpline
# Studying the Long-term Impact of COVID-19 in Kids (SLICK)
#
# 11_DTW_prep_resource.R
# Centre for Medical Informatics, Usher Institute, University of Edinburgh 2022
# School of Informatics, University of Edinburgh 2022
# Written by: Karthik Mohan, James Farrell
#
# Load packages ----
library(tidyverse)
# Load data ----
data_resource_dtw = read_rds(here::here("output", "data", "data_resource.rds"))
data_positives_dtw = read_rds(here::here("output", "data", "data_positives.rds"))
## Create used service column ----
data_resource_dtw = data_resource_dtw %>%
mutate(
day_followup = date_indexed - 14,
service = case_when(
n_critical_care > 0 ~ "Critial care",
n_beddays > 0 ~ "Inpatient admission",
n_outpatient > 0 ~ "Outpatient appointment",
n_gp > 0 ~ "Healthcare episode",
TRUE ~ "None") %>%
factor() %>%
fct_relevel("None", "Healthcare episode",
"Outpatient appointment", "Inpatient admission",
"Critial care")
) %>%
filter(day_followup > 0)
View(data_positives_dtw)
View(data_resource_dtw)
View(data_resource_dtw)
data_positives_dtw = read_rds(here::here("output", "data", "data_positives.rds"))
## Create used service column ----
data_resource_dtw = data_resource_dtw %>%
filter(date_indexed > 14) %>%
mutate(day_followup = date_indexed - 14,
week_followup = ceiling(day_followup/7)) %>%
group_by(patient_id, week_followup) %>%
summarise(
n_critical_care = sum(n_critical_care),
n_beddays = sum(n_beddays),
n_outpatient = sum(n_outpatient),
n_gp = sum(n_gp),
days = n()
) %>%
mutate(
service = case_when(
n_critical_care > 0 ~ "Critial care",
n_beddays > 0 ~ "Inpatient admission",
n_outpatient > 0 ~ "Outpatient appointment",
n_gp > 0 ~ "Healthcare episode",
TRUE ~ "None") %>%
factor() %>%
fct_relevel("None", "Healthcare episode",
"Outpatient appointment", "Inpatient admission",
"Critial care")
) %>%
filter(days == 7)
warnings()
# Load data ----
data_resource_dtw = read_rds(here::here("output", "data", "data_resource.rds"))
View(data_resource_dtw)
## Create used service column ----
data_resource_dtw = data_resource_dtw %>%
filter(date_indexed > 14) %>%
mutate(day_followup = date_indexed - 14,
period_followup = ceiling(day_followup/7)) %>%
group_by(patient_id, period_followup) %>%
summarise(
n_critical_care = sum(n_critical_care),
n_beddays = sum(n_beddays),
n_outpatient = sum(n_outpatient),
n_gp = sum(n_gp),
days = n()
) %>%
ungroup() %>%
mutate(
service = case_when(
n_critical_care > 0 ~ "Critial care",
n_beddays > 0 ~ "Inpatient admission",
n_outpatient > 0 ~ "Outpatient appointment",
n_gp > 0 ~ "Healthcare episode",
TRUE ~ "None") %>%
factor() %>%
fct_relevel("None", "Healthcare episode",
"Outpatient appointment", "Inpatient admission",
"Critial care")
) %>%
filter(days == 7)
View(data_resource_dtw)
library(lcmm)
?gridsearch
# Studying the Long-term Impact of COVID-19 in Kids (SLICK)
#
# 12_LCMM_model.R
# Centre for Medical Informatics, Usher Institute, University of Edinburgh 2022
# School of Informatics, University of Edinburgh 2022
# Written by: Karthik Mohan, James Farrell
#
# This script clusters healthcare-use trajectories using a latent class linear
# mixed model (LCLMM) with a spline basis. The resulting model is saved to file.
# Load packages ----
library(tidyverse)
library(lcmm)
library(splines2)
library(tictoc)
# Command arguments to set number of clusters ----
args = commandArgs(trailingOnly=TRUE)
if(length(args) == 0){
ng = 1
resource_type = "beddays"
} else{
ng = args[[1]] %>% as.integer()
resource_type = args[[2]]
}
# Number cores for parallel computation
nproc = 4
# Create output directories  ----
dir_lcmm_models = here::here("output", "lcmm",resource_type, "models")
dir.create(dir_lcmm_models, showWarnings = FALSE, recursive=TRUE)
# Load resource data ----
data_resource_lcmm = read_rds(here::here("output", "data", "data_resource_lcmm.rds"))
data_resource_lcmm = data_resource_lcmm %>%
select(patient_id, followup_month, resource_use = all_of(paste0("n_", resource_type)))
# Only include patients with at least 1 episode of healthcare use ----
## Identify patient ids ----
patient_id_non_zero = data_resource_lcmm %>%
group_by(patient_id) %>%
summarise(total = sum(resource_use)) %>%
filter(total > 0) %>%
pull(patient_id)
## Filter for patinets with 1+ resource use ----
data_resource_lcmm = data_resource_lcmm %>%
filter(patient_id %in% patient_id_non_zero)
# Convert to data.frame ----
data_resource_lcmm = as.data.frame(data_resource_lcmm)
# Run LCMM model ----
## Set model parameters ----
max_iter = 5000 # Maximum number of iterations
## Run lcmm ----
if (ng == 1){
lcmm_model = hlme(fixed = resource_use ~ bSpline(followup_month, degree = 1, knots = 7),
random = ~ bSpline(followup_month, degree = 1, knots = 7),
subject = "patient_id",
ng = ng,
maxiter = max_iter,
data = data_resource_lcmm,
verbose = FALSE,
nproc = nproc)
# lcmm_model = lcmm(fixed = resource_use ~ 1 + followup_month + I(followup_month^2) + I(followup_month^3),
#                   random = ~1 + followup_month,
#                   subject = "patient_id",
#                   ng = ng,
#                   maxiter = max_iter,
#                   data = data_resource_lcmm,
#                   verbose = FALSE,
#                   link = "7-equi-splines",
#                   nproc = nproc)
} else{
# Load lcmm model with ng = 1
lcmm_model_1 = read_rds(
here::here("output", "lcmm", resource_type, "models", "lcmm_model_1.rds"))
# Run hlme ----
lcmm_model = gridsearch(
m = hlme(fixed = resource_use ~ bSpline(followup_month, degree = 1, knots = 7),
random = ~ bSpline(followup_month, degree = 1, knots = 7),
mixture = ~ bSpline(followup_month, degree = 1, knots = 7),
classmb = ~1,
ng = ng,
B = lcmm_model_1,
data = data_resource_lcmm,
subject = "patient_id",
maxiter = max_iter,
verbose = FALSE,
nproc = nproc),
rep = 20,
maxiter = 20,
minit = lcmm_model_1
)
# lcmm_model = lcmm(fixed = resource_use ~ 1 + followup_month + I(followup_month^2) + I(followup_month^3),
#                   mixture = ~1 + followup_month + I(followup_month^2) + I(followup_month^3),
#                   random = ~1 + followup_month,
#                   ng = ng,
#                   B = lcmm_model_1,
#                   data = data_resource_lcmm,
#                   subject = "patient_id",
#                   maxiter = max_iter,
#                   verbose = FALSE,
#                   link = "7-equi-splines",
#                   nproc = nproc)
}
# Save lcmm_model ----
write_rds(x = lcmm_model,
here::here("output", "lcmm", resource_type, "models",
paste0("lcmm_model_", ng, ".rds")))
# Studying the Long-term Impact of COVID-19 in Kids (SLICK)
#
# 12_LCMM_model.R
# Centre for Medical Informatics, Usher Institute, University of Edinburgh 2022
# School of Informatics, University of Edinburgh 2022
# Written by: Karthik Mohan, James Farrell
#
# This script clusters healthcare-use trajectories using a latent class linear
# mixed model (LCLMM) with a spline basis. The resulting model is saved to file.
# Load packages ----
library(tidyverse)
library(lcmm)
library(splines2)
library(tictoc)
# Command arguments to set number of clusters ----
args = commandArgs(trailingOnly=TRUE)
if(length(args) == 0){
ng = 1
resource_type = "beddays"
} else{
ng = args[[1]] %>% as.integer()
resource_type = args[[2]]
}
# Number cores for parallel computation
nproc = 4
# Create output directories  ----
dir_lcmm_models = here::here("output", "lcmm",resource_type, "models")
dir.create(dir_lcmm_models, showWarnings = FALSE, recursive=TRUE)
# Load resource data ----
data_resource_lcmm = read_rds(here::here("output", "data", "data_resource_lcmm.rds"))
data_resource_lcmm = data_resource_lcmm %>%
select(patient_id, followup_month, resource_use = all_of(paste0("n_", resource_type)))
# Only include patients with at least 1 episode of healthcare use ----
## Identify patient ids ----
patient_id_non_zero = data_resource_lcmm %>%
group_by(patient_id) %>%
summarise(total = sum(resource_use)) %>%
filter(total > 0) %>%
pull(patient_id)
## Filter for patinets with 1+ resource use ----
data_resource_lcmm = data_resource_lcmm %>%
filter(patient_id %in% patient_id_non_zero)
# Convert to data.frame ----
data_resource_lcmm = as.data.frame(data_resource_lcmm)
# Run LCMM model ----
## Set model parameters ----
max_iter = 5000 # Maximum number of iterations
## Run lcmm ----
if (ng == 1){
lcmm_model = hlme(fixed = resource_use ~ bSpline(followup_month, degree = 1, knots = 7),
random = ~ bSpline(followup_month, degree = 1, knots = 7),
subject = "patient_id",
ng = ng,
maxiter = max_iter,
data = data_resource_lcmm,
verbose = FALSE,
nproc = nproc)
# lcmm_model = lcmm(fixed = resource_use ~ 1 + followup_month + I(followup_month^2) + I(followup_month^3),
#                   random = ~1 + followup_month,
#                   subject = "patient_id",
#                   ng = ng,
#                   maxiter = max_iter,
#                   data = data_resource_lcmm,
#                   verbose = FALSE,
#                   link = "7-equi-splines",
#                   nproc = nproc)
} else{
# Load lcmm model with ng = 1
lcmm_model_1 = read_rds(
here::here("output", "lcmm", resource_type, "models", "lcmm_model_1.rds"))
# Run hlme ----
lcmm_model = gridsearch(
m = hlme(fixed = resource_use ~ bSpline(followup_month, degree = 1, knots = 7),
random = ~ bSpline(followup_month, degree = 1, knots = 7),
mixture = ~ bSpline(followup_month, degree = 1, knots = 7),
classmb = ~1,
ng = ng,
B = lcmm_model_1,
data = data_resource_lcmm,
subject = "patient_id",
maxiter = max_iter,
verbose = TRUE,
nproc = nproc),
rep = 20,
maxiter = 20,
minit = lcmm_model_1
)
# lcmm_model = lcmm(fixed = resource_use ~ 1 + followup_month + I(followup_month^2) + I(followup_month^3),
#                   mixture = ~1 + followup_month + I(followup_month^2) + I(followup_month^3),
#                   random = ~1 + followup_month,
#                   ng = ng,
#                   B = lcmm_model_1,
#                   data = data_resource_lcmm,
#                   subject = "patient_id",
#                   maxiter = max_iter,
#                   verbose = FALSE,
#                   link = "7-equi-splines",
#                   nproc = nproc)
}
# Save lcmm_model ----
write_rds(x = lcmm_model,
here::here("output", "lcmm", resource_type, "models",
paste0("lcmm_model_", ng, ".rds")))
lcmm_model$runtime
lcmm_model$niter
