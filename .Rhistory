## Import libraries ----
library("tidyverse")
library("lubridate")
library("finalfit")
# Set defaults ----
my_theme = theme_bw()
# Functions ----
plot_hist = function(data, x, fill = NULL, bins = 50){
if(is.null(fill)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram(bins = bins) +
my_theme
} else {
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram(bins = bins) +
my_theme
}
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
}
# Create output directories ----
dir.create(here::here("output", "descriptive", "plots"),
showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "descriptive", "tables"),
showWarnings = FALSE, recursive=TRUE)
# Read processed data  ----
data_patient    = read_rds(here::here("output", "data", "data_patient.rds"))
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp         = read_rds(here::here("output", "data", "data_gp.rds"))
# Export summary table ----
dependent = "covid_status"
explanatory = c("age", "age_factor", "sex",
"ethnicity", "ethnicity_6_sus", "ethnicity_comb",
"region", "imd_Q5", "rural_urban_group",
#"asthma", "diabetes",
"death_factor",
"admission_count_factor",
"gp_contact_count_factor")
tbl_summary = data_patient %>%
summary_factorlist(dependent, explanatory, p = TRUE,
add_col_totals = TRUE,
add_row_total = TRUE)
write_csv(tbl_summary, here::here("output", "descriptive", "tables", "tbl_summary.csv"))
# Export maximum admissions and GP counts ----
max_counts = data_patient %>%
summarise(n = n(),
max_admissions_count = max(admission_count),
max_outpatient_count = max(outpatient_count),
max_gp_contact_count = max(gp_contact_count),
max_covid_negative_test_count = max(covid_negative_test_count),
max_covid_positive_test_count = max(covid_positive_test_count))
write_csv(max_counts, here::here("output", "descriptive", "tables", "max_counts.csv"))
# Plot histograms  -----
list("age",
"death_date",
"covid_positive_test_date_1",
"covid_negative_test_date_1",
"admission_count",
"outpatient_count",
"gp_contact_count",
"covid_positive_test_count",
"covid_negative_test_count") %>%
lapply(function(x){
plot_hist(data_patient, x)
})
list("admission_date",
"discharge_date"
) %>%
lapply(function(x){
plot_hist(data_admissions, x)
})
list("outpatient_date") %>%
lapply(function(x){
plot_hist(data_outpatient, x)
})
list("gp_contact_date") %>%
lapply(function(x){
plot_hist(data_gp, x)
})
## Import libraries ----
library("tidyverse")
library("lubridate")
library("finalfit")
# Set defaults ----
my_theme = theme_bw()
# Functions ----
plot_hist = function(data, x, fill = NULL, bins = 50){
if(is.null(fill)){
ggplot(data = data, aes_string(x = x)) +
geom_histogram(bins = bins) +
my_theme
} else {
ggplot(data = data, aes_string(x = x, fill = fill)) +
geom_histogram(bins = bins) +
my_theme
}
ggsave(paste0("plot_hist_", x, ".jpeg"),
plot = last_plot(),
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
}
# Create output directories ----
dir.create(here::here("output", "descriptive", "plots"),
showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "descriptive", "tables"),
showWarnings = FALSE, recursive=TRUE)
# Read processed data  ----
data_patient    = read_rds(here::here("output", "data", "data_patient.rds"))
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp         = read_rds(here::here("output", "data", "data_gp.rds"))
# Export summary table ----
dependent = "covid_status"
explanatory = c("age", "age_factor", "sex",
"ethnicity", "ethnicity_6_sus", "ethnicity_comb",
"region_2019", "imd_Q5_2019", "rural_urban_group_2019",
#"asthma", "diabetes",
"death_factor",
"admission_count_factor",
"gp_contact_count_factor")
tbl_summary = data_patient %>%
summary_factorlist(dependent, explanatory, p = TRUE,
add_col_totals = TRUE,
add_row_total = TRUE)
explanatory = c("age", "age_factor", "sex",
"ethnicity", "ethnicity_6_sus", "ethnicity_comb",
"region_2019", "imd_Q5_2019", "rural_urban_2019",
#"asthma", "diabetes",
"death_factor",
"admission_count_factor",
"gp_contact_count_factor")
tbl_summary = data_patient %>%
summary_factorlist(dependent, explanatory, p = TRUE,
add_col_totals = TRUE,
add_row_total = TRUE)
# Plot histograms  -----
list("age",
"death_date",
"covid_positive_test_date_1",
"covid_negative_test_date_1",
"admission_count",
"outpatient_count",
"gp_contact_count",
"covid_positive_test_count",
"covid_negative_test_count") %>%
lapply(function(x){
plot_hist(data_patient, x)
})
data_patient %>% filter(death_date %>% is.na()) %>% nrow()
data_patient %>% filter(covid_negative_test_date_1 %>% is.na()) %>% nrow()
data_patient %>% filter(covid_positive_test_date_1 %>% is.na()) %>% nrow()
# Load library
library("tidyverse")
library("lubridate")
library("finalfit")
# Read processed data  ----
data_patient_2019 = read_rds(here::here("output", "data", "data_patient_2019.rds"))
data_patient_2020 = read_rds(here::here("output", "data", "data_patient_2020.rds"))
data_patient_2021 = read_rds(here::here("output", "data", "data_patient_2021.rds"))
data_admissions   = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient   = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp           = read_rds(here::here("output", "data", "data_gp.rds"))
View(data_patient_2019)
x = "asthma"
data_patient_2019 %>% select(x)
data_patient_2019 %>% select(all_of(x))
tbl_summary = data_patient_2019 %>%
select(all_of(dependent, explanatory)) %>%
bind_rows(data_patient_2020 %>%
select(all_of(dependent, explanatory))) %>%
bind_rows(data_patient_2021 %>%
select(all_of(dependent, explanatory))) %>%
summary_factorlist(dependent, explanatory, p = TRUE,
add_col_totals = TRUE,
add_row_total = TRUE)
data_patient_2019 %>%
select(all_of(dependent, explanatory))
data_patient_2019 %>%
select(all_of(c(dependent, explanatory)))
# Create summary table stratified by cohort year ----
dependent = "cohort_year"
explanatory = c("covid_status", "age", "age_factor", "sex",
"ethnicity", "ethnicity_6_sus", "ethnicity_comb",
"region", "imd_Q5", "rural_urban",
"asthma", "diabetes",
"death_factor",
"admission_count_factor",
"gp_contact_count_factor")
data_patient_2019 %>%
select(all_of(c(dependent, explanatory)))
View(data_patient_2020)
View(data_patient_2019)
# This script takes the processed data and filters patients based on the
# exclusion and objective-specific inclusion criteria as set out in the
# protocol
#
# - input:
# Load library
library("tidyverse")
library("lubridate")
library("finalfit")
library("consort")
# Read processed data  ----
data_patient =    read_rds(here::here("output", "data", "data_patient.rds"))
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
# General exclusions for all cohorts ----
data_patient = data_patient %>%
mutate(
excl_general = case_when(
covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
TRUE ~ NA_character_),
cohort_general = if_else(is.na(excl_general), patient_id, NA_integer_))
# Define index dates ----
list_index_dates = c("2019-01-01", "2020-01-01", "2021-01-01") %>% as_date()
# Create new data with age, demographics and comorbidities indexed ----
list_indexed_data = list_index_dates %>%
map(function(index_date){
data_index = data_patient %>%
mutate(
cohort_year = year(index_date) %>%
ff_label("Cohort"),
age = ((index_date - date_of_birth)/365.25) %>%
as.numeric() %>%
ff_label("Age (years)"),
age_factor = cut(age,
breaks = c(-Inf, 4, 7, 11, 15, 18, Inf),
labels = c("Below 4", "4-6", "7-10", "11-14", "15-17", "18+"))%>%
factor(levels = c("Below 4", "4-6", "7-10", "11-14", "15-17", "18+")) %>%
ff_label("Age group (years)"),
# Comorbidities
asthma = if_else(!is.na(asthma_date) & (asthma_date < index_date),
"Yes", "No") %>%
ff_label("Asthma"),
diabetes = if_else(!is.na(diabetes_date) & (diabetes_date < index_date),
"Yes", "No") %>%
ff_label("Diabetes"),
# Exclusions
excl_index = case_when(
index_date > death_date ~ paste0("Died prior to\n ", format(index_date, "%d %B %Y")),
age <=4 ~ paste0("Age 4 years or below\n on ", format(index_date, "%d %B %Y")),
age >=18 ~ paste0("Age 18 years or above\n on ", format(index_date, "%d %B %Y")),
TRUE ~ NA_character_
),
# Cohort
cohort_index = if_else(is.na(excl_general) & is.na(excl_index),
patient_id, NA_integer_)
) %>%
rename(imd = paste0("imd_", year(index_date)),
imd_Q5 = paste0("imd_Q5_", year(index_date)),
rural_urban = paste0("rural_urban_", year(index_date)),
region = paste0("region_", year(index_date))
) %>%
select(-contains("_2019"), -contains("_2020"), -contains("_2021"))
# Create consort diagrams ----
consort_diagram = consort_plot(
data = data_index,
orders = c(patient_id       = "OpenSAFELY extract population: alive, registered with GP\n and age between 1 and 18 years on 01 January 2019",
excl_general     = "Excluded",
cohort_general   = "Extract population excluding probable nosocomial infection\n and discrepant same-day RT-PCR test results",
excl_index       = "Excluded",
cohort_index     = paste0(year(index_date), " cohort: Age between 4 and 18 years\n on ", format(index_date, "%d %B %Y"))),
side_box = c("excl_general", "excl_index"),
cex = 0.9)
# Save consort diagrams ----
ggsave(paste0("obj_1_consort_", year(index_date), ".jpeg"),
plot = consort_diagram,
width = 10, height = 4, units = "in",
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
# Filter out excluded patients ----
data_index = data_index %>%
filter(!is.na(cohort_index))
# Save indexed patient data as rds ----
write_rds(data_index,
here::here("output", "data", paste0("data_patient_", year(index_date), ".rds")),
compress="gz")
return(data_index)
})
# Load library
library("tidyverse")
library("lubridate")
library("finalfit")
# Read processed data  ----
data_patient_2019 = read_rds(here::here("output", "data", "data_patient_2019.rds"))
data_patient_2020 = read_rds(here::here("output", "data", "data_patient_2020.rds"))
data_patient_2021 = read_rds(here::here("output", "data", "data_patient_2021.rds"))
data_admissions   = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient   = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp           = read_rds(here::here("output", "data", "data_gp.rds"))
# Create summary table stratified by cohort year ----
dependent = "cohort_year"
explanatory = c("covid_status", "age", "age_factor", "sex",
"ethnicity", "ethnicity_6_sus", "ethnicity_comb",
"region", "imd_Q5", "rural_urban",
"asthma", "diabetes",
"death_factor",
"admission_count_factor",
"gp_contact_count_factor")
tbl_summary = data_patient_2019 %>%
select(all_of(c(dependent, explanatory)))
tbl_summary = data_patient_2019 %>%
select(all_of(c(dependent, explanatory))) %>%
bind_rows(data_patient_2020 %>%
select(all_of(c(dependent, explanatory)))) %>%
bind_rows(data_patient_2021 %>%
select(all_of(c(dependent, explanatory)))) %>%
summary_factorlist(dependent, explanatory, p = TRUE,
add_col_totals = TRUE,
add_row_total = TRUE)
View(tbl_summary)
# This script takes the processed data and filters patients based on the
# exclusion and objective-specific inclusion criteria as set out in the
# protocol
#
# - input:
# Load library
library("tidyverse")
library("lubridate")
library("finalfit")
library("consort")
# Read processed data  ----
data_patient =    read_rds(here::here("output", "data", "data_patient.rds"))
data_admissions = read_rds(here::here("output", "data", "data_admissions.rds"))
# General exclusions for all cohorts ----
data_patient = data_patient %>%
mutate(
excl_general = case_when(
covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
TRUE ~ NA_character_),
cohort_general = if_else(is.na(excl_general), patient_id, NA_integer_))
# Define index dates ----
list_index_dates = c("2019-01-01", "2020-01-01", "2021-01-01") %>% as_date()
# Create new data with age, demographics and comorbidities indexed ----
list_indexed_data = list_index_dates %>%
map(function(index_date){
data_index = data_patient %>%
mutate(
cohort_year = year(index_date) %>%
as.character() %>%
ff_label("Cohort"),
age = ((index_date - date_of_birth)/365.25) %>%
as.numeric() %>%
ff_label("Age (years)"),
age_factor = cut(age,
breaks = c(-Inf, 4, 7, 11, 15, 18, Inf),
labels = c("Below 4", "4-6", "7-10", "11-14", "15-17", "18+"))%>%
factor(levels = c("Below 4", "4-6", "7-10", "11-14", "15-17", "18+")) %>%
ff_label("Age group (years)"),
# Comorbidities
asthma = if_else(!is.na(asthma_date) & (asthma_date < index_date),
"Yes", "No") %>%
ff_label("Asthma"),
diabetes = if_else(!is.na(diabetes_date) & (diabetes_date < index_date),
"Yes", "No") %>%
ff_label("Diabetes"),
# Exclusions
excl_index = case_when(
index_date > death_date ~ paste0("Died prior to\n ", format(index_date, "%d %B %Y")),
age <=4 ~ paste0("Age 4 years or below\n on ", format(index_date, "%d %B %Y")),
age >=18 ~ paste0("Age 18 years or above\n on ", format(index_date, "%d %B %Y")),
TRUE ~ NA_character_
),
# Cohort
cohort_index = if_else(is.na(excl_general) & is.na(excl_index),
patient_id, NA_integer_)
) %>%
rename(imd = paste0("imd_", year(index_date)),
imd_Q5 = paste0("imd_Q5_", year(index_date)),
rural_urban = paste0("rural_urban_", year(index_date)),
region = paste0("region_", year(index_date))
) %>%
select(-contains("_2019"), -contains("_2020"), -contains("_2021"))
# Create consort diagrams ----
consort_diagram = consort_plot(
data = data_index,
orders = c(patient_id       = "OpenSAFELY extract population: alive, registered with GP\n and age between 1 and 18 years on 01 January 2019",
excl_general     = "Excluded",
cohort_general   = "Extract population excluding probable nosocomial infection\n and discrepant same-day RT-PCR test results",
excl_index       = "Excluded",
cohort_index     = paste0(year(index_date), " cohort: Age between 4 and 18 years\n on ", format(index_date, "%d %B %Y"))),
side_box = c("excl_general", "excl_index"),
cex = 0.9)
# Save consort diagrams ----
ggsave(paste0("obj_1_consort_", year(index_date), ".jpeg"),
plot = consort_diagram,
width = 10, height = 4, units = "in",
device = "jpeg",
path = here::here("output", "descriptive", "plots"))
# Filter out excluded patients ----
data_index = data_index %>%
filter(!is.na(cohort_index))
# Save indexed patient data as rds ----
write_rds(data_index,
here::here("output", "data", paste0("data_patient_", year(index_date), ".rds")),
compress="gz")
return(data_index)
})
# Load library
library("tidyverse")
library("lubridate")
library("finalfit")
# Read processed data  ----
data_patient_2019 = read_rds(here::here("output", "data", "data_patient_2019.rds"))
data_patient_2020 = read_rds(here::here("output", "data", "data_patient_2020.rds"))
data_patient_2021 = read_rds(here::here("output", "data", "data_patient_2021.rds"))
data_admissions   = read_rds(here::here("output", "data", "data_admissions.rds"))
data_outpatient   = read_rds(here::here("output", "data", "data_outpatient.rds"))
data_gp           = read_rds(here::here("output", "data", "data_gp.rds"))
# Create summary table stratified by cohort year ----
dependent = "cohort_year"
explanatory = c("covid_status", "age", "age_factor", "sex",
"ethnicity", "ethnicity_6_sus", "ethnicity_comb",
"region", "imd_Q5", "rural_urban",
"asthma", "diabetes",
"death_factor",
"admission_count_factor",
"gp_contact_count_factor")
tbl_summary = data_patient_2019 %>%
select(all_of(c(dependent, explanatory))) %>%
bind_rows(data_patient_2020 %>%
select(all_of(c(dependent, explanatory)))) %>%
bind_rows(data_patient_2021 %>%
select(all_of(c(dependent, explanatory)))) %>%
summary_factorlist(dependent, explanatory, p = TRUE,
add_col_totals = TRUE,
add_row_total = TRUE)
View(tbl_summary)
View(data_outpatient)
x = data_outpatient %>%
filter(patient_id %in% data_patient_2019$patient_id) %>%
filter(outpatient_date >= "2019-01-01") %>%
filter(outpatient_date <= "2019-12-31")
View(x)
?floor_date
x = data_outpatient %>%
filter(patient_id %in% data_patient_2019$patient_id) %>%
filter(outpatient_date >= "2019-01-01") %>%
filter(outpatient_date <= "2019-12-31") %>%
mutate(week = floor_date(outpatient_date, "week"))
View(x)
365/7
x = data_outpatient %>%
filter(patient_id %in% data_patient_2019$patient_id) %>%
filter(outpatient_date >= "2019-01-01") %>%
filter(outpatient_date <= "2019-12-31") %>%
mutate(week = week(outpatient_date))
View(x)
?week
"2019-01-01" %>% week()
"2019-01-07" %>% week()
"2019-01-08" %>% week()
?ceiling_date()
"2019-01-01" %>% day()
?day()
"2019-01-01" %>% wday()
?ceiling_date()
x = data_outpatient %>%
filter(patient_id %in% data_patient_2019$patient_id) %>%
filter(outpatient_date >= "2019-01-01") %>%
filter(outpatient_date <= "2019-12-31") %>%
mutate(week = week(outpatient_date))
View(x)
x = data_outpatient %>%
filter(patient_id %in% data_patient_2019$patient_id) %>%
filter(outpatient_date >= "2019-01-01") %>%
filter(outpatient_date <= "2019-12-31") %>%
mutate(week_index = week(outpatient_date),
week_date  = floor_date(outpatient_date, "weeks",
week_start = "2019-01-01" %>% wday()))
View(x)
x = data_outpatient %>%
filter(patient_id %in% data_patient_2019$patient_id) %>%
filter(outpatient_date >= "2019-01-01") %>%
filter(outpatient_date <= "2019-12-31") %>%
mutate(week_index = week(outpatient_date),
week_date  = floor_date(outpatient_date, "weeks",
week_start = "2019-01-01" %>% wday() -1 ))
View(x)
365/7
52*7
"2019-01-01" + week(1)
"2019-01-01" %>% as.Date() + week(1)
"2019-01-01" %>% as.Date() + 1
x = data_outpatient %>%
filter(patient_id %in% data_patient_2019$patient_id) %>%
filter(outpatient_date >= "2019-01-01") %>%
filter(outpatient_date <= "2019-12-31") %>%
mutate(week_index = week(outpatient_date),
week_date  = as.Date("2019-01-01") + 7*(week_index - 1) + 3)
View(x)
x = data_outpatient %>%
filter(patient_id %in% data_patient_2019$patient_id) %>%
filter(outpatient_date >= "2019-01-01") %>%
filter(outpatient_date <= "2019-12-31") %>%
mutate(week_index = week(outpatient_date),
week_index = if_else(week_index == 53, 52, week_index),
week_date  = as.Date("2019-01-01") + 7*(week_index - 1) + 3)
View(x)
x %>%
group_by(week_date) %>%
count(outpatient_date)
x %>%
group_by(week_date) %>%
count(week_date)
x %>%
count(week_date)
365/28
