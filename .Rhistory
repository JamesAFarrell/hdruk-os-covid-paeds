# Parse character NAs
data_extract = data_extract %>%
mutate(across(
.cols = where(is.character),
.fns = ~na_if(.x, "")
)) %>%
arrange(patient_id) %>%
select(patient_id, everything())
### SECTION TO SORT OUT BAD DUMMY DATA ----
## Hospital admissions ----
data_admission = data_extract %>%
select(patient_id,
starts_with(c("admission_", "discharge_"))) %>%
mutate_at(vars(starts_with(c("admission_", "discharge_"))), as.character) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = FALSE
) %>%
pivot_wider(
names_from = variable,
values_from = data
) %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d")
View(data_admission)
# Filter out rows with bad admission dates
data_admission = data_admission %>%
filter(admission_date <= discharge_date,
!is.na(admission_date),
!is.na(discharge_date)) %>%
group_by(patient_id) %>%
arrange(patient_id, admission_date) %>%
mutate(index = row_number())
View(data_admission)
# Combine rows if admission periods overlap
data_admission = data_admission %>%
group_by(patient_id) %>%
mutate(overlap_with_prior =
case_when(admission_date < lag(discharge_date)~ 1,
TRUE ~ 0),
index = row_number() - cumsum(overlap_with_prior)) %>%
select(-overlap_with_prior) %>%
group_by(patient_id, index) %>%
mutate(admission_date = min(admission_date),
discharge_date = max(discharge_date)) %>%
slice(1) %>%
ungroup()
# Pivot wider
data_admission_wide = data_admission %>%
mutate_at(vars(starts_with(c("admission_", "discharge_"))), as.character) %>%
pivot_longer(
cols = -c(patient_id, index),
names_to = c("variable"),
values_to = "data",
values_drop_na = FALSE
) %>%
mutate(variable_name = paste0(variable, "_", index)) %>%
pivot_wider(
id_cols = c(patient_id),
names_from = variable_name,
values_from = data
) %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d")
View(data_admission_wide)
data_dates_long = data_extract %>%
select(patient_id, matches("^(.*)_date_(\\d+)")) %>%
select(-starts_with(c("admission_", "discharge_"))) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "date",
values_drop_na = TRUE
) %>%
arrange(patient_id, variable, date) %>%
group_by(patient_id, variable) %>%
mutate(index = row_number()) %>%
ungroup()
View(data_dates_long)
data_dates_wide = data_dates_long %>%
mutate(variable = paste0(variable, "_", index)) %>%
arrange(patient_id, variable) %>%
pivot_wider(
id_cols = patient_id,
names_from = variable,
values_from = date) %>%
select(patient_id, sort(names(.)))
View(data_dates_wide)
View(data_extract)
data_extract$admission_date_1 %>% class()
######################################
# This script:
# - imports data extracted by the cohort extractor
# - tidies missing values
# - removes bad dummy admission dates and reorders dates so no negative time
#   differences (only actually does anything for dummy data)
# - fills in unknown ethnicity from GP records with ethnicity from SUS (secondary care)
# standardises some variables (eg convert to factor) and derives some new ones
# - saves: - processed one-row-per-patient dataset
#          - processed one-row-per-event datasets for hospital admissions,
#            outpatient and GP attendances
######################################
# Import libraries ----
library("tidyverse")
library("lubridate")
# Import globally defined repo variables from
gbl_vars = jsonlite::fromJSON(
txt="./analysis/global_variables.json"
)
# Create directory for processed data
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
# Read data from csv
data_extract = read_csv(
here::here("output", "input.csv.gz"),
col_types = cols_only(
# Identifiers
patient_id = col_integer(),
# Demographics
age = col_integer(),
sex = col_character(),
ethnicity = col_character(),
ethnicity_6_sus = col_character(),
region = col_character(),
imd = col_character(),
bmi = col_character(),
# Comorbidities
asthma = col_integer(),
diabetes = col_integer(),
# Counts
hospital_admissions_total = col_integer(),
gp_consultations_total = col_integer(),
# Dates
death_date = col_date(format="%Y-%m-%d"),
admission_date_1 = col_date(format="%Y-%m-%d"),
discharge_date_1 = col_date(format="%Y-%m-%d"),
admission_date_2 = col_date(format="%Y-%m-%d"),
discharge_date_2 = col_date(format="%Y-%m-%d"),
admission_date_3 = col_date(format="%Y-%m-%d"),
discharge_date_3 = col_date(format="%Y-%m-%d"),
admission_date_4 = col_date(format="%Y-%m-%d"),
discharge_date_4 = col_date(format="%Y-%m-%d"),
admission_date_5 = col_date(format="%Y-%m-%d"),
discharge_date_5 = col_date(format="%Y-%m-%d"),
gp_consultation_date_1 = col_date(format="%Y-%m-%d"),
gp_consultation_date_2 = col_date(format="%Y-%m-%d"),
gp_consultation_date_3 = col_date(format="%Y-%m-%d"),
gp_consultation_date_4 = col_date(format="%Y-%m-%d"),
gp_consultation_date_5 = col_date(format="%Y-%m-%d"),
covid_positive_test_date_1 = col_date(format="%Y-%m-%d"),
# Admission method
admission_method_1 = col_character(),
admission_method_2 = col_character(),
admission_method_3 = col_character(),
admission_method_4 = col_character(),
admission_method_5 = col_character()
),
na = character() # more stable to convert to missing later
)
# Parse character NAs
data_extract = data_extract %>%
mutate(across(
.cols = where(is.character),
.fns = ~na_if(.x, "")
)) %>%
arrange(patient_id) %>%
select(patient_id, everything())
### SECTION TO SORT OUT BAD DUMMY DATA ----
## Hospital admissions ----
data_hospital_admissions = data_extract %>%
select(patient_id,
starts_with(c("admission_", "discharge_", )))
data_hospital_admissions = data_extract %>%
select(patient_id,
starts_with(c("admission_", "discharge_")))
View(data_hospital_admissions)
data_hospital_admissions = data_extract %>%
select(patient_id,
starts_with(c("admission_", "discharge_"))) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = FALSE
)
######################################
# This script:
# - imports data extracted by the cohort extractor
# - tidies missing values
# - removes bad dummy admission dates and reorders dates so no negative time
#   differences (only actually does anything for dummy data)
# - fills in unknown ethnicity from GP records with ethnicity from SUS (secondary care)
# standardises some variables (eg convert to factor) and derives some new ones
# - saves: - processed one-row-per-patient dataset
#          - processed one-row-per-event datasets for hospital admissions,
#            outpatient and GP attendances
######################################
# Import libraries ----
library("tidyverse")
library("lubridate")
# Import globally defined repo variables from
gbl_vars = jsonlite::fromJSON(
txt="./analysis/global_variables.json"
)
# Create directory for processed data
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
# Read data from csv
data_extract = read_csv(
here::here("output", "input.csv.gz"),
col_types = cols_only(
# Identifiers
patient_id = col_integer(),
# Demographics
age = col_integer(),
sex = col_character(),
ethnicity = col_character(),
ethnicity_6_sus = col_character(),
region = col_character(),
imd = col_character(),
bmi = col_character(),
# Comorbidities
asthma = col_integer(),
diabetes = col_integer(),
# Counts
hospital_admissions_total = col_integer(),
gp_consultations_total = col_integer(),
# Dates
death_date = col_date(format="%Y-%m-%d"),
admission_date_1 = col_date(format="%Y-%m-%d"),
discharge_date_1 = col_date(format="%Y-%m-%d"),
admission_date_2 = col_date(format="%Y-%m-%d"),
discharge_date_2 = col_date(format="%Y-%m-%d"),
admission_date_3 = col_date(format="%Y-%m-%d"),
discharge_date_3 = col_date(format="%Y-%m-%d"),
admission_date_4 = col_date(format="%Y-%m-%d"),
discharge_date_4 = col_date(format="%Y-%m-%d"),
admission_date_5 = col_date(format="%Y-%m-%d"),
discharge_date_5 = col_date(format="%Y-%m-%d"),
gp_consultation_date_1 = col_date(format="%Y-%m-%d"),
gp_consultation_date_2 = col_date(format="%Y-%m-%d"),
gp_consultation_date_3 = col_date(format="%Y-%m-%d"),
gp_consultation_date_4 = col_date(format="%Y-%m-%d"),
gp_consultation_date_5 = col_date(format="%Y-%m-%d"),
covid_positive_test_date_1 = col_date(format="%Y-%m-%d"),
# Admission method
admission_method_1 = col_character(),
admission_method_2 = col_character(),
admission_method_3 = col_character(),
admission_method_4 = col_character(),
admission_method_5 = col_character()
),
na = character() # more stable to convert to missing later
)
# Parse character NAs
data_extract = data_extract %>%
mutate(across(
.cols = where(is.character),
.fns = ~na_if(.x, "")
)) %>%
arrange(patient_id) %>%
select(patient_id, everything())
### SECTION TO SORT OUT BAD DUMMY DATA ----
## Hospital admissions ----
data_hospital_admissions = data_extract %>%
select(patient_id,
starts_with(c("admission_", "discharge_"))) %>%
mutate_at(vars(starts_with(c("admission_", "discharge_"))), as.character) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = FALSE
) %>%
pivot_wider(
names_from = variable,
values_from = data
) %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d")
# Filter out rows with bad admission dates
data_hospital_admissions = data_hospital_admissions %>%
filter(admission_date <= discharge_date,
!is.na(admission_date),
!is.na(discharge_date)) %>%
group_by(patient_id) %>%
arrange(patient_id, admission_date) %>%
mutate(index = row_number())
# Combine rows if admission periods overlap
data_hospital_admissions = data_hospital_admissions %>%
group_by(patient_id) %>%
mutate(overlap_with_prior =
case_when(admission_date < lag(discharge_date)~ 1,
TRUE ~ 0),
index = row_number() - cumsum(overlap_with_prior)) %>%
select(-overlap_with_prior) %>%
group_by(patient_id, index) %>%
mutate(admission_date = min(admission_date),
discharge_date = max(discharge_date)) %>%
slice(1) %>%
ungroup()
# Pivot wider
data_hospital_admissions_wide = data_hospital_admissions %>%
mutate_at(vars(starts_with(c("admission_", "discharge_"))), as.character) %>%
pivot_longer(
cols = -c(patient_id, index),
names_to = c("variable"),
values_to = "data",
values_drop_na = FALSE
) %>%
mutate(variable_name = paste0(variable, "_", index)) %>%
pivot_wider(
id_cols = c(patient_id),
names_from = variable_name,
values_from = data
) %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d")
## Other date events ----
data_dates_long = data_extract %>%
select(patient_id, matches("^(.*)_date_(\\d+)")) %>%
select(-starts_with(c("admission_", "discharge_"))) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "date",
values_drop_na = TRUE
) %>%
arrange(patient_id, variable, date) %>%
group_by(patient_id, variable) %>%
mutate(index = row_number()) %>%
ungroup()
data_dates_wide = data_dates_long %>%
mutate(variable = paste0(variable, "_", index)) %>%
arrange(patient_id, variable) %>%
pivot_wider(
id_cols = patient_id,
names_from = variable,
values_from = date) %>%
select(patient_id, sort(names(.)))
# Combine wide datasets with extract
data_extract = data_extract %>%
select(-matches("^(.*)_date_(\\d+)")) %>%
select(-starts_with(c("admission_", "discharge_"))) %>%
left_join(
data_hospital_admissions_wide,
by = "patient_id"
) %>%
left_join(
data_dates_wide,
by = "patient_id"
) %>%
select(patient_id, everything())
# Save rds
write_rds(data_extract,
here::here("output", "data", "data_processed.rds"),
compress="gz")
View(data_extract)
gbl_vars
# Read processed data
read_rds(here::here("output", "data", "data_processed.rds"))
# Read processed data
data_extract = read_rds(here::here("output", "data", "data_processed.rds"))
data_extract %>% summary()
x = data_extract %>% summary()
x
# Hospital admissions
plot_hopital_admission_count = data_extract %>%
ggplot(aes(x = hospital_admissions_total)) +
geom_histogram()
plot_hopital_admission_count
# Hospital admissions
plot_hopital_admission_count = data_extract %>%
ggplot(aes(hospital_admissions_total)) +
geom_histogram()
plot_hopital_admission_count
# GP-patient interaction
plot_gp_count = data_extract %>%
ggplot(aes(gp_consultations_total)) +
geom_histogram()
# Hospital admissions
plot_hopital_admission_count = data_extract %>%
ggplot(aes(hospital_admissions_total)) +
geom_histogram()
plot_hopital_admission_count
# GP-patient interaction
plot_gp_count = data_extract %>%
ggplot(aes(gp_consultations_total)) +
geom_histogram()
plot_gp_count
## Summarise data
tbl_counts = data_extract %>%
select(hospital_admissions_total, gp_consultations_total) %>%
summarise(n = nrow())
## Summarise data
tbl_counts = data_extract %>%
select(hospital_admissions_total, gp_consultations_total) %>%
summarise(n = n())
tbl_counts
## Summarise data
tbl_counts = data_extract %>%
summarise(n = n(),
max_admissions = max(hospital_admissions_total),
max_gp_interactions = gp_consultations_total)
tbl_counts
## Summarise data
tbl_counts = data_extract %>%
summarise(n = n(),
max_admissions = max(hospital_admissions_total),
max_gp_interactions = max(gp_consultations_total))
tbl_counts
ggsave(here::here("output", "descriptive", "plots", "data_processed.rds"))
ggsave(here::here("output", "descriptive", "plots", "data_processed.jpeg"))
?ggsave
ggsave("plot_hist_gp_count",
plot_hist_gp_count,
"jpeg",
here::here("output", "descriptive", "plots"))
# GP-patient interaction
plot_hist_gp_count = data_extract %>%
ggplot(aes(gp_consultations_total)) +
geom_histogram()
ggsave("plot_hist_gp_count",
plot_hist_gp_count,
"jpeg",
here::here("output", "descriptive", "plots"))
## create output directories ----
dir.create(here::here("output", "descriptive", "plots"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "descriptive", "tables"), showWarnings = FALSE, recursive=TRUE)
ggsave("plot_hist_gp_count",
plot_hist_gp_count,
"jpeg",
here::here("output", "descriptive", "plots"))
ggsave("plot_hist_hospital_admission_count.jpeg",
plot_hist_hospital_admission_count,
"jpeg",
here::here("output", "descriptive", "plots"))
## Plot histogram
# Hospital admissions
plot_hist_hospital_admission_count = data_extract %>%
ggplot(aes(hospital_admissions_total)) +
geom_histogram()
ggsave("plot_hist_hospital_admission_count.jpeg",
plot_hist_hospital_admission_count,
"jpeg",
here::here("output", "descriptive", "plots"))
## Summarise data
tbl_counts = data_extract %>%
summarise(n = n(),
max_admissions = max(hospital_admissions_total),
max_gp_interactions = max(gp_consultations_total))
## create output directories ----
dir.create(here::here("output", "descriptive", "plots"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "descriptive", "tables"), showWarnings = FALSE, recursive=TRUE)
# Read processed data
data_extract = read_rds(here::here("output", "data", "data_processed.rds"))
## Summarise data
tbl_counts = data_extract %>%
summarise(n = n(),
max_admissions = max(hospital_admissions_total),
max_gp_interactions = max(gp_consultations_total))
write_csv(tbl_counts, here::here("output", "descriptive", "tables", "tbl_counts.csv"))
## Plot histogram
# Hospital admissions
plot_hist_hospital_admission_count = data_extract %>%
ggplot(aes(hospital_admissions_total)) +
geom_histogram()
ggsave("plot_hist_hospital_admission_count.jpeg",
plot_hist_hospital_admission_count,
"jpeg",
here::here("output", "descriptive", "plots"))
)
# GP-patient interaction
plot_hist_gp_count = data_extract %>%
ggplot(aes(gp_consultations_total)) +
geom_histogram()
ggsave("plot_hist_gp_count.jpeg",
plot_hist_gp_count,
"jpeg",
here::here("output", "descriptive", "plots"))
)
## create output directories ----
dir.create(here::here("output", "descriptive", "plots"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "descriptive", "tables"), showWarnings = FALSE, recursive=TRUE)
# Read processed data
data_extract = read_rds(here::here("output", "data", "data_processed.rds"))
## Summarise data
tbl_counts = data_extract %>%
summarise(n = n(),
max_admissions = max(hospital_admissions_total),
max_gp_interactions = max(gp_consultations_total))
write_csv(tbl_counts, here::here("output", "descriptive", "tables", "tbl_counts.csv"))
## Plot histogram
# Hospital admissions
plot_hist_hospital_admission_count = data_extract %>%
ggplot(aes(hospital_admissions_total)) +
geom_histogram()
ggsave("plot_hist_hospital_admission_count.jpeg",
plot_hist_hospital_admission_count,
"jpeg",
here::here("output", "descriptive", "plots"))
# GP-patient interaction
plot_hist_gp_count = data_extract %>%
ggplot(aes(gp_consultations_total)) +
geom_histogram()
ggsave("plot_hist_gp_count.jpeg",
plot_hist_gp_count,
"jpeg",
here::here("output", "descriptive", "plots"))
## Import libraries ----
library("tidyverse")
