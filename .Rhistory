}) %>%
reduce(full_join, by = "patient_id") %>%
right_join(
data_patient %>%
select(-contains(names(icd_10_codelist))),
by = "patient_id"
)
# Create factors and label variables -----
data_patient = data_patient %>%
mutate(
date_of_birth = if_else(is.na(date_of_birth),
NA_character_,
paste0(date_of_birth, "-15")) %>%
ymd(),
sex = case_when(
sex == "F" ~ "Female",
sex == "M" ~ "Male",
TRUE ~ NA_character_
) %>%
factor() %>%
ff_label("Sex"),
ethnicity_gp = case_when(
ethnicity_gp == "1" ~ "White",
ethnicity_gp == "4" ~ "Black",
ethnicity_gp == "3" ~ "Asian",
ethnicity_gp == "2" ~ "Mixed",
ethnicity_gp == "5" ~ "Other",
TRUE ~ NA_character_
) %>%
factor() %>%
ff_label("Ethnicity (primary care)"),
ethnicity_6_sus = case_when(
ethnicity_6_sus == "1" ~ "White",
ethnicity_6_sus == "4" ~ "Black",
ethnicity_6_sus == "3" ~ "Asian",
ethnicity_6_sus == "2" ~ "Mixed",
ethnicity_6_sus == "5" ~ "Other",
TRUE ~ NA_character_
) %>%
factor() %>%
ff_label("Ethnicity (SUS)"),
ethnicity = coalesce(ethnicity_gp, ethnicity_6_sus) %>%
ff_label("Ethnicity"),
region_2019 = region_2019 %>%
factor() %>%
ff_label("Region"),
imd_Q5_2019 = case_when(
(imd_2019 >=1)          & (imd_2019 < 32844*1/5) ~ "1 (most deprived)",
(imd_2019 >= 32844*1/5) & (imd_2019 < 32844*2/5) ~ "2",
(imd_2019 >= 32844*2/5) & (imd_2019 < 32844*3/5) ~ "3",
(imd_2019 >= 32844*3/5) & (imd_2019 < 32844*4/5) ~ "4",
(imd_2019 >= 32844*4/5)                          ~ "5 (least deprived)",
TRUE ~ NA_character_
) %>%
factor(levels = c("1 (most deprived)", "2", "3", "4", "5 (least deprived)")) %>%
ff_label("Multiple deprivation quintile"),
rural_urban_2019 = case_when(
rural_urban_2019 %in% c(1,2)     ~ "Urban conurbation",
rural_urban_2019 %in% c(3,4)     ~ "Urban city or town",
rural_urban_2019 %in% c(5,6,7,8) ~ "Rural town or village",
TRUE                             ~ NA_character_
) %>%
factor() %>%
ff_label("Rural-urban classification"),
shielding = if_else(is.na(shielding_first_date), "No", "Yes") %>%
factor() %>%
ff_label("COVID-19 shielding")
) %>%
calc_indexed_variables(ymd("2019-01-01"))
# Covid status, counts and test dates ----
## First positive test date ----
data_patient = data_patient %>%
left_join(
data_testing %>%
filter(result == "Positive") %>%
group_by(patient_id) %>%
filter(row_number() == 1) %>%
select(patient_id, covid_pos_test_date_1 = test_date),
by = "patient_id"
)
## Count tests by result by period ----
data_patient = data_patient %>%
left_join(
data_testing %>%
mutate(
result_abr = if_else(result == "Positive", "pos", "neg"),
test_period = case_when(
test_date < tp_start_date ~ NA_character_,
test_date <= tp_end_date  ~ "tp", # Testing period
test_date <= study_end_date ~ "fup", # Follow-up period
TRUE ~ NA_character_
),
result_period = paste0(result_abr, "_", test_period)
) %>%
group_by(patient_id) %>%
count(result_period) %>%
pivot_wider(
names_from = result_period,
names_glue = "covid_test_{result_period}_count",
values_from = n,
),
by = "patient_id"
) %>%
replace_na(
list(covid_test_neg_tp_count = 0,
covid_test_pos_tp_count = 0,
covid_test_neg_fup_count = 0,
covid_test_pos_fup_count = 0)
) %>%
mutate(
covid_test_neg_tp_count = covid_test_neg_tp_count %>%
ff_label("Negative covid test count (testing period)"),
covid_test_pos_tp_count = covid_test_pos_tp_count %>%
ff_label("Positive covid test count (testing period)"),
covid_test_neg_fup_count = covid_test_neg_fup_count %>%
ff_label("Negative covid test count (follow-up period)"),
covid_test_pos_fup_count = covid_test_pos_fup_count %>%
ff_label("Positive covid test count (follow-up period)")
)
## Assign covid status ----
data_patient = data_patient %>%
mutate(
covid_status_tp = case_when(
covid_test_pos_tp_count > 0 ~ "Positive",
covid_test_neg_tp_count > 0 ~ "Negative",
TRUE ~ "Untested") %>%
factor() %>%
ff_label("SARS-CoV-2 status (testing period)"),
covid_status_fup = case_when(
covid_test_pos_fup_count > 0 ~ "Positive",
covid_test_neg_fup_count > 0 ~ "Negative",
TRUE ~ "Untested") %>%
factor() %>%
ff_label("SARS-CoV-2 status (follow-up period)"),
)
# 1st covid test dates (testing period and follow up) ----
data_patient = data_patient %>%
left_join(
data_testing %>%
filter(test_date >= tp_start_date, test_date <= tp_end_date) %>%
filter(result == "Positive") %>%
group_by(patient_id) %>%
slice(1) %>%
ungroup() %>%
select(patient_id, covid_test_date_pos_tp = test_date),
by = "patient_id"
) %>%
left_join(
data_testing %>%
filter(test_date >= tp_start_date, test_date <= tp_end_date) %>%
filter(result == "Negative") %>%
group_by(patient_id) %>%
slice(1) %>%
ungroup() %>%
select(patient_id, covid_test_date_neg_tp = test_date),
by = "patient_id"
) %>%
left_join(
data_testing %>%
filter(test_date >= fup_start_date, test_date <= study_end_date) %>%
filter(result == "Positive") %>%
group_by(patient_id) %>%
slice(1) %>%
ungroup() %>%
select(patient_id, covid_test_date_pos_fup = test_date),
by = "patient_id"
) %>%
left_join(
data_testing %>%
filter(test_date >= fup_start_date, test_date <= study_end_date) %>%
filter(result == "Negative") %>%
group_by(patient_id) %>%
slice(1) %>%
ungroup() %>%
select(patient_id, covid_test_date_neg_fup = test_date),
by = "patient_id"
)
# Exclusion criteria variables ----
## Potential nosocomial infection ----
## Defined as a positive covid test after day 7 in hospital and on or before 7th
##  day following discharge
data_patient = data_patient %>%
left_join(
data_admissions %>%
left_join(
data_patient %>%
select(patient_id, covid_test_date_pos_tp),
by = "patient_id") %>%
mutate(
covid_nosocomial = case_when(
# Length of stay less than 7 days: Not nosocomial
(discharge_date - admission_date) < 7 ~ NA_character_,
# Length of stay 7+ days: Nosocomial if positive after day 7 in hospital
# and on or before day 7 following discharge, otherwise not nosocomial
(admission_date + days(7) < covid_test_date_pos_tp) &
(discharge_date + days(7) >= covid_test_date_pos_tp) ~ "Yes",
TRUE ~ NA_character_
) %>%
ff_label("Nosocomial infection")) %>%
filter(covid_nosocomial == "Yes") %>%
select(patient_id, covid_nosocomial) %>%
group_by(patient_id) %>%
slice(1) %>%
ungroup(),
by = "patient_id"
) %>%
replace_na(list(covid_nosocomial = "No"))
## Discrepant test result ----
data_patient = data_patient %>%
left_join(
data_testing %>%
group_by(patient_id) %>%
mutate(
covid_test_pos_1 = first(test_date[result == "Positive"])
) %>%
ungroup() %>%
filter(test_date == covid_test_pos_1 & result == "Negative") %>%
mutate(covid_discrepant_test = "Yes") %>%
select(patient_id, covid_discrepant_test),
by = "patient_id"
) %>%
replace_na(list(covid_discrepant_test = "No"))
# Save data as rds ----
write_rds(data_patient,
here::here("output", "data", "data_patient.rds"),
compress="gz")
# Load packages ----
library("tidyverse")
library("lubridate")
library("finalfit")
# Load custom functions ----
source(here::here("analysis", "00_utility_functions.R"))
# Load global variables ----
global_var = jsonlite::read_json(path = here::here("analysis", "global_variables.json"))
## Study dates ----
start_date     = ymd(global_var$start_date)
end_date       = ymd(global_var$end_date)
tp_start_date  = ymd(global_var$tp_start_date)
tp_end_date    = ymd(global_var$tp_end_date)
fup_start_date = ymd(global_var$fup_start_date)
## Max counts ----
n_admission = global_var$n_admission
n_outpatient = global_var$n_outpatient
n_gp = global_var$n_gp
n_positive_test = global_var$n_positive_test
n_negative_test = global_var$n_negative_test
# Load patient data and sample ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Create directory for dummy data ----
dir.create(here::here("output", "dummy_data"), showWarnings = FALSE, recursive=TRUE)
# Dummy data variables ----
n_max = 10000
incidence = 0.2
date_range = seq(start_date, end_date, by="day")
date_range_testing = seq(tp_start_date, end_date, by="day")
admission_method = c("11", "12", "13", "21", "22", "23", "24", "25", "2A",
"2B", "2C", "2D", "28", "31", "32", "82", "83", "81")
primary_diagnosis = paste0(
sample(LETTERS, 50, replace = TRUE),
sample(0:9, 50, replace = TRUE),
sample(0:9, 50, replace = TRUE),
sample(0:9, 50, replace = TRUE)
)
treatment_function = c("100", "101", "102", "110", "242", "260", "280", "321",
"180", "190", "192", "300", "301", "302", "361", "711")
# Small sample from patient_data ----
data_patient = data_patient %>%
filter(patient_id %in% sample(data_patient$patient_id,
min(n_max, nrow(.))))
# Admission data ----
dummy_data_admissions = data_patient %>%
transmute(
admission_date_1 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_1 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_1 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_1 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_1 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_1 = rpois(nrow(data_patient), 0.1),
admission_date_2 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_2 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_2 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_2 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_2 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_2 = rpois(nrow(data_patient), 0.1),
admission_date_3 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_3 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_3 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_3 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_3 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_3 = rpois(nrow(data_patient), 0.1),
admission_date_4 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_4 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_4 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_4 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_4 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_4 = rpois(nrow(data_patient), 0.1),
admission_date_5 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_5 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_5 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_5 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_5 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_5 = rpois(nrow(data_patient), 0.1),
admission_date_6 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_6 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_6 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_6 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_6 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_6 = rpois(nrow(data_patient), 0.1),
admission_date_7 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_7 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_7 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_7 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_7 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_7 = rpois(nrow(data_patient), 0.1),
patient_id = patient_id,
)
## Make dates consecutive, create missing values based on incidence ----
dummy_data_admissions = dummy_data_admissions %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date"))),
as.character) %>%
pivot_longer(-patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)") %>%
pivot_wider(names_from = variable) %>%
mutate(admission_date_temp = admission_date %>% ymd(),
discharge_date_temp = discharge_date %>% ymd()) %>%
group_by(patient_id) %>%
mutate(
admission_date = sort(c(admission_date_temp, discharge_date_temp)
)[seq(1,2*n(), by = 2)] %>%
as.character(),
discharge_date = sort(c(admission_date_temp, discharge_date_temp)
)[seq(2,2*n(), by = 2)] %>%
as.character(),
) %>%
ungroup() %>%
mutate(prob = runif(n())) %>%
filter(prob <= incidence) %>%
select(-c(prob, admission_date_temp, discharge_date_temp)) %>%
group_by(patient_id) %>%
mutate(index = 1:n()) %>%
pivot_longer(-c(patient_id, index)) %>%
mutate(var_name = paste0(name, "_", index)) %>%
select(-c(name, index))
## Make dates consecutive, create missing values based on incidence ----
dummy_data_admissions = dummy_data_admissions %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date", "critical_care_days"))),
as.character) %>%
pivot_longer(-patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)") %>%
pivot_wider(names_from = variable) %>%
mutate(admission_date_temp = admission_date %>% ymd(),
discharge_date_temp = discharge_date %>% ymd()) %>%
group_by(patient_id) %>%
mutate(
admission_date = sort(c(admission_date_temp, discharge_date_temp)
)[seq(1,2*n(), by = 2)] %>%
as.character(),
discharge_date = sort(c(admission_date_temp, discharge_date_temp)
)[seq(2,2*n(), by = 2)] %>%
as.character(),
) %>%
ungroup() %>%
mutate(prob = runif(n())) %>%
filter(prob <= incidence) %>%
select(-c(prob, admission_date_temp, discharge_date_temp)) %>%
group_by(patient_id) %>%
mutate(index = 1:n()) %>%
pivot_longer(-c(patient_id, index)) %>%
mutate(var_name = paste0(name, "_", index)) %>%
select(-c(name, index))
View(data_patient)
View(dummy_data_admissions)
# Load packages ----
library("tidyverse")
library("lubridate")
library("finalfit")
# Load custom functions ----
source(here::here("analysis", "00_utility_functions.R"))
# Load global variables ----
global_var = jsonlite::read_json(path = here::here("analysis", "global_variables.json"))
## Study dates ----
start_date     = ymd(global_var$start_date)
end_date       = ymd(global_var$end_date)
tp_start_date  = ymd(global_var$tp_start_date)
tp_end_date    = ymd(global_var$tp_end_date)
fup_start_date = ymd(global_var$fup_start_date)
## Max counts ----
n_admission = global_var$n_admission
n_outpatient = global_var$n_outpatient
n_gp = global_var$n_gp
n_positive_test = global_var$n_positive_test
n_negative_test = global_var$n_negative_test
# Load patient data and sample ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Create directory for dummy data ----
dir.create(here::here("output", "dummy_data"), showWarnings = FALSE, recursive=TRUE)
# Dummy data variables ----
n_max = 10000
incidence = 0.2
date_range = seq(start_date, end_date, by="day")
date_range_testing = seq(tp_start_date, end_date, by="day")
admission_method = c("11", "12", "13", "21", "22", "23", "24", "25", "2A",
"2B", "2C", "2D", "28", "31", "32", "82", "83", "81")
primary_diagnosis = paste0(
sample(LETTERS, 50, replace = TRUE),
sample(0:9, 50, replace = TRUE),
sample(0:9, 50, replace = TRUE),
sample(0:9, 50, replace = TRUE)
)
treatment_function = c("100", "101", "102", "110", "242", "260", "280", "321",
"180", "190", "192", "300", "301", "302", "361", "711")
# Small sample from patient_data ----
data_patient = data_patient %>%
filter(patient_id %in% sample(data_patient$patient_id,
min(n_max, nrow(.))))
# Admission data ----
dummy_data_admissions = data_patient %>%
transmute(
admission_date_1 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_1 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_1 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_1 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_1 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_1 = rpois(nrow(data_patient), 0.1),
admission_date_2 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_2 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_2 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_2 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_2 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_2 = rpois(nrow(data_patient), 0.1),
admission_date_3 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_3 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_3 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_3 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_3 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_3 = rpois(nrow(data_patient), 0.1),
admission_date_4 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_4 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_4 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_4 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_4 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_4 = rpois(nrow(data_patient), 0.1),
admission_date_5 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_5 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_5 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_5 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_5 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_5 = rpois(nrow(data_patient), 0.1),
admission_date_6 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_6 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_6 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_6 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_6 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_6 = rpois(nrow(data_patient), 0.1),
admission_date_7 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_7 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_7 = sample(admission_method, nrow(data_patient), replace = TRUE),
primary_diagnosis_7 = sample(primary_diagnosis, nrow(data_patient), replace = TRUE),
treatment_function_7 = sample(treatment_function, nrow(data_patient), replace = TRUE),
critical_care_days_7 = rpois(nrow(data_patient), 0.1),
patient_id = patient_id,
)
## Make dates consecutive, create missing values based on incidence ----
dummy_data_admissions = dummy_data_admissions %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date", "critical_care_days"))),
as.character) %>%
pivot_longer(-patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)") %>%
pivot_wider(names_from = variable) %>%
mutate(admission_date_temp = admission_date %>% ymd(),
discharge_date_temp = discharge_date %>% ymd()) %>%
group_by(patient_id) %>%
mutate(
admission_date = sort(c(admission_date_temp, discharge_date_temp)
)[seq(1,2*n(), by = 2)] %>%
as.character(),
discharge_date = sort(c(admission_date_temp, discharge_date_temp)
)[seq(2,2*n(), by = 2)] %>%
as.character(),
) %>%
ungroup() %>%
mutate(prob = runif(n())) %>%
filter(prob <= incidence) %>%
select(-c(prob, admission_date_temp, discharge_date_temp)) %>%
group_by(patient_id) %>%
mutate(index = 1:n()) %>%
pivot_longer(-c(patient_id, index)) %>%
mutate(var_name = paste0(name, "_", index)) %>%
select(-c(name, index))
## Ensure valid number of rows and columns ----
dummy_data_admissions = tibble(
patient_id = unique(data_patient$patient_id) %>% rep(each = 6*n_admission),
var_name = rep(paste0(rep(c("admission_date_", "discharge_date_", "admission_method_",
"primary_diagnosis_", "treatment_function_", "critical_care_days_"), 7),
rep(c(1:n_admission), each = 6)),
length(unique(data_patient$patient_id)))
) %>%
left_join(dummy_data_admissions) %>%
pivot_wider(names_from = var_name, values_from = value)
## Add admission count, relocate patient_id to last row ----
dummy_data_admissions = dummy_data_admissions %>%
mutate(admission_count = dummy_data_admissions %>%
transmute(across(starts_with("admission_date"), ~ !is.na(.x))) %>%
mutate(admission_count = reduce(select(., starts_with("admission_date")), `+`)) %>%
pull(admission_count)) %>%
relocate(patient_id, .after = last_col())
View(dummy_data_admissions)
