age = rnorm(n_patient, 45, 10),
main_condition = sample(c("B500", "K600", "K700", "K701", NA, NA, NA), n_patient, replace = TRUE),
other_condition_1 = sample(c("B500", "K600", "K700", "K701", NA, NA, NA), n_patient, replace = TRUE),
other_condition_2 = sample(c("B500", "K600", "K700", "K701", NA, NA, NA), n_patient, replace = TRUE),
other_condition_3 = sample(c("B500", "K600", "K700", "K701", NA, NA, NA), n_patient, replace = TRUE),
sbp = rnorm(n_patient, 100, 10),
)
x = df %>%
mutate(res = if_else(across(main_condition:other_condition_3,
~ str_starts(.x, "K70"), na.rm = T) %>%
rowSums(na.rm = TRUE) > 0,
"Yes", "No"))
View(x)
library(tidyverse)
n_patient = 1000
df = tibble(
age = rnorm(n_patient, 45, 10),
main_condition = sample(c("B500", "K600", "K700", "K701", NA, NA, NA), n_patient, replace = TRUE),
other_condition_1 = sample(c("B500", "K600", "K700", "K701", NA, NA, NA), n_patient, replace = TRUE),
other_condition_2 = sample(c("B500", "K600", "K700", "K701", NA, NA, NA), n_patient, replace = TRUE),
other_condition_3 = sample(c("B500", "K600", "K700", "K701", NA, NA, NA), n_patient, replace = TRUE),
sbp = rnorm(n_patient, 100, 10),
)
x = df %>%
mutate(ald = if_else(across(main_condition:other_condition_3,
~ str_starts(.x, "K70"), na.rm = T) %>%
rowSums(na.rm = TRUE) > 0,
"Yes", "No"))
View(x)
library(tidyverse)
n_patient = 1000
df = tibble(
age = rnorm(n_patient, 45, 10),
main_condition = sample(c("B500", "K600", "K700", "K701", NA), n_patient, replace = TRUE, prob = c(0.05, 0.05, 0.05, 0.05, 0.8)),
other_condition_1 = sample(c("B500", "K600", "K700", "K701", NA), n_patient, replace = TRUE, prob = c(0.05, 0.05, 0.05, 0.05, 0.8)),
other_condition_2 = sample(c("B500", "K600", "K700", "K701", NA), n_patient, replace = TRUE, prob = c(0.05, 0.05, 0.05, 0.05, 0.8)),
other_condition_3 = sample(c("B500", "K600", "K700", "K701", NA), n_patient, replace = TRUE, prob = c(0.05, 0.05, 0.05, 0.05, 0.8)),
sbp = rnorm(n_patient, 100, 10),
)
x = df %>%
mutate(ald = if_else(across(main_condition:other_condition_3,
~ str_starts(.x, "K70"), na.rm = T) %>%
rowSums(na.rm = TRUE) > 0,
"Yes", "No"))
library(tidyverse)
n_patient = 1000
df = tibble(
age = rnorm(n_patient, 45, 10),
main_condition = sample(c("B500", "K600", "K700", "K701", NA), n_patient, replace = TRUE, prob = c(0.05, 0.05, 0.05, 0.05, 0.8)),
other_condition_1 = sample(c("B500", "K600", "K700", "K701", NA), n_patient, replace = TRUE, prob = c(0.05, 0.05, 0.05, 0.05, 0.8)),
other_condition_2 = sample(c("B500", "K600", "K700", "K701", NA), n_patient, replace = TRUE, prob = c(0.05, 0.05, 0.05, 0.05, 0.8)),
other_condition_3 = sample(c("B500", "K600", "K700", "K701", NA), n_patient, replace = TRUE, prob = c(0.05, 0.05, 0.05, 0.05, 0.8)),
sbp = rnorm(n_patient, 100, 10),
)
x = df %>%
mutate(ald = if_else(across(main_condition:other_condition_3,
~ str_starts(.x, "K70"), na.rm = T) %>%
rowSums(na.rm = TRUE) > 0,
"Yes", "No"))
View(df)
View(x)
library(tidyverse)
n_patient = 1000
df = tibble(
var_1 = sample(c("0.5", "1.0", "2"), n_patient, TRUE),
var_2 = sample(c("0.5", "1.5", "3"), n_patient, TRUE),
var_3 = sample(c("0.5", "2.0", "4"), n_patient, TRUE),
var_4 = sample(c("0.5", "2.5", "5"), n_patient, TRUE),
var_5 = sample(c("0.5", "3.0", "6"), n_patient, TRUE),
lambda = across(var_1:var_5, ~ .x %>% as.numeric) %>%
rowSums()
)
df = tibble(
var_1 = sample(c("0.5", "1.0", "2"), n_patient, TRUE),
var_2 = sample(c("0.5", "1.5", "3"), n_patient, TRUE),
var_3 = sample(c("0.5", "2.0", "4"), n_patient, TRUE),
var_4 = sample(c("0.5", "2.5", "5"), n_patient, TRUE),
var_5 = sample(c("0.5", "3.0", "6"), n_patient, TRUE),
) %>%
mutate(
lambda = across(var_1:var_5, ~ .x %>% as.numeric) %>%
rowSums()
)
View(df)
df = tibble(
var_1 = sample(c("0.1", "0.2", "0.3"), n_patient, TRUE),
var_2 = sample(c("0.2", "0.3", "0.4"), n_patient, TRUE),
var_3 = sample(c("0.3", "0.4", "0.5"), n_patient, TRUE),
var_4 = sample(c("0.4", "0.5", "0.6"), n_patient, TRUE),
var_5 = sample(c("0.5", "0.6", "0.7"), n_patient, TRUE),
) %>%
mutate(
lambda = across(var_1:var_5, ~ .x %>% as.numeric) %>%
rowSums()
)
View(df)
View(x)
View(df)
df = tibble(
var_1 = sample(c("0.1", "0.2", "0.3"), n_patient, TRUE),
var_2 = sample(c("0.2", "0.3", "0.4"), n_patient, TRUE),
var_3 = sample(c("0.3", "0.4", "0.5"), n_patient, TRUE),
var_4 = sample(c("0.4", "0.5", "0.6"), n_patient, TRUE),
var_5 = sample(c("0.5", "0.6", "0.7"), n_patient, TRUE),
) %>%
mutate(
lambda = across(var_1:var_5, ~ .x %>% as.numeric) %>%
rowSums() %>% exp()
)
View(df)
df = tibble(
var_1 = sample(c("0.1", "0.2", "0.3"), n_patient, TRUE),
var_2 = sample(c("0.2", "0.3", "0.4"), n_patient, TRUE),
var_3 = sample(c("0.3", "0.4", "0.5"), n_patient, TRUE),
var_4 = sample(c("0.4", "0.5", "0.6"), n_patient, TRUE),
var_5 = sample(c("0.5", "0.6", "0.7"), n_patient, TRUE),
) %>%
mutate(
lambda = across(var_1:var_5, ~ .x %>% as.numeric) %>%
rowSums() %>% exp()
) %>%
rowwise() %>%
mutate(
obs = rpois(1, lambda)
)
df = tibble(
var_1 = sample(c("0.1", "0.2", "0.3"), n_patient, TRUE),
var_2 = sample(c("0.2", "0.3", "0.4"), n_patient, TRUE),
var_3 = sample(c("0.3", "0.4", "0.5"), n_patient, TRUE),
var_4 = sample(c("0.4", "0.5", "0.6"), n_patient, TRUE),
var_5 = sample(c("0.5", "0.6", "0.7"), n_patient, TRUE),
) %>%
mutate(
lambda = across(var_1:var_5, ~ .x %>% as.numeric) %>%
rowSums() %>% exp()
) %>%
rowwise() %>%
mutate(
obs = rpois(1, lambda)
) %>%
ungroup()
View(df)
df = tibble(
var_1 = sample(c("0.1", "0.2", "0.3"), n_patient, TRUE) %>% factor(),
var_2 = sample(c("0.2", "0.3", "0.4"), n_patient, TRUE) %>% factor(),
var_3 = sample(c("0.3", "0.4", "0.5"), n_patient, TRUE) %>% factor(),
var_4 = sample(c("0.4", "0.5", "0.6"), n_patient, TRUE) %>% factor(),
var_5 = sample(c("0.5", "0.6", "0.7"), n_patient, TRUE) %>% factor(),
) %>%
mutate(
lambda = across(var_1:var_5, ~ .x %>% as.numeric) %>%
rowSums() %>% exp()
) %>%
rowwise() %>%
mutate(
obs = rpois(1, lambda)
) %>%
ungroup()
df %>%
glm(formula = obs ~ var_1 + var_2 + var_3 + var_4 + var_5,
family = "poisson",
data = .)
library(broom)
glm_fit %>%
tidy(exponentiate = TRUE)
glm_fit = df %>%
glm(formula = obs ~ var_1 + var_2 + var_3 + var_4 + var_5,
family = "poisson",
data = .)
glm_fit %>%
tidy(exponentiate = TRUE)
df = tibble(
var_1 = sample(c("0.1", "0.2", "0.3"), n_patient, TRUE) %>% factor(),
var_2 = sample(c("0.2", "0.3", "0.4"), n_patient, TRUE) %>% factor(),
var_3 = sample(c("0.3", "0.4", "0.5"), n_patient, TRUE) %>% factor(),
var_4 = sample(c("0.4", "0.5", "0.6"), n_patient, TRUE) %>% factor(),
var_5 = sample(c("0.5", "0.6", "0.7"), n_patient, TRUE) %>% factor(),
) %>%
mutate(
lambda = across(var_1:var_5, ~ .x %>% as.numeric) %>%
rowSums()
) %>%
rowwise() %>%
mutate(
obs = rpois(1, lambda)
) %>%
ungroup()
glm_fit = df %>%
glm(formula = obs ~ var_1 + var_2 + var_3 + var_4 + var_5,
family = "poisson",
data = .)
glm_fit %>%
tidy(exponentiate = TRUE)
install.packages("glm4")
# Load data
colon_s = colon_s
criteria = list(
"A" = 1,
"B" = 2
)
str_starts()criteria
criteria
criteria = list(
"A" = "age > 50",
"B" = 'sex.factor == "Male"'
)
criteria
criteria = list(
"A" = 'age > 50',
"B" = 'sex.factor == "Male"'
)
criteria = list(
"A" = 'age > 50',
"B" = 'sex.factor == "Male"'
"C" = '!is.na(obstruct.factor)'
criteria = list(
"A" = 'age > 50',
"B" = 'sex.factor == "Male"',
"C" = '!is.na(obstruct.factor)'
)
criteria = list(
"age over 50 years" = 'age > 50',
"is male" = 'sex.factor == "Male"',
"obstruction data not missing" = '!is.na(obstruct.factor)'
)
criteria
list("a", "b", "c")
list("a", "b", "c") %>% names()
criteria %>% names()
list("a" = "hi", "hu", "c" = "hasd")
list("a" = "hi", "hu", "c" = "hasd") %>% names()
colon_s %>%
filter('age > 50')
colon_s %>%
filter(expr('age > 50'))
# Load data
colon_s = colon_s
library(finalfit)
colon_s %>%
filter(expr('age > 50'))
library(rlang)
colon_s %>%
filter(!! parse_expr('age > 50'))
View(summary_factorlist())
View(summary_factorlist)
## Model healthcare contacts using Poisson regression
model_fit = glm(model_formula,
weights = data_weighted$weights,
family = poisson,
data = data_weighted)
library(broom)
library(broom.helpers)
library(tidyverse)
library(lubridate)
library(finalfit)
# Load custom functions ----
source(here::here("analysis", "00_utility_functions.R"))
# Load global variables ----
global_var = jsonlite::read_json(path = here::here("analysis", "global_variables.json"))
# Disclosure control parameters ----
count_round = global_var$disclosure_count_round
# Study dates ----
study_start_date = ymd(global_var$start_date)
study_end_date   = ymd(global_var$end_date)
tp_start_date    = ymd(global_var$tp_start_date)
tp_end_date      = ymd(global_var$tp_end_date)
fup_start_date   = ymd(global_var$fup_start_date)
#Plot theme
theme_set(theme_bw())
# Command arguments to set resource type ----
args = commandArgs(trailingOnly=TRUE)
if(length(args) == 0){
resource_type  = "gp"
condition      = "all"
model_type     = "poisson"
} else{
resource_type  = args[[1]]
condition      = args[[2]]
model_type     = args[[3]]
}
# Create output directory folders ----
dir.create(here::here("output", "descriptives", "matched_cohort", model_type, "tables"),
showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "descriptives", "matched_cohort", model_type, "plots"),
showWarnings = FALSE, recursive=TRUE)
# Load weighted matched cohort  ----
data_weighted = read_rds(here::here("output", "data", "data_weighted.rds"))
# Load resource type ----
if(resource_type == "gp"){
data_resource = read_rds(here::here("output", "data", "data_gp.rds"))
if(condition == "all"){
data_resource = data_resource %>%
filter(str_starts(code_type, "KM_") |
str_starts(code_type, "mapped_1") |
str_starts(code_type, "mapped_2"))%>%
left_join(data_weighted %>%
select(patient_id, followup_start_date, followup_end_date_grouped),
by = "patient_id") %>%
filter(gp_date >= followup_start_date,
gp_date <= followup_end_date_grouped) %>%
distinct(patient_id, gp_date) %>%
count(patient_id) %>%
rename(health_contact = n)
} else{
data_resource = data_resource %>%
filter(code_type == paste0("KM_", condition)) %>%
left_join(data_weighted %>%
select(patient_id, followup_start_date, followup_end_date_grouped),
by = "patient_id") %>%
filter(gp_date >= followup_start_date,
gp_date <= followup_end_date_grouped) %>%
distinct(patient_id, gp_date) %>%
count(patient_id) %>%
rename(health_contact = n)
}
} else if(resource_type == "outpatient"){
data_resource = read_rds(here::here("output", "data", "data_outpatient.rds"))
if(condition == "all"){
data_resource = data_resource %>%
filter(is.na(specialty)) %>%
left_join(data_weighted %>%
select(patient_id, followup_start_date, followup_end_date_grouped),
by = "patient_id") %>%
filter(outpatient_date >= followup_start_date,
outpatient_date <= followup_end_date_grouped) %>%
group_by(patient_id) %>%
summarise(health_contact = sum(outpatient_count)) %>%
ungroup()
} else{
data_resource = data_resource %>%
filter(specialty == paste0("TF_", condition)) %>%
left_join(data_weighted %>%
select(patient_id, followup_start_date, followup_end_date_grouped),
by = "patient_id") %>%
filter(outpatient_date >= followup_start_date,
outpatient_date <= followup_end_date_grouped) %>%
group_by(patient_id) %>%
summarise(health_contact = sum(outpatient_count)) %>%
ungroup()
}
} else if(resource_type == "admissions" | resource_type == "beddays"){
data_resource = read_rds(here::here("output", "data", "data_admissions.rds"))
if(condition != "all"){
data_resource = data_resource %>%
mutate(primary_diagnosis.chapter = primary_diagnosis %>%
icd10_code_to_chapter() %>%
str_to_lower() %>%
str_replace_all(":", "") %>%
str_replace_all(",", "") %>%
str_replace_all("\\(", "") %>%
str_replace_all("\\)", "") %>%
str_replace_all("-", "_") %>%
str_replace_all(" ", "_") %>%
factor()) %>%
filter(primary_diagnosis.chapter == condition)
}
if (resource_type == "admissions"){
# Admission count
data_resource = data_resource %>%
left_join(data_weighted %>%
select(patient_id, followup_start_date, followup_end_date_grouped),
by = "patient_id") %>%
filter(admission_date >= followup_start_date,
admission_date <= followup_end_date_grouped) %>%
count(patient_id) %>%
rename(health_contact = n)
} else {
# Bed-days
data_resource = data_resource %>%
left_join(data_weighted %>%
select(patient_id, followup_start_date, followup_end_date_grouped),
by = "patient_id") %>%
filter(!is.na(followup_start_date), !is.na(followup_end_date_grouped)) %>%
filter(admission_date <= followup_end_date_grouped,
discharge_date >= followup_start_date) %>%
mutate(
admission_half_day = if_else(
admission_date >= followup_start_date &
admission_date <= followup_end_date_grouped, 0.5, 0),
discharge_half_day = if_else(
discharge_date >= followup_start_date &
discharge_date <= followup_end_date_grouped, 0.5, 0),
inbetween_day = (pmin(discharge_date, followup_end_date_grouped) -
pmax(admission_date, followup_start_date)) %>% as.numeric(),
length_of_stay = inbetween_day + 1 - admission_half_day -
discharge_half_day
) %>%
group_by(patient_id) %>%
summarise(
health_contact = sum(length_of_stay)
)
}
} else {
stop("Unrecognised resource_type")
}
# Add health contact data ----
data_weighted = data_weighted %>%
left_join(
data_resource %>%
select(patient_id, health_contact),
by = "patient_id"
) %>%
replace_na(list(health_contact = 0)) %>%
mutate(health_contact = round(health_contact))
# Negative binomial regression ----
## Predictors
predictors = c(
# Covid status
"covid_status_tp",
# Demographics
"age_group", "sex", "ethnicity", "imd_Q5_2019",
"region_2019", "rural_urban_2019",
# Comorbidities
#"comorbidity_count.factor",
"mental_health_disorders", "neurodevelopmental_and_behavioural",
"asthma", "cystic_fibrosis", "other_respiratory",
"cardiovascular", "epilepsy", "headaches", "other_neurological",
"gastrointestinal_conditions", "genitourinary", "cancer",
"non_malignant_haematological", "immunological", "chronic_infections",
"rheumatology", "congenital_malformation", "diabetes", "other_endocrine",
"metabolic", "obesity", "transplant", "palliative_care",
# Vaccination status
"vaccination_status",
# Resource use and covid testing
"n_covid_tests_Q",
"n_beddays_Q", "n_outpatient_Q", "n_gp_Q"
)
## Model forumla ----
model_formula = paste0("health_contact ~ ",
paste(predictors, collapse = " + ")) %>%
paste0(" + offset(log(person_time_grouped))") %>%
as.formula()
data_weighted$health_contact %>% hist()
## Model healthcare contacts using Poisson regression
model_fit = glm(model_formula,
weights = data_weighted$weights,
family = poisson,
data = data_weighted)
# Negative binomial regression ----
## Predictors
predictors = c(
# Covid status
"covid_status_tp",
# Demographics
"age_group", "sex", "ethnicity", "imd_Q5_2019",
"region_2019", "rural_urban_2019",
# Comorbidities
#"comorbidity_count.factor",
"mental_health_disorders", "neurodevelopmental_and_behavioural",
"asthma", "cystic_fibrosis", "other_respiratory",
"cardiovascular", "epilepsy", "headaches", "other_neurological",
"gastrointestinal_conditions", "genitourinary", "cancer",
"non_malignant_haematological", "immunological", "chronic_infections",
"rheumatology", "congenital_malformation", "diabetes", "other_endocrine",
"metabolic", "obesity", "transplant", "palliative_care",
# Vaccination status
#"vaccination_status",
# Resource use and covid testing
"n_covid_tests_Q",
"n_beddays_Q", "n_outpatient_Q", "n_gp_Q"
)
## Model healthcare contacts using Poisson regression
model_fit = glm(model_formula,
weights = data_weighted$weights,
family = poisson,
data = data_weighted)
# Negative binomial regression ----
## Predictors
predictors = c(
# Covid status
"covid_status_tp",
# Demographics
"age_group", "sex", "ethnicity", "imd_Q5_2019",
"region_2019", "rural_urban_2019",
# Comorbidities
#"comorbidity_count.factor",
"mental_health_disorders", "neurodevelopmental_and_behavioural",
"asthma", "cystic_fibrosis", "other_respiratory",
"cardiovascular", "epilepsy", "headaches", "other_neurological",
"gastrointestinal_conditions", "genitourinary", "cancer",
"non_malignant_haematological", "immunological", "chronic_infections",
"rheumatology", "congenital_malformation", "diabetes", "other_endocrine",
"metabolic", "obesity", "transplant", "palliative_care",
# Vaccination status
#"vaccination_status",
# Resource use and covid testing
"n_covid_tests_Q",
"n_beddays_Q", "n_outpatient_Q", "n_gp_Q"
)
## Model forumla ----
model_formula = paste0("health_contact ~ ",
paste(predictors, collapse = " + ")) %>%
paste0(" + offset(log(person_time_grouped))") %>%
as.formula()
## Model healthcare contacts using Poisson regression
model_fit = glm(model_formula,
weights = data_weighted$weights,
family = poisson,
data = data_weighted)
# Model coefficients ----
model_coeff = model_fit %>%
tidy_and_attach(exponentiate = TRUE, conf.int = TRUE) %>%
tidy_add_reference_rows() %>%
tidy_add_estimate_to_reference_rows() %>%
tidy_add_term_labels()
x = model_fit %>% tidy()
View(x)
x = model_fit %>% tidy(exponentiate = TRUE, conf.int = TRUE)
x = model_fit %>% tidy(exponentiate = TRUE)
summary(model_fit)
x = model_fit %>% tidy(exponentiate = TRUE, conf.int = TRUE)
View(x)
