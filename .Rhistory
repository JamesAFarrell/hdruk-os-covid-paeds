x = dummy_data_admissions %>% filter(str_starts(var_name, "admission_date")) %>%
mutate(value = ymd(value))
x = dummy_data_admissions %>% filter(str_starts(var_name, "admission_date")) %>%
mutate(value = ymd(value)) %>% ggplot(aes(value)) + geom_histogram
x = dummy_data_admissions %>% filter(str_starts(var_name, "admission_date")) %>%
mutate(value = ymd(value)) %>% ggplot(aes(value)) + geom_histogram()
x
# Load packages ----
library("tidyverse")
library("lubridate")
library("finalfit")
# Load custom functions ----
source(here::here("analysis", "00_functions.R"))
# Load json global variables
# global_var = rjson::fromJSON(file = here::here("analysis", "global_variables.json"))
global_var = list(
start_date = "2019-01-01",
end_date = "2022-05-01"
)
# Load patient data and sample ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Create directory for dummy data ----
dir.create(here::here("output", "dummy_data"), showWarnings = FALSE, recursive=TRUE)
# Dummy data variables ----
n_max = 1000
incidence = 0.2
date_range = seq(ymd(global_var$start_date), ymd(global_var$end_date), by="day")
date_range_testing = seq(ymd("2020-01-01"), ymd(global_var$end_date), by="day")
admission_method = c("11", "12", "13", "21", "22", "23", "24", "25", "2A",
"2B", "2C", "2D", "28", "31", "32", "82", "83", "81")
admission_method_prob = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0.05,
0.05, 0.05, 0.01, 0.01, 0.01, 0.01, 0.01)
# Small sample from patient_data ----
data_patient = data_patient %>%
filter(patient_id %in% sample(data_patient$patient_id,
min(n_max, nrow(.))))
# Admission data ----
dummy_data_admissions = data_patient %>%
transmute(
admission_date_1 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_1 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_1 = sample(admission_method, nrow(data_patient), replace = TRUE, prob = admission_method_prob),
admission_date_2 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_2 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_2 = sample(admission_method, nrow(data_patient), replace = TRUE, prob = admission_method_prob),
admission_date_3 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_3 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_3 = sample(admission_method, nrow(data_patient), replace = TRUE, prob = admission_method_prob),
admission_date_4 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_4 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_4 = sample(admission_method, nrow(data_patient), replace = TRUE, prob = admission_method_prob),
admission_date_5 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_5 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_5 = sample(admission_method, nrow(data_patient), replace = TRUE, prob = admission_method_prob),
admission_date_6 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_6 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_6 = sample(admission_method, nrow(data_patient), replace = TRUE, prob = admission_method_prob),
admission_date_7 = sample(date_range, nrow(data_patient), replace = TRUE),
discharge_date_7 = sample(date_range, nrow(data_patient), replace = TRUE),
admission_method_7 = sample(admission_method, nrow(data_patient), replace = TRUE, prob = admission_method_prob),
patient_id = patient_id,
)
## Make dates consecutive, create missing values based on incidence ----
dummy_data_admissions = dummy_data_admissions %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date"))),
as.character) %>%
pivot_longer(-patient_id,
names_to = c("variable", "type", "index"),
names_pattern = "^(.*)_(.*)_(\\d+)") %>%
pivot_wider(names_from = type) %>%
mutate(date = date %>% ymd()) %>%
group_by(patient_id) %>%
mutate(date = sort(date) %>% as.character()) %>%
ungroup() %>%
pivot_longer(-c(patient_id, variable, index),
names_to = "type", values_drop_na = TRUE) %>%
mutate(prob = rep(runif(n()/3), each = 3)) %>%
filter(prob <= incidence) %>%
group_by(patient_id) %>%
mutate(index = rep(1:(n()/3), each = 3),
var_name = paste(variable, type, index, sep = "_")) %>%
ungroup() %>%
arrange(index, type, variable) %>%
select(-c(prob, variable, index, type))
## Ensure valid number of rows and columns ----
dummy_data_admissions = tibble(
patient_id = unique(data_patient$patient_id) %>% rep(each = 21),
var_name = rep(paste0(rep(c("admission_date_", "discharge_date_", "admission_method_"), 7),
rep(c(1:7), each =3)),
length(unique(data_patient$patient_id)))
) %>%
left_join(dummy_data_admissions)
x = dummy_data_admissions %>% filter(str_starts(var_name, "admission_date")) %>%
mutate(value = ymd(value)) %>% ggplot(aes(value)) + geom_histogram()
x
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Load custom functions ----
source(here::here("analysis", "00_functions.R"))
# Create directory for processed data, descriptive tables and plots ----
dir.create(here::here("output", "datasets"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "extract_descriptives", "tables"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "extract_descriptives", "figures"), showWarnings = FALSE, recursive=TRUE)
# Monthly data files ----
path_data_weekly = here::here("output", "data_weekly")
files_admissions = list.files(path_data_weekly, "input_admissions_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_outpatient = list.files(path_data_weekly, "input_outpatient_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_gp         = list.files(path_data_weekly, "input_gp_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_testing    = list.files(path_data_weekly, "input_covid_tests_[[:lower:]]+_\\d{4}-\\d{2}-\\d{2}.csv.gz")
# Patient data ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Admission data ----
data_admissions = here::here("output", "data_weekly", files_admissions) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
## Record extract characteristics ----
extract_summary_admissions = data_admissions %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
n_max_count = max(data %>% pull(admission_count))
tibble(n_row, n_row_bad_id, n_col, n_col_empty, n_max_count)
}) %>%
bind_rows() %>%
mutate(file = files_admissions) %>%
relocate(file)
x = data_admissions[[1]]
View(x)
x %>% pivot_wider()
x %>% pivot_longer(-patient_id)
x %>% mutate(across(.fns = ymd))
x %>% mutate(across(.cols = contains("_date"), .fns = ymd))
x %>% mutate(across(.cols = contains("_date"), .fns = as.character)) %>% pivot_longer(-patient_id)
x %>% mutate(across(.cols = contains("_date"), .fns = as.character)) %>%
select(-admission_count) %>%
pivot_longer(-patient_id)
x %>% mutate(across(.cols = contains("_date"), .fns = as.character)) %>%
select(-admission_count) %>%
pivot_longer(-patient_id) %>%
filter(str_starts(name, "admission_date"))
x %>% mutate(across(.cols = contains("_date"), .fns = as.character)) %>%
select(-admission_count) %>%
pivot_longer(-patient_id) %>%
filter(str_starts(name, "admission_date")) %>%
x %>% mutate(across(.cols = contains("_date"), .fns = as.character)) %>%
select(-admission_count) %>%
pivot_longer(-patient_id) %>%
filter(str_starts(name, "admission_date")) %>%
ggplot(aes(value %>% ymd())) + geom_hist()
x %>% mutate(across(.cols = contains("_date"), .fns = as.character)) %>%
select(-admission_count) %>%
pivot_longer(-patient_id) %>%
filter(str_starts(name, "admission_date")) %>%
ggplot(aes(value %>% ymd())) + geom_histogram()
data_admissions = data_admissions %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-admission_count) %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date"))),
as.character) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = TRUE
) %>%
pivot_wider(
names_from = variable,
values_from = data
)
}) %>%
bind_rows() %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d")
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_missing_admission_date = sum(is.na(data_admissions$admission_date)),
spells_missing_discharge_date = sum(is.na(data_admissions$discharge_date)),
spells_discharge_before_admission =
sum(data_admissions$discharge_date < data_admissions$admission_date, na.rm = TRUE))
data_admissions = data_admissions %>%
filter(admission_date <= discharge_date,
!is.na(admission_date),
!is.na(discharge_date)) %>%
arrange(patient_id, admission_date)
View(data_admissions)
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_overlap = nrow(data_admissions))
data_admissions = data_admissions %>%
group_by(patient_id) %>%
mutate(index = row_number(),
overlap_with_prior =
case_when(admission_date < lag(discharge_date)~ 1,
TRUE ~ 0)) %>%
mutate(index = row_number() - cumsum(overlap_with_prior))%>%
select(-overlap_with_prior) %>%
group_by(patient_id, index) %>%
mutate(admission_date = min(admission_date),
discharge_date = max(discharge_date)) %>%
distinct(patient_id, admission_date, discharge_date,
.keep_all = TRUE) %>%
ungroup()
View(data_admissions)
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Load custom functions ----
source(here::here("analysis", "00_functions.R"))
# Create directory for processed data, descriptive tables and plots ----
dir.create(here::here("output", "datasets"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "extract_descriptives", "tables"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "extract_descriptives", "figures"), showWarnings = FALSE, recursive=TRUE)
# Monthly data files ----
path_data_weekly = here::here("output", "data_weekly")
files_admissions = list.files(path_data_weekly, "input_admissions_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_outpatient = list.files(path_data_weekly, "input_outpatient_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_gp         = list.files(path_data_weekly, "input_gp_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_testing    = list.files(path_data_weekly, "input_covid_tests_[[:lower:]]+_\\d{4}-\\d{2}-\\d{2}.csv.gz")
# Patient data ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Admission data ----
data_admissions = here::here("output", "data_weekly", files_admissions) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
## Record extract characteristics ----
extract_summary_admissions = data_admissions %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
n_max_count = max(data %>% pull(admission_count))
tibble(n_row, n_row_bad_id, n_col, n_col_empty, n_max_count)
}) %>%
bind_rows() %>%
mutate(file = files_admissions) %>%
relocate(file)
## Filter out patients not in cohort, pivot longer to one row per admission spell ----
data_admissions = data_admissions %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-admission_count) %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date"))),
as.character) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = TRUE
) %>%
pivot_wider(
names_from = variable,
values_from = data
)
}) %>%
bind_rows() %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d")
## Record filtering out bad admission spells ----
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_missing_admission_date = sum(is.na(data_admissions$admission_date)),
spells_missing_discharge_date = sum(is.na(data_admissions$discharge_date)),
spells_discharge_before_admission =
sum(data_admissions$discharge_date < data_admissions$admission_date, na.rm = TRUE))
## Filter out admission spells with missing or bad dates ----
data_admissions = data_admissions %>%
filter(admission_date <= discharge_date,
!is.na(admission_date),
!is.na(discharge_date)) %>%
arrange(patient_id, admission_date)
## Record rows to calculate number of overlapping spells ----
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_overlap = nrow(data_admissions))
## Fix overlapping admission spells ----
data_admissions = data_admissions %>%
group_by(patient_id) %>%
mutate(index = row_number(),
overlap_with_prior =
case_when(admission_date < lag(discharge_date)~ 1,
TRUE ~ 0)) %>%
mutate(index = row_number() - cumsum(overlap_with_prior))%>%
select(-overlap_with_prior) %>%
group_by(patient_id, index) %>%
mutate(admission_date = min(admission_date),
discharge_date = max(discharge_date))
View(data_admissions)
x = data_admissions %>% distinct()
View(x)
?distinct
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Load custom functions ----
source(here::here("analysis", "00_functions.R"))
# Create directory for processed data, descriptive tables and plots ----
dir.create(here::here("output", "datasets"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "extract_descriptives", "tables"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "extract_descriptives", "figures"), showWarnings = FALSE, recursive=TRUE)
# Monthly data files ----
path_data_weekly = here::here("output", "data_weekly")
files_admissions = list.files(path_data_weekly, "input_admissions_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_outpatient = list.files(path_data_weekly, "input_outpatient_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_gp         = list.files(path_data_weekly, "input_gp_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_testing    = list.files(path_data_weekly, "input_covid_tests_[[:lower:]]+_\\d{4}-\\d{2}-\\d{2}.csv.gz")
# Patient data ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Admission data ----
data_admissions = here::here("output", "data_weekly", files_admissions) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
## Record extract characteristics ----
extract_summary_admissions = data_admissions %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
n_max_count = max(data %>% pull(admission_count))
tibble(n_row, n_row_bad_id, n_col, n_col_empty, n_max_count)
}) %>%
bind_rows() %>%
mutate(file = files_admissions) %>%
relocate(file)
## Filter out patients not in cohort, pivot longer to one row per admission spell ----
data_admissions = data_admissions %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-admission_count) %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date"))),
as.character) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = TRUE
) %>%
pivot_wider(
names_from = variable,
values_from = data
)
}) %>%
bind_rows() %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d")
## Record filtering out bad admission spells ----
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_missing_admission_date = sum(is.na(data_admissions$admission_date)),
spells_missing_discharge_date = sum(is.na(data_admissions$discharge_date)),
spells_discharge_before_admission =
sum(data_admissions$discharge_date < data_admissions$admission_date, na.rm = TRUE))
## Filter out admission spells with missing or bad dates ----
data_admissions = data_admissions %>%
filter(admission_date <= discharge_date,
!is.na(admission_date),
!is.na(discharge_date)) %>%
arrange(patient_id, admission_date)
## Record rows to calculate number of overlapping spells ----
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_overlap = nrow(data_admissions))
## Fix overlapping admission spells ----
data_admissions = data_admissions %>%
group_by(patient_id) %>%
mutate(index = row_number(),
overlap_with_prior =
case_when(admission_date < lag(discharge_date)~ 1,
TRUE ~ 0)) %>%
mutate(index = row_number() - cumsum(overlap_with_prior))%>%
select(-overlap_with_prior) %>%
group_by(patient_id, index) %>%
mutate(admission_date = min(admission_date),
discharge_date = max(discharge_date)) %>%
ungroup() %>%
select(-index) %>%
distinct(patient_id, admission_date, discharge_date,
.keep_all = TRUE)
View(data_admissions)
data_admissions %>% ggplot(aes(admission_date)) + geom_histogram()
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Load custom functions ----
source(here::here("analysis", "00_functions.R"))
# Create directory for processed data, descriptive tables and plots ----
dir.create(here::here("output", "datasets"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "extract_descriptives", "tables"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "extract_descriptives", "figures"), showWarnings = FALSE, recursive=TRUE)
# Monthly data files ----
path_data_weekly = here::here("output", "data_weekly")
files_admissions = list.files(path_data_weekly, "input_admissions_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_outpatient = list.files(path_data_weekly, "input_outpatient_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_gp         = list.files(path_data_weekly, "input_gp_\\d{4}-\\d{2}-\\d{2}.csv.gz")
files_testing    = list.files(path_data_weekly, "input_covid_tests_[[:lower:]]+_\\d{4}-\\d{2}-\\d{2}.csv.gz")
# Patient data ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Admission data ----
data_admissions = here::here("output", "data_weekly", files_admissions) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
## Record extract characteristics ----
extract_summary_admissions = data_admissions %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(~(all(is.na(.)))) %>%
ncol()
n_max_count = max(data %>% pull(admission_count))
tibble(n_row, n_row_bad_id, n_col, n_col_empty, n_max_count)
}) %>%
bind_rows() %>%
mutate(file = files_admissions) %>%
relocate(file)
## Filter out patients not in cohort, pivot longer to one row per admission spell ----
data_admissions = data_admissions %>%
map(function(data){
data %>%
filter(patient_id %in% data_patient$patient_id) %>%
select(-admission_count) %>%
mutate_at(vars(starts_with(c("admission_date", "discharge_date"))),
as.character) %>%
pivot_longer(
cols = -patient_id,
names_to = c("variable", "index"),
names_pattern = "^(.*)_(\\d+)",
values_to = "data",
values_drop_na = TRUE
) %>%
pivot_wider(
names_from = variable,
values_from = data
)
}) %>%
bind_rows() %>%
mutate_at(vars(contains("_date")), as.Date, format = "%Y-%m-%d")
## Record filtering out bad admission spells ----
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_missing_admission_date = sum(is.na(data_admissions$admission_date)),
spells_missing_discharge_date = sum(is.na(data_admissions$discharge_date)),
spells_discharge_before_admission =
sum(data_admissions$discharge_date < data_admissions$admission_date, na.rm = TRUE))
## Filter out admission spells with missing or bad dates ----
data_admissions = data_admissions %>%
filter(admission_date <= discharge_date,
!is.na(admission_date),
!is.na(discharge_date)) %>%
arrange(patient_id, admission_date)
## Record rows to calculate number of overlapping spells ----
extract_summary_admissions = extract_summary_admissions %>%
mutate(spells_overlap = nrow(data_admissions))
## Fix overlapping admission spells ----
data_admissions = data_admissions %>%
group_by(patient_id) %>%
mutate(index = row_number(),
overlap_with_prior =
case_when(admission_date < lag(discharge_date)~ 1,
TRUE ~ 0)) %>%
mutate(index = row_number() - cumsum(overlap_with_prior))%>%
select(-overlap_with_prior) %>%
group_by(patient_id, index) %>%
mutate(admission_date = min(admission_date),
discharge_date = max(discharge_date)) %>%
ungroup() %>%
select(-index) %>%
distinct(patient_id, admission_date, discharge_date,
.keep_all = TRUE) %>%
group_by(patient_id) %>%
mutate(index = row_number()) %>%
ungroup() %>%
relocate(index, .after = patient_id)
View(data_admissions)
data_admissions %>% ggplot(aes(admission_date)) + geom_histogram()
