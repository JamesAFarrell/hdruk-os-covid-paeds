(imd_2021 >= 32844*4/5)                          ~ "(least deprived) 5",
TRUE ~ NA_character_
) %>%
factor(levels = c("(most deprived) 1", "2", "3", "4", "(least deprived) 5")) %>%
ff_label("Multiple deprivation quintile"),
rural_urban_2019 = case_when(
rural_urban_2019 %in% c(1,2)     ~ "Urban conurbation",
rural_urban_2019 %in% c(3,4)     ~ "Urban city or town",
rural_urban_2019 %in% c(5,6,7,8) ~ "Rural town or village",
TRUE                             ~ NA_character_
) %>%
factor() %>%
ff_label("Rural-urban classification"),
rural_urban_2020 = case_when(
rural_urban_2020 %in% c(1,2)     ~ "Urban conurbation",
rural_urban_2020 %in% c(3,4)     ~ "Urban city or town",
rural_urban_2020 %in% c(5,6,7,8) ~ "Rural town or village",
TRUE                             ~ NA_character_
) %>%
factor() %>%
ff_label("Rural-urban classification"),
rural_urban_2021 = case_when(
rural_urban_2021 %in% c(1,2)     ~ "Urban conurbation",
rural_urban_2021 %in% c(3,4)     ~ "Urban city or town",
rural_urban_2021 %in% c(5,6,7,8) ~ "Rural town or village",
TRUE                             ~ NA_character_
) %>%
factor() %>%
ff_label("Rural-urban classification"),
covid_status = case_when(
!is.na(covid_positive_test_date_1) ~ "SARS-CoV-2 positive",
!is.na(covid_negative_test_date_1) ~ "SARS-CoV-2 negative",
TRUE ~ "Untested"
) %>%
factor() %>%
ff_label("COVID status"),
covid_status_tp = case_when(
covid_positive_test_date_1 >= ymd("2020-01-01") &
covid_positive_test_date_1 < ymd("2021-05-01") ~ "SARS-CoV-2 positive",
covid_negative_test_date_1 >= ymd("2020-01-01") &
covid_negative_test_date_1 < ymd("2021-05-01") ~ "SARS-CoV-2 negative",
TRUE ~ "Untested"
) %>%
factor() %>%
ff_label("COVID status during test period"),
death_factor = case_when(
!is.na(death_date) ~ "Dead",
TRUE               ~ "Alive"
) %>%
factor() %>%
ff_label("Death"),
)
# Define potential nosocomial infection ----
# Defined as a positive covid test after day 7 in hospital and on or before 7th
# day following discharge
data_patient = data_patient %>%
left_join(
data_admissions %>%
left_join(data_patient %>% select(patient_id,
covid_positive_test_date_1),
by = "patient_id") %>%
mutate(covid_nosocomial = if_else(
(admission_date + days(7) < covid_positive_test_date_1) &
(discharge_date + days(7)>= covid_positive_test_date_1),
"Yes", NA_character_) %>%
ff_label("Nosocomial infection")) %>%
filter(covid_nosocomial == "Yes") %>%
select(patient_id, covid_nosocomial) %>%
group_by(patient_id) %>%
slice(1) %>%
ungroup(),
by = "patient_id"
)
# Discrepant test result ----
data_patient = data_patient %>%
mutate(covid_discrepant_test = if_else(
covid_positive_test_date_1 == covid_negative_test_date_before_positive,
"Yes",
NA_character_
))
# Construct cohorts ----
data_patient = data_patient %>%
mutate(
excl_cohort_2019 = case_when(
covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
age_2019_factor == "Under 4" ~ "Age 4 years or below on 1st Jan 2019",
age_2019_factor == "18+" ~ "Age 18 years or above on 1st Jan 2019",
TRUE ~ NA_character_
),
excl_cohort_2020 = case_when(
covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
age_2020_factor == "Under 4" ~ "Age 4 years or below on 1st Jan 2020",
age_2020_factor == "18+" ~ "Age 18 years or above on 1st Jan 2020",
TRUE ~ NA_character_
),
excl_cohort_2021 = case_when(
covid_nosocomial == "Yes" ~ "Probable nosocomial infection",
covid_discrepant_test == "Yes" ~ "Discrepant same-day RT-PCR result",
age_2021_factor == "Under 4" ~ "Age 4 years or below on 1st Jan 2021",
age_2021_factor == "18+" ~ "Age 18 years or above on 1st Jan 2021",
TRUE ~ NA_character_
),
)
# Save data as rds ----
write_rds(data_patient,
here::here("output", "data", "data_patient.rds"),
compress="gz")
write_rds(data_admissions,
here::here("output", "data", "data_admissions.rds"),
compress="gz")
write_rds(data_outpatient,
here::here("output", "data", "data_outpatient.rds"),
compress="gz")
write_rds(data_gp,
here::here("output", "data", "data_gp.rds"),
compress="gz")
# Save diagnostic log files as csv ----
write_csv(extract_summary_admissions,
here::here("output", "diagnostics", "extract_summary_admissions.csv"))
write_csv(extract_summary_gp,
here::here("output", "diagnostics", "extract_summary_gp.csv"))
write_csv(extract_summary_outpatient,
here::here("output", "diagnostics", "extract_summary_outpatient.csv"))
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
spec()
View(data_outpatient)
data_outpatient[[1]]
files_outpatient
tibble(
column_names = c(read_csv(
files_outpatient[1],
n_max = 1,
col_names = FALSE
)))
tibble(
column_names = c(read_csv(
paste0("output/",files_outpatient[1]),
n_max = 1,
col_names = FALSE
)))
?spec
tibble(
column_names = c(read_csv(
paste0("output/",files_outpatient[1]),
n_max = 1,
col_names = FALSE,
)))
tibble(
column_names = c(read_csv(
paste0("output/",files_outpatient[1]),
n_max = 1,
col_names = FALSE,
show_col_types = FALSE
)))
# Functions ----
# read_column_type: read column name to determine data type
read_column_type = function(file){
tibble(
column_names = c(read_csv(
file,
n_max = 1,
col_names = FALSE,
show_col_types = FALSE
))) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
}
?read_csv
xfile = paste0("output/",files_outpatient[1])
read_csv(
xfile,
n_max = 1,
col_names = FALSE,
show_col_types = FALSE
)
x = read_csv(
xfile,
n_max = 1,
col_names = FALSE,
show_col_types = FALSE
)
x
View(x)
# Functions ----
# read_column_type: read column name to determine data type
read_column_type = function(file){
first_row = read_csv(
file,
n_max = 1,
col_names = FALSE,
show_col_types = FALSE
)
tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
}
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
# Functions ----
# read_column_type: read column name to determine data type
read_column_type = function(file){
first_row = read_csv(
file,
n_max = 1,
col_names = FALSE
)
tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
}
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
y = data_outpatient[[1]]
View(y)
read_column_type(xfile)
# Functions ----
# read_column_type: read column name to determine data type
read_column_type = function(file){
first_row = read_csv(
file,
n_max = 1,
col_names = FALSE,
show_col_types = FALSE
)
type_string = tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
return(type_string)
}
read_column_type(xfile)
# Read patient data from csv ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
?read_csv
# Functions ----
# read_column_type: read column name to determine data type
read_column_type = function(file){
first_row = read_csv(
file,
n_max = 1,
col_names = FALSE,
show_col_types = FALSE,
progress = FALSE
)
type_string = tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
return(type_string)
}
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(file)) %>%
as_tibble()
})
y = data_outpatient[[4]]
View(y)
read_column_type(paste0("output/", files_outpatient[4]))
?read_csv
data_outpatient = here::here("output", files_outpatient[1]) %>%
read_csv()
View(data_outpatient)
data_outpatient = here::here("output", files_outpatient[5]) %>%
read_csv()
files_outpatient[5]
files_outpatient[4]
files_outpatient[3]
files_outpatient[2]
files_outpatient[1]
files_outpatient
data_outpatient = here::here("output", files_outpatient[2]) %>%
read_csv()
data_outpatient = here::here("output", files_outpatient[1]) %>%
read_csv()
View(data_outpatient)
data_outpatient = here::here("output", files_outpatient[1]) %>%
map(function(file){
read_csv(file, col_types = cols(.default = "c")) %>%
as_tibble()
})
data_outpatient
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
read_csv(file, col_types = cols(.default = "c")) %>%
as_tibble()
})
?map
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Functions ----
# read_column_type: read column name to determine data type
read_column_type = function(file){
first_row = read_csv(
file,
n_max = 1,
col_names = FALSE,
col_types = cols(.default = "c")
)
type_string = tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
return(type_string)
}
# Create directory for processed data and diagnostics ----
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "diagnostics"), showWarnings = FALSE, recursive=TRUE)
# Data Files ----
files_outpatient = list.files(path = "output", pattern = "input_outpatient_")
files_gp         = list.files(path = "output", pattern = "input_gp_")
files_admissions = list.files(path = "output", pattern = "input_admissions_")
# Read patient data from csv ----
data_patient = read_csv(here::here("output", "input.csv.gz"),
col_types = read_column_type(here::here("output", "input.csv.gz")))
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient[1]) %>%
read_csv()
# data_outpatient = here::here("output", files_outpatient) %>%
#   map(function(file){
#     read_csv(file, col_types = cols(.default = "c")) %>%
#       as_tibble()
#   })
extract_summary_outpatient = data_outpatient %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(function(x) (all(is.na(x)) | all(x==""))) %>%
ncol()
tibble(n_row, n_row_bad_id, n_col, n_col_empty)
}) %>%
bind_rows() %>%
mutate(file = files_outpatient) %>%
relocate(file)
# Read patient data from csv ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
extract_summary_outpatient = data_outpatient %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(function(x) (all(is.na(x)) | all(x==""))) %>%
ncol()
#tibble(n_row, n_row_bad_id, n_col, n_col_empty)
tibble(5)
}) %>%
bind_rows() %>%
mutate(file = files_outpatient) %>%
relocate(file)
# Load packages ----
library(tidyverse)
library(lubridate)
library(finalfit)
# Functions ----
# read_column_type: read column name to determine data type
read_column_type = function(file){
first_row = read_csv(
file,
n_max = 1,
col_names = FALSE,
col_types = cols(.default = "c")
)
type_string = tibble(
column_names = c(first_row)) %>%
mutate(column_type = case_when(
column_names == "patient_id" ~ "i",
str_detect(column_names, "_date") ~ "D",
str_detect(column_names, "imd_") ~ "i",
str_detect(column_names, "age") ~ "d",
str_detect(column_names, "_count") ~ "i",
TRUE ~ "c"
)) %>%
pull(column_type) %>%
paste(collapse = "")
return(type_string)
}
# Create directory for processed data and diagnostics ----
dir.create(here::here("output", "data"), showWarnings = FALSE, recursive=TRUE)
dir.create(here::here("output", "diagnostics"), showWarnings = FALSE, recursive=TRUE)
# Data Files ----
files_outpatient = list.files(path = "output", pattern = "input_outpatient_")
files_gp         = list.files(path = "output", pattern = "input_gp_")
files_admissions = list.files(path = "output", pattern = "input_admissions_")
# Read patient data from csv ----
data_patient = here::here("output", "input.csv.gz") %>%
read_csv(col_types = read_column_type(.))
# Outpatient data ----
data_outpatient = here::here("output", files_outpatient) %>%
map(function(file){
file %>%
read_csv(col_types = read_column_type(.)) %>%
as_tibble()
})
extract_summary_outpatient = data_outpatient %>%
map(function(data){
n_row = nrow(data)
n_row_bad_id = data %>%
filter(!patient_id %in% data_patient$patient_id) %>%
nrow()
n_col = ncol(data)
n_col_empty = data %>%
select_if(function(x) (all(is.na(x)) | all(x==""))) %>%
ncol()
#tibble(n_row, n_row_bad_id, n_col, n_col_empty)
tibble(5)
}) %>%
bind_rows() %>%
mutate(file = files_outpatient) %>%
relocate(file)
View(extract_summary_outpatient)
?all
sample(1:9)
sample(1:9, replace = TRUE)
sample(1:9, replace = TRUE)
sample(1:9, replace = TRUE)
sample(1:9, replace = TRUE)
sample(1:9, 8, replace = TRUE)
sample(1:10, 8, replace = TRUE)
